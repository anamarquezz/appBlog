{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleJobRegistry = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst json_1 = require(\"../../json\");\n\nconst api_1 = require(\"./api\");\n\nconst exception_1 = require(\"./exception\");\n/**\n * A simple job registry that keep a map of JobName => JobHandler internally.\n */\n\n\nclass SimpleJobRegistry {\n  constructor() {\n    this._jobNames = new Map();\n  }\n\n  get(name) {\n    return (0, rxjs_1.of)(this._jobNames.get(name) || null);\n  }\n\n  register(nameOrHandler, handlerOrOptions = {}, options = {}) {\n    // Switch on the arguments.\n    if (typeof nameOrHandler == 'string') {\n      if (!(0, api_1.isJobHandler)(handlerOrOptions)) {\n        // This is an error.\n        throw new TypeError('Expected a JobHandler as second argument.');\n      }\n\n      this._register(nameOrHandler, handlerOrOptions, options);\n    } else if ((0, api_1.isJobHandler)(nameOrHandler)) {\n      if (typeof handlerOrOptions !== 'object') {\n        // This is an error.\n        throw new TypeError('Expected an object options as second argument.');\n      }\n\n      const name = options.name || nameOrHandler.jobDescription.name || handlerOrOptions.name;\n\n      if (name === undefined) {\n        throw new TypeError('Expected name to be a string.');\n      }\n\n      this._register(name, nameOrHandler, options);\n    } else {\n      throw new TypeError('Unrecognized arguments.');\n    }\n  }\n\n  _register(name, handler, options) {\n    if (this._jobNames.has(name)) {\n      // We shouldn't allow conflicts.\n      throw new exception_1.JobNameAlreadyRegisteredException(name);\n    } // Merge all fields with the ones in the handler (to make sure we respect the handler).\n\n\n    const argument = json_1.schema.mergeSchemas(handler.jobDescription.argument, options.argument);\n    const input = json_1.schema.mergeSchemas(handler.jobDescription.input, options.input);\n    const output = json_1.schema.mergeSchemas(handler.jobDescription.output, options.output); // Create the job description.\n\n    const jobDescription = {\n      name,\n      argument,\n      output,\n      input\n    };\n    const jobHandler = Object.assign(handler.bind(undefined), {\n      jobDescription\n    });\n\n    this._jobNames.set(name, jobHandler);\n  }\n  /**\n   * Returns the job names of all jobs.\n   */\n\n\n  getJobNames() {\n    return [...this._jobNames.keys()];\n  }\n\n}\n\nexports.SimpleJobRegistry = SimpleJobRegistry;","map":{"version":3,"names":["Object","defineProperty","exports","value","SimpleJobRegistry","rxjs_1","require","json_1","api_1","exception_1","constructor","_jobNames","Map","get","name","of","register","nameOrHandler","handlerOrOptions","options","isJobHandler","TypeError","_register","jobDescription","undefined","handler","has","JobNameAlreadyRegisteredException","argument","schema","mergeSchemas","input","output","jobHandler","assign","bind","set","getJobNames","keys"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/src/experimental/jobs/simple-registry.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SimpleJobRegistry = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst json_1 = require(\"../../json\");\nconst api_1 = require(\"./api\");\nconst exception_1 = require(\"./exception\");\n/**\n * A simple job registry that keep a map of JobName => JobHandler internally.\n */\nclass SimpleJobRegistry {\n    constructor() {\n        this._jobNames = new Map();\n    }\n    get(name) {\n        return (0, rxjs_1.of)(this._jobNames.get(name) || null);\n    }\n    register(nameOrHandler, handlerOrOptions = {}, options = {}) {\n        // Switch on the arguments.\n        if (typeof nameOrHandler == 'string') {\n            if (!(0, api_1.isJobHandler)(handlerOrOptions)) {\n                // This is an error.\n                throw new TypeError('Expected a JobHandler as second argument.');\n            }\n            this._register(nameOrHandler, handlerOrOptions, options);\n        }\n        else if ((0, api_1.isJobHandler)(nameOrHandler)) {\n            if (typeof handlerOrOptions !== 'object') {\n                // This is an error.\n                throw new TypeError('Expected an object options as second argument.');\n            }\n            const name = options.name || nameOrHandler.jobDescription.name || handlerOrOptions.name;\n            if (name === undefined) {\n                throw new TypeError('Expected name to be a string.');\n            }\n            this._register(name, nameOrHandler, options);\n        }\n        else {\n            throw new TypeError('Unrecognized arguments.');\n        }\n    }\n    _register(name, handler, options) {\n        if (this._jobNames.has(name)) {\n            // We shouldn't allow conflicts.\n            throw new exception_1.JobNameAlreadyRegisteredException(name);\n        }\n        // Merge all fields with the ones in the handler (to make sure we respect the handler).\n        const argument = json_1.schema.mergeSchemas(handler.jobDescription.argument, options.argument);\n        const input = json_1.schema.mergeSchemas(handler.jobDescription.input, options.input);\n        const output = json_1.schema.mergeSchemas(handler.jobDescription.output, options.output);\n        // Create the job description.\n        const jobDescription = {\n            name,\n            argument,\n            output,\n            input,\n        };\n        const jobHandler = Object.assign(handler.bind(undefined), {\n            jobDescription,\n        });\n        this._jobNames.set(name, jobHandler);\n    }\n    /**\n     * Returns the job names of all jobs.\n     */\n    getJobNames() {\n        return [...this._jobNames.keys()];\n    }\n}\nexports.SimpleJobRegistry = SimpleJobRegistry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}