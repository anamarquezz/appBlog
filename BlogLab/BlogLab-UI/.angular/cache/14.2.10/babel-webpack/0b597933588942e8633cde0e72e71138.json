{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GenerateCommandModule = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst command_module_1 = require(\"../../command-builder/command-module\");\n\nconst schematics_command_module_1 = require(\"../../command-builder/schematics-command-module\");\n\nconst command_1 = require(\"../../command-builder/utilities/command\");\n\nclass GenerateCommandModule extends schematics_command_module_1.SchematicsCommandModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'generate';\n    this.aliases = 'g';\n    this.describe = 'Generates and/or modifies files based on a schematic.';\n  }\n\n  builder(argv) {\n    var _superprop_getBuilder = () => super.builder,\n        _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let localYargs = (yield _superprop_getBuilder().call(_this2, argv)).command({\n        command: '$0 <schematic>',\n        describe: 'Run the provided schematic.',\n        builder: localYargs => localYargs.positional('schematic', {\n          describe: 'The [collection:schematic] to run.',\n          type: 'string',\n          demandOption: true\n        }).strict(),\n        handler: options => _this2.handler(options)\n      });\n\n      for (const [schematicName, collectionName] of yield _this2.getSchematicsToRegister()) {\n        const workflow = _this2.getOrCreateWorkflowForBuilder(collectionName);\n\n        const collection = workflow.engine.createCollection(collectionName);\n        const {\n          description: {\n            schemaJson,\n            aliases: schematicAliases,\n            hidden: schematicHidden,\n            description: schematicDescription\n          }\n        } = collection.createSchematic(schematicName, true);\n\n        if (!schemaJson) {\n          continue;\n        }\n\n        const {\n          'x-deprecated': xDeprecated,\n          description = schematicDescription,\n          aliases = schematicAliases,\n          hidden = schematicHidden\n        } = schemaJson;\n        const options = yield _this2.getSchematicOptions(collection, schematicName, workflow);\n        localYargs = localYargs.command({\n          command: yield _this2.generateCommandString(collectionName, schematicName, options),\n          // When 'describe' is set to false, it results in a hidden command.\n          describe: hidden === true ? false : typeof description === 'string' ? description : '',\n          deprecated: xDeprecated === true || typeof xDeprecated === 'string' ? xDeprecated : false,\n          aliases: Array.isArray(aliases) ? aliases : undefined,\n          builder: localYargs => _this2.addSchemaOptionsToCommand(localYargs, options).strict(),\n          handler: options => _this2.handler({ ...options,\n            schematic: `${collectionName}:${schematicName}`\n          })\n        });\n      }\n\n      return localYargs.demandCommand(1, command_1.demandCommandFailureMessage);\n    })();\n  }\n\n  run(options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        dryRun,\n        schematic,\n        defaults,\n        force,\n        interactive,\n        ...schematicOptions\n      } = options;\n\n      const [collectionName, schematicName] = _this3.parseSchematicInfo(schematic);\n\n      if (!collectionName || !schematicName) {\n        throw new command_module_1.CommandModuleError('A collection and schematic is required during execution.');\n      }\n\n      return _this3.runSchematic({\n        collectionName,\n        schematicName,\n        schematicOptions,\n        executionOptions: {\n          dryRun,\n          defaults,\n          force,\n          interactive\n        }\n      });\n    })();\n  }\n\n  getCollectionNames() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const [collectionName] = _this4.parseSchematicInfo( // positional = [generate, component] or [generate]\n      _this4.context.args.positional[1]);\n\n      return collectionName ? [collectionName] : [...(yield _this4.getSchematicCollections())];\n    })();\n  }\n  /**\n   * Generate a command string to be passed to the command builder.\n   *\n   * @example `component [name]` or `@schematics/angular:component [name]`.\n   */\n\n\n  generateCommandString(collectionName, schematicName, options) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const [collectionNameFromArgs] = _this5.parseSchematicInfo( // positional = [generate, component] or [generate]\n      _this5.context.args.positional[1]);\n\n      const dasherizedSchematicName = core_1.strings.dasherize(schematicName);\n      const schematicCollectionsFromConfig = yield _this5.getSchematicCollections();\n      const collectionNames = yield _this5.getCollectionNames(); // Only add the collection name as part of the command when it's not a known\n      // schematics collection or when it has been provided via the CLI.\n      // Ex:`ng generate @schematics/angular:component`\n\n      const commandName = !!collectionNameFromArgs || !collectionNames.some(c => schematicCollectionsFromConfig.has(c)) ? collectionName + ':' + dasherizedSchematicName : dasherizedSchematicName;\n      const positionalArgs = options.filter(o => o.positional !== undefined).map(o => {\n        const label = `${core_1.strings.dasherize(o.name)}${o.type === 'array' ? ' ..' : ''}`;\n        return o.required ? `<${label}>` : `[${label}]`;\n      }).join(' ');\n      return `${commandName}${positionalArgs ? ' ' + positionalArgs : ''}`;\n    })();\n  }\n  /**\n   * Get schematics that can to be registered as subcommands.\n   */\n\n\n  getSchematics() {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      const seenNames = new Set();\n\n      for (const collectionName of yield _awaitAsyncGenerator(_this.getCollectionNames())) {\n        const workflow = _this.getOrCreateWorkflowForBuilder(collectionName);\n\n        const collection = workflow.engine.createCollection(collectionName);\n\n        for (const schematicName of collection.listSchematicNames(true\n        /** includeHidden */\n        )) {\n          // If a schematic with this same name is already registered skip.\n          if (!seenNames.has(schematicName)) {\n            seenNames.add(schematicName);\n            yield {\n              schematicName,\n              collectionName\n            };\n          }\n        }\n      }\n    })();\n  }\n  /**\n   * Get schematics that should to be registered as subcommands.\n   *\n   * @returns a sorted list of schematic that needs to be registered as subcommands.\n   */\n\n\n  getSchematicsToRegister() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const schematicsToRegister = [];\n\n      const [, schematicNameFromArgs] = _this6.parseSchematicInfo( // positional = [generate, component] or [generate]\n      _this6.context.args.positional[1]);\n\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(_this6.getSchematics()), _step; _iteratorAbruptCompletion = !(_step = yield _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const {\n            schematicName,\n            collectionName\n          } = _step.value;\n\n          if (schematicName === schematicNameFromArgs) {\n            return [[schematicName, collectionName]];\n          }\n\n          schematicsToRegister.push([schematicName, collectionName]);\n        } // Didn't find the schematic or no schematic name was provided Ex: `ng generate --help`.\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return schematicsToRegister.sort(([nameA], [nameB]) => nameA.localeCompare(nameB, undefined, {\n        sensitivity: 'accent'\n      }));\n    })();\n  }\n\n}\n\nexports.GenerateCommandModule = GenerateCommandModule;","map":{"version":3,"names":["Object","defineProperty","exports","value","GenerateCommandModule","core_1","require","command_module_1","schematics_command_module_1","command_1","SchematicsCommandModule","constructor","arguments","command","aliases","describe","builder","argv","localYargs","positional","type","demandOption","strict","handler","options","schematicName","collectionName","getSchematicsToRegister","workflow","getOrCreateWorkflowForBuilder","collection","engine","createCollection","description","schemaJson","schematicAliases","hidden","schematicHidden","schematicDescription","createSchematic","xDeprecated","getSchematicOptions","generateCommandString","deprecated","Array","isArray","undefined","addSchemaOptionsToCommand","schematic","demandCommand","demandCommandFailureMessage","run","dryRun","defaults","force","interactive","schematicOptions","parseSchematicInfo","CommandModuleError","runSchematic","executionOptions","getCollectionNames","context","args","getSchematicCollections","collectionNameFromArgs","dasherizedSchematicName","strings","dasherize","schematicCollectionsFromConfig","collectionNames","commandName","some","c","has","positionalArgs","filter","o","map","label","name","required","join","getSchematics","seenNames","Set","listSchematicNames","add","schematicsToRegister","schematicNameFromArgs","push","sort","nameA","nameB","localeCompare","sensitivity"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/commands/generate/cli.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GenerateCommandModule = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst command_module_1 = require(\"../../command-builder/command-module\");\nconst schematics_command_module_1 = require(\"../../command-builder/schematics-command-module\");\nconst command_1 = require(\"../../command-builder/utilities/command\");\nclass GenerateCommandModule extends schematics_command_module_1.SchematicsCommandModule {\n    constructor() {\n        super(...arguments);\n        this.command = 'generate';\n        this.aliases = 'g';\n        this.describe = 'Generates and/or modifies files based on a schematic.';\n    }\n    async builder(argv) {\n        let localYargs = (await super.builder(argv)).command({\n            command: '$0 <schematic>',\n            describe: 'Run the provided schematic.',\n            builder: (localYargs) => localYargs\n                .positional('schematic', {\n                describe: 'The [collection:schematic] to run.',\n                type: 'string',\n                demandOption: true,\n            })\n                .strict(),\n            handler: (options) => this.handler(options),\n        });\n        for (const [schematicName, collectionName] of await this.getSchematicsToRegister()) {\n            const workflow = this.getOrCreateWorkflowForBuilder(collectionName);\n            const collection = workflow.engine.createCollection(collectionName);\n            const { description: { schemaJson, aliases: schematicAliases, hidden: schematicHidden, description: schematicDescription, }, } = collection.createSchematic(schematicName, true);\n            if (!schemaJson) {\n                continue;\n            }\n            const { 'x-deprecated': xDeprecated, description = schematicDescription, aliases = schematicAliases, hidden = schematicHidden, } = schemaJson;\n            const options = await this.getSchematicOptions(collection, schematicName, workflow);\n            localYargs = localYargs.command({\n                command: await this.generateCommandString(collectionName, schematicName, options),\n                // When 'describe' is set to false, it results in a hidden command.\n                describe: hidden === true ? false : typeof description === 'string' ? description : '',\n                deprecated: xDeprecated === true || typeof xDeprecated === 'string' ? xDeprecated : false,\n                aliases: Array.isArray(aliases) ? aliases : undefined,\n                builder: (localYargs) => this.addSchemaOptionsToCommand(localYargs, options).strict(),\n                handler: (options) => this.handler({ ...options, schematic: `${collectionName}:${schematicName}` }),\n            });\n        }\n        return localYargs.demandCommand(1, command_1.demandCommandFailureMessage);\n    }\n    async run(options) {\n        const { dryRun, schematic, defaults, force, interactive, ...schematicOptions } = options;\n        const [collectionName, schematicName] = this.parseSchematicInfo(schematic);\n        if (!collectionName || !schematicName) {\n            throw new command_module_1.CommandModuleError('A collection and schematic is required during execution.');\n        }\n        return this.runSchematic({\n            collectionName,\n            schematicName,\n            schematicOptions,\n            executionOptions: {\n                dryRun,\n                defaults,\n                force,\n                interactive,\n            },\n        });\n    }\n    async getCollectionNames() {\n        const [collectionName] = this.parseSchematicInfo(\n        // positional = [generate, component] or [generate]\n        this.context.args.positional[1]);\n        return collectionName ? [collectionName] : [...(await this.getSchematicCollections())];\n    }\n    /**\n     * Generate a command string to be passed to the command builder.\n     *\n     * @example `component [name]` or `@schematics/angular:component [name]`.\n     */\n    async generateCommandString(collectionName, schematicName, options) {\n        const [collectionNameFromArgs] = this.parseSchematicInfo(\n        // positional = [generate, component] or [generate]\n        this.context.args.positional[1]);\n        const dasherizedSchematicName = core_1.strings.dasherize(schematicName);\n        const schematicCollectionsFromConfig = await this.getSchematicCollections();\n        const collectionNames = await this.getCollectionNames();\n        // Only add the collection name as part of the command when it's not a known\n        // schematics collection or when it has been provided via the CLI.\n        // Ex:`ng generate @schematics/angular:component`\n        const commandName = !!collectionNameFromArgs ||\n            !collectionNames.some((c) => schematicCollectionsFromConfig.has(c))\n            ? collectionName + ':' + dasherizedSchematicName\n            : dasherizedSchematicName;\n        const positionalArgs = options\n            .filter((o) => o.positional !== undefined)\n            .map((o) => {\n            const label = `${core_1.strings.dasherize(o.name)}${o.type === 'array' ? ' ..' : ''}`;\n            return o.required ? `<${label}>` : `[${label}]`;\n        })\n            .join(' ');\n        return `${commandName}${positionalArgs ? ' ' + positionalArgs : ''}`;\n    }\n    /**\n     * Get schematics that can to be registered as subcommands.\n     */\n    async *getSchematics() {\n        const seenNames = new Set();\n        for (const collectionName of await this.getCollectionNames()) {\n            const workflow = this.getOrCreateWorkflowForBuilder(collectionName);\n            const collection = workflow.engine.createCollection(collectionName);\n            for (const schematicName of collection.listSchematicNames(true /** includeHidden */)) {\n                // If a schematic with this same name is already registered skip.\n                if (!seenNames.has(schematicName)) {\n                    seenNames.add(schematicName);\n                    yield { schematicName, collectionName };\n                }\n            }\n        }\n    }\n    /**\n     * Get schematics that should to be registered as subcommands.\n     *\n     * @returns a sorted list of schematic that needs to be registered as subcommands.\n     */\n    async getSchematicsToRegister() {\n        const schematicsToRegister = [];\n        const [, schematicNameFromArgs] = this.parseSchematicInfo(\n        // positional = [generate, component] or [generate]\n        this.context.args.positional[1]);\n        for await (const { schematicName, collectionName } of this.getSchematics()) {\n            if (schematicName === schematicNameFromArgs) {\n                return [[schematicName, collectionName]];\n            }\n            schematicsToRegister.push([schematicName, collectionName]);\n        }\n        // Didn't find the schematic or no schematic name was provided Ex: `ng generate --help`.\n        return schematicsToRegister.sort(([nameA], [nameB]) => nameA.localeCompare(nameB, undefined, { sensitivity: 'accent' }));\n    }\n}\nexports.GenerateCommandModule = GenerateCommandModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}