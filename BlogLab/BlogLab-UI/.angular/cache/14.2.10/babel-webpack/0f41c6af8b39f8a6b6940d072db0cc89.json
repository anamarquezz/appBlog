{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.partition = exports.merge = exports.branch = exports.empty = void 0;\n\nconst exception_1 = require(\"../exception/exception\");\n\nconst host_tree_1 = require(\"./host-tree\");\n\nconst interface_1 = require(\"./interface\");\n\nfunction empty() {\n  return new host_tree_1.HostTree();\n}\n\nexports.empty = empty;\n\nfunction branch(tree) {\n  return tree.branch();\n}\n\nexports.branch = branch;\n\nfunction merge(tree, other, strategy = interface_1.MergeStrategy.Default) {\n  tree.merge(other, strategy);\n  return tree;\n}\n\nexports.merge = merge;\n\nfunction partition(tree, predicate) {\n  if (tree instanceof host_tree_1.HostTree) {\n    return [new host_tree_1.FilterHostTree(tree, predicate), new host_tree_1.FilterHostTree(tree, (path, entry) => !predicate(path, entry))];\n  } else {\n    throw new exception_1.SchematicsException('Tree type is not supported.');\n  }\n}\n\nexports.partition = partition;","map":{"version":3,"names":["Object","defineProperty","exports","value","partition","merge","branch","empty","exception_1","require","host_tree_1","interface_1","HostTree","tree","other","strategy","MergeStrategy","Default","predicate","FilterHostTree","path","entry","SchematicsException"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/schematics/src/tree/static.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.partition = exports.merge = exports.branch = exports.empty = void 0;\nconst exception_1 = require(\"../exception/exception\");\nconst host_tree_1 = require(\"./host-tree\");\nconst interface_1 = require(\"./interface\");\nfunction empty() {\n    return new host_tree_1.HostTree();\n}\nexports.empty = empty;\nfunction branch(tree) {\n    return tree.branch();\n}\nexports.branch = branch;\nfunction merge(tree, other, strategy = interface_1.MergeStrategy.Default) {\n    tree.merge(other, strategy);\n    return tree;\n}\nexports.merge = merge;\nfunction partition(tree, predicate) {\n    if (tree instanceof host_tree_1.HostTree) {\n        return [\n            new host_tree_1.FilterHostTree(tree, predicate),\n            new host_tree_1.FilterHostTree(tree, (path, entry) => !predicate(path, entry)),\n        ];\n    }\n    else {\n        throw new exception_1.SchematicsException('Tree type is not supported.');\n    }\n}\nexports.partition = partition;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACG,KAAR,GAAgBH,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACK,KAAR,GAAgB,KAAK,CAA1E;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,aAAD,CAA3B;;AACA,SAASF,KAAT,GAAiB;EACb,OAAO,IAAIG,WAAW,CAACE,QAAhB,EAAP;AACH;;AACDV,OAAO,CAACK,KAAR,GAAgBA,KAAhB;;AACA,SAASD,MAAT,CAAgBO,IAAhB,EAAsB;EAClB,OAAOA,IAAI,CAACP,MAAL,EAAP;AACH;;AACDJ,OAAO,CAACI,MAAR,GAAiBA,MAAjB;;AACA,SAASD,KAAT,CAAeQ,IAAf,EAAqBC,KAArB,EAA4BC,QAAQ,GAAGJ,WAAW,CAACK,aAAZ,CAA0BC,OAAjE,EAA0E;EACtEJ,IAAI,CAACR,KAAL,CAAWS,KAAX,EAAkBC,QAAlB;EACA,OAAOF,IAAP;AACH;;AACDX,OAAO,CAACG,KAAR,GAAgBA,KAAhB;;AACA,SAASD,SAAT,CAAmBS,IAAnB,EAAyBK,SAAzB,EAAoC;EAChC,IAAIL,IAAI,YAAYH,WAAW,CAACE,QAAhC,EAA0C;IACtC,OAAO,CACH,IAAIF,WAAW,CAACS,cAAhB,CAA+BN,IAA/B,EAAqCK,SAArC,CADG,EAEH,IAAIR,WAAW,CAACS,cAAhB,CAA+BN,IAA/B,EAAqC,CAACO,IAAD,EAAOC,KAAP,KAAiB,CAACH,SAAS,CAACE,IAAD,EAAOC,KAAP,CAAhE,CAFG,CAAP;EAIH,CALD,MAMK;IACD,MAAM,IAAIb,WAAW,CAACc,mBAAhB,CAAoC,6BAApC,CAAN;EACH;AACJ;;AACDpB,OAAO,CAACE,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}