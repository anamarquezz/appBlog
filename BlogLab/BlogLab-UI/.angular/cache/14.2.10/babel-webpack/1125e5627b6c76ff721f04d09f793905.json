{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigCommandModule = void 0;\n\nconst path_1 = require(\"path\");\n\nconst uuid_1 = require(\"uuid\");\n\nconst command_module_1 = require(\"../../command-builder/command-module\");\n\nconst config_1 = require(\"../../utilities/config\");\n\nconst json_file_1 = require(\"../../utilities/json-file\");\n\nclass ConfigCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'config [json-path] [value]';\n    this.describe = 'Retrieves or sets Angular configuration values in the angular.json file for the workspace.';\n    this.longDescriptionPath = (0, path_1.join)(__dirname, 'long-description.md');\n  }\n\n  builder(localYargs) {\n    return localYargs.positional('json-path', {\n      description: `The configuration key to set or query, in JSON path format. ` + `For example: \"a[3].foo.bar[2]\". If no new value is provided, returns the current value of this key.`,\n      type: 'string'\n    }).positional('value', {\n      description: 'If provided, a new value for the given configuration key.',\n      type: 'string'\n    }).option('global', {\n      description: `Access the global configuration in the caller's home directory.`,\n      alias: ['g'],\n      type: 'boolean',\n      default: false\n    }).strict();\n  }\n\n  run(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const level = options.global ? 'global' : 'local';\n      const [config] = yield (0, config_1.getWorkspaceRaw)(level);\n\n      if (options.value == undefined) {\n        if (!config) {\n          _this.context.logger.error('No config found.');\n\n          return 1;\n        }\n\n        return _this.get(config, options);\n      } else {\n        return _this.set(options);\n      }\n    })();\n  }\n\n  get(jsonFile, options) {\n    const {\n      logger\n    } = this.context;\n    const value = options.jsonPath ? jsonFile.get(parseJsonPath(options.jsonPath)) : jsonFile.content;\n\n    if (value === undefined) {\n      logger.error('Value cannot be found.');\n      return 1;\n    } else if (typeof value === 'string') {\n      logger.info(value);\n    } else {\n      logger.info(JSON.stringify(value, null, 2));\n    }\n\n    return 0;\n  }\n\n  set(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      if (!((_a = options.jsonPath) === null || _a === void 0 ? void 0 : _a.trim())) {\n        throw new command_module_1.CommandModuleError('Invalid Path.');\n      }\n\n      const [config, configPath] = yield (0, config_1.getWorkspaceRaw)(options.global ? 'global' : 'local');\n      const {\n        logger\n      } = _this2.context;\n\n      if (!config || !configPath) {\n        throw new command_module_1.CommandModuleError('Confguration file cannot be found.');\n      }\n\n      const normalizeUUIDValue = v => v === '' ? (0, uuid_1.v4)() : `${v}`;\n\n      const value = options.jsonPath === 'cli.analyticsSharing.uuid' ? normalizeUUIDValue(options.value) : options.value;\n      const modified = config.modify(parseJsonPath(options.jsonPath), normalizeValue(value));\n\n      if (!modified) {\n        logger.error('Value cannot be found.');\n        return 1;\n      }\n\n      yield (0, config_1.validateWorkspace)((0, json_file_1.parseJson)(config.content), (_b = options.global) !== null && _b !== void 0 ? _b : false);\n      config.save();\n      return 0;\n    })();\n  }\n\n}\n\nexports.ConfigCommandModule = ConfigCommandModule;\n/**\n * Splits a JSON path string into fragments. Fragments can be used to get the value referenced\n * by the path. For example, a path of \"a[3].foo.bar[2]\" would give you a fragment array of\n * [\"a\", 3, \"foo\", \"bar\", 2].\n * @param path The JSON string to parse.\n * @returns {(string|number)[]} The fragments for the string.\n * @private\n */\n\nfunction parseJsonPath(path) {\n  const fragments = (path || '').split(/\\./g);\n  const result = [];\n\n  while (fragments.length > 0) {\n    const fragment = fragments.shift();\n\n    if (fragment == undefined) {\n      break;\n    }\n\n    const match = fragment.match(/([^[]+)((\\[.*\\])*)/);\n\n    if (!match) {\n      throw new command_module_1.CommandModuleError('Invalid JSON path.');\n    }\n\n    result.push(match[1]);\n\n    if (match[2]) {\n      const indices = match[2].slice(1, -1).split('][').map(x => /^\\d$/.test(x) ? +x : x.replace(/\"|'/g, ''));\n      result.push(...indices);\n    }\n  }\n\n  return result.filter(fragment => fragment != null);\n}\n\nfunction normalizeValue(value) {\n  const valueString = `${value}`.trim();\n\n  switch (valueString) {\n    case 'true':\n      return true;\n\n    case 'false':\n      return false;\n\n    case 'null':\n      return null;\n\n    case 'undefined':\n      return undefined;\n  }\n\n  if (isFinite(+valueString)) {\n    return +valueString;\n  }\n\n  try {\n    // We use `JSON.parse` instead of `parseJson` because the latter will parse UUIDs\n    // and convert them into a numberic entities.\n    // Example: 73b61974-182c-48e4-b4c6-30ddf08c5c98 -> 73.\n    // These values should never contain comments, therefore using `JSON.parse` is safe.\n    return JSON.parse(valueString);\n  } catch {\n    return value;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","ConfigCommandModule","path_1","require","uuid_1","command_module_1","config_1","json_file_1","CommandModule","constructor","arguments","command","describe","longDescriptionPath","join","__dirname","builder","localYargs","positional","description","type","option","alias","default","strict","run","options","level","global","config","getWorkspaceRaw","undefined","context","logger","error","get","set","jsonFile","jsonPath","parseJsonPath","content","info","JSON","stringify","_a","_b","trim","CommandModuleError","configPath","normalizeUUIDValue","v","v4","modified","modify","normalizeValue","validateWorkspace","parseJson","save","path","fragments","split","result","length","fragment","shift","match","push","indices","slice","map","x","test","replace","filter","valueString","isFinite","parse"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/commands/config/cli.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigCommandModule = void 0;\nconst path_1 = require(\"path\");\nconst uuid_1 = require(\"uuid\");\nconst command_module_1 = require(\"../../command-builder/command-module\");\nconst config_1 = require(\"../../utilities/config\");\nconst json_file_1 = require(\"../../utilities/json-file\");\nclass ConfigCommandModule extends command_module_1.CommandModule {\n    constructor() {\n        super(...arguments);\n        this.command = 'config [json-path] [value]';\n        this.describe = 'Retrieves or sets Angular configuration values in the angular.json file for the workspace.';\n        this.longDescriptionPath = (0, path_1.join)(__dirname, 'long-description.md');\n    }\n    builder(localYargs) {\n        return localYargs\n            .positional('json-path', {\n            description: `The configuration key to set or query, in JSON path format. ` +\n                `For example: \"a[3].foo.bar[2]\". If no new value is provided, returns the current value of this key.`,\n            type: 'string',\n        })\n            .positional('value', {\n            description: 'If provided, a new value for the given configuration key.',\n            type: 'string',\n        })\n            .option('global', {\n            description: `Access the global configuration in the caller's home directory.`,\n            alias: ['g'],\n            type: 'boolean',\n            default: false,\n        })\n            .strict();\n    }\n    async run(options) {\n        const level = options.global ? 'global' : 'local';\n        const [config] = await (0, config_1.getWorkspaceRaw)(level);\n        if (options.value == undefined) {\n            if (!config) {\n                this.context.logger.error('No config found.');\n                return 1;\n            }\n            return this.get(config, options);\n        }\n        else {\n            return this.set(options);\n        }\n    }\n    get(jsonFile, options) {\n        const { logger } = this.context;\n        const value = options.jsonPath\n            ? jsonFile.get(parseJsonPath(options.jsonPath))\n            : jsonFile.content;\n        if (value === undefined) {\n            logger.error('Value cannot be found.');\n            return 1;\n        }\n        else if (typeof value === 'string') {\n            logger.info(value);\n        }\n        else {\n            logger.info(JSON.stringify(value, null, 2));\n        }\n        return 0;\n    }\n    async set(options) {\n        var _a, _b;\n        if (!((_a = options.jsonPath) === null || _a === void 0 ? void 0 : _a.trim())) {\n            throw new command_module_1.CommandModuleError('Invalid Path.');\n        }\n        const [config, configPath] = await (0, config_1.getWorkspaceRaw)(options.global ? 'global' : 'local');\n        const { logger } = this.context;\n        if (!config || !configPath) {\n            throw new command_module_1.CommandModuleError('Confguration file cannot be found.');\n        }\n        const normalizeUUIDValue = (v) => (v === '' ? (0, uuid_1.v4)() : `${v}`);\n        const value = options.jsonPath === 'cli.analyticsSharing.uuid'\n            ? normalizeUUIDValue(options.value)\n            : options.value;\n        const modified = config.modify(parseJsonPath(options.jsonPath), normalizeValue(value));\n        if (!modified) {\n            logger.error('Value cannot be found.');\n            return 1;\n        }\n        await (0, config_1.validateWorkspace)((0, json_file_1.parseJson)(config.content), (_b = options.global) !== null && _b !== void 0 ? _b : false);\n        config.save();\n        return 0;\n    }\n}\nexports.ConfigCommandModule = ConfigCommandModule;\n/**\n * Splits a JSON path string into fragments. Fragments can be used to get the value referenced\n * by the path. For example, a path of \"a[3].foo.bar[2]\" would give you a fragment array of\n * [\"a\", 3, \"foo\", \"bar\", 2].\n * @param path The JSON string to parse.\n * @returns {(string|number)[]} The fragments for the string.\n * @private\n */\nfunction parseJsonPath(path) {\n    const fragments = (path || '').split(/\\./g);\n    const result = [];\n    while (fragments.length > 0) {\n        const fragment = fragments.shift();\n        if (fragment == undefined) {\n            break;\n        }\n        const match = fragment.match(/([^[]+)((\\[.*\\])*)/);\n        if (!match) {\n            throw new command_module_1.CommandModuleError('Invalid JSON path.');\n        }\n        result.push(match[1]);\n        if (match[2]) {\n            const indices = match[2]\n                .slice(1, -1)\n                .split('][')\n                .map((x) => (/^\\d$/.test(x) ? +x : x.replace(/\"|'/g, '')));\n            result.push(...indices);\n        }\n    }\n    return result.filter((fragment) => fragment != null);\n}\nfunction normalizeValue(value) {\n    const valueString = `${value}`.trim();\n    switch (valueString) {\n        case 'true':\n            return true;\n        case 'false':\n            return false;\n        case 'null':\n            return null;\n        case 'undefined':\n            return undefined;\n    }\n    if (isFinite(+valueString)) {\n        return +valueString;\n    }\n    try {\n        // We use `JSON.parse` instead of `parseJson` because the latter will parse UUIDs\n        // and convert them into a numberic entities.\n        // Example: 73b61974-182c-48e4-b4c6-30ddf08c5c98 -> 73.\n        // These values should never contain comments, therefore using `JSON.parse` is safe.\n        return JSON.parse(valueString);\n    }\n    catch {\n        return value;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}