{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nfunction camelCase(str) {\n  const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n\n  if (!isCamelCase) {\n    str = str.toLowerCase();\n  }\n\n  if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n    return str;\n  } else {\n    let camelcase = '';\n    let nextChrUpper = false;\n    const leadingHyphens = str.match(/^-+/);\n\n    for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n      let chr = str.charAt(i);\n\n      if (nextChrUpper) {\n        nextChrUpper = false;\n        chr = chr.toUpperCase();\n      }\n\n      if (i !== 0 && (chr === '-' || chr === '_')) {\n        nextChrUpper = true;\n      } else if (chr !== '-' && chr !== '_') {\n        camelcase += chr;\n      }\n    }\n\n    return camelcase;\n  }\n}\n\nfunction decamelize(str, joinString) {\n  const lowercase = str.toLowerCase();\n  joinString = joinString || '-';\n  let notCamelcase = '';\n\n  for (let i = 0; i < str.length; i++) {\n    const chrLower = lowercase.charAt(i);\n    const chrString = str.charAt(i);\n\n    if (chrLower !== chrString && i > 0) {\n      notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n    } else {\n      notCamelcase += chrString;\n    }\n  }\n\n  return notCamelcase;\n}\n\nfunction looksLikeNumber(x) {\n  if (x === null || x === undefined) return false;\n  if (typeof x === 'number') return true;\n  if (/^0x[0-9a-f]+$/i.test(x)) return true;\n  if (/^0[^.]/.test(x)) return false;\n  return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n\nfunction tokenizeArgString(argString) {\n  if (Array.isArray(argString)) {\n    return argString.map(e => typeof e !== 'string' ? e + '' : e);\n  }\n\n  argString = argString.trim();\n  let i = 0;\n  let prevC = null;\n  let c = null;\n  let opening = null;\n  const args = [];\n\n  for (let ii = 0; ii < argString.length; ii++) {\n    prevC = c;\n    c = argString.charAt(ii);\n\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++;\n      }\n\n      continue;\n    }\n\n    if (c === opening) {\n      opening = null;\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c;\n    }\n\n    if (!args[i]) args[i] = '';\n    args[i] += c;\n  }\n\n  return args;\n}\n\nvar DefaultValuesForTypeKey;\n\n(function (DefaultValuesForTypeKey) {\n  DefaultValuesForTypeKey[\"BOOLEAN\"] = \"boolean\";\n  DefaultValuesForTypeKey[\"STRING\"] = \"string\";\n  DefaultValuesForTypeKey[\"NUMBER\"] = \"number\";\n  DefaultValuesForTypeKey[\"ARRAY\"] = \"array\";\n})(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));\n\nlet mixin;\n\nclass YargsParser {\n  constructor(_mixin) {\n    mixin = _mixin;\n  }\n\n  parse(argsInput, options) {\n    const opts = Object.assign({\n      alias: undefined,\n      array: undefined,\n      boolean: undefined,\n      config: undefined,\n      configObjects: undefined,\n      configuration: undefined,\n      coerce: undefined,\n      count: undefined,\n      default: undefined,\n      envPrefix: undefined,\n      narg: undefined,\n      normalize: undefined,\n      string: undefined,\n      number: undefined,\n      __: undefined,\n      key: undefined\n    }, options);\n    const args = tokenizeArgString(argsInput);\n    const inputIsString = typeof argsInput === 'string';\n    const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\n    const configuration = Object.assign({\n      'boolean-negation': true,\n      'camel-case-expansion': true,\n      'combine-arrays': false,\n      'dot-notation': true,\n      'duplicate-arguments-array': true,\n      'flatten-duplicate-arrays': true,\n      'greedy-arrays': true,\n      'halt-at-non-option': false,\n      'nargs-eats-options': false,\n      'negation-prefix': 'no-',\n      'parse-numbers': true,\n      'parse-positional-numbers': true,\n      'populate--': false,\n      'set-placeholder-key': false,\n      'short-option-groups': true,\n      'strip-aliased': false,\n      'strip-dashed': false,\n      'unknown-options-as-args': false\n    }, opts.configuration);\n    const defaults = Object.assign(Object.create(null), opts.default);\n    const configObjects = opts.configObjects || [];\n    const envPrefix = opts.envPrefix;\n    const notFlagsOption = configuration['populate--'];\n    const notFlagsArgv = notFlagsOption ? '--' : '_';\n    const newAliases = Object.create(null);\n    const defaulted = Object.create(null);\n\n    const __ = opts.__ || mixin.format;\n\n    const flags = {\n      aliases: Object.create(null),\n      arrays: Object.create(null),\n      bools: Object.create(null),\n      strings: Object.create(null),\n      numbers: Object.create(null),\n      counts: Object.create(null),\n      normalize: Object.create(null),\n      configs: Object.create(null),\n      nargs: Object.create(null),\n      coercions: Object.create(null),\n      keys: []\n    };\n    const negative = /^-([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$/;\n    const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');\n    [].concat(opts.array || []).filter(Boolean).forEach(function (opt) {\n      const key = typeof opt === 'object' ? opt.key : opt;\n      const assignment = Object.keys(opt).map(function (key) {\n        const arrayFlagKeys = {\n          boolean: 'bools',\n          string: 'strings',\n          number: 'numbers'\n        };\n        return arrayFlagKeys[key];\n      }).filter(Boolean).pop();\n\n      if (assignment) {\n        flags[assignment][key] = true;\n      }\n\n      flags.arrays[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.boolean || []).filter(Boolean).forEach(function (key) {\n      flags.bools[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.string || []).filter(Boolean).forEach(function (key) {\n      flags.strings[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.number || []).filter(Boolean).forEach(function (key) {\n      flags.numbers[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.count || []).filter(Boolean).forEach(function (key) {\n      flags.counts[key] = true;\n      flags.keys.push(key);\n    });\n    [].concat(opts.normalize || []).filter(Boolean).forEach(function (key) {\n      flags.normalize[key] = true;\n      flags.keys.push(key);\n    });\n\n    if (typeof opts.narg === 'object') {\n      Object.entries(opts.narg).forEach(([key, value]) => {\n        if (typeof value === 'number') {\n          flags.nargs[key] = value;\n          flags.keys.push(key);\n        }\n      });\n    }\n\n    if (typeof opts.coerce === 'object') {\n      Object.entries(opts.coerce).forEach(([key, value]) => {\n        if (typeof value === 'function') {\n          flags.coercions[key] = value;\n          flags.keys.push(key);\n        }\n      });\n    }\n\n    if (typeof opts.config !== 'undefined') {\n      if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n        [].concat(opts.config).filter(Boolean).forEach(function (key) {\n          flags.configs[key] = true;\n        });\n      } else if (typeof opts.config === 'object') {\n        Object.entries(opts.config).forEach(([key, value]) => {\n          if (typeof value === 'boolean' || typeof value === 'function') {\n            flags.configs[key] = value;\n          }\n        });\n      }\n    }\n\n    extendAliases(opts.key, aliases, opts.default, flags.arrays);\n    Object.keys(defaults).forEach(function (key) {\n      (flags.aliases[key] || []).forEach(function (alias) {\n        defaults[alias] = defaults[key];\n      });\n    });\n    let error = null;\n    checkConfiguration();\n    let notFlags = [];\n    const argv = Object.assign(Object.create(null), {\n      _: []\n    });\n    const argvReturn = {};\n\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      const truncatedArg = arg.replace(/^-{3,}/, '---');\n      let broken;\n      let key;\n      let letters;\n      let m;\n      let next;\n      let value;\n\n      if (arg !== '--' && /^-/.test(arg) && isUnknownOptionAsArg(arg)) {\n        pushPositional(arg);\n      } else if (truncatedArg.match(/^---+(=|$)/)) {\n        pushPositional(arg);\n        continue;\n      } else if (arg.match(/^--.+=/) || !configuration['short-option-groups'] && arg.match(/^-.+=/)) {\n        m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/);\n\n        if (m !== null && Array.isArray(m) && m.length >= 3) {\n          if (checkAllAliases(m[1], flags.arrays)) {\n            i = eatArray(i, m[1], args, m[2]);\n          } else if (checkAllAliases(m[1], flags.nargs) !== false) {\n            i = eatNargs(i, m[1], args, m[2]);\n          } else {\n            setArg(m[1], m[2], true);\n          }\n        }\n      } else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\n        m = arg.match(negatedBoolean);\n\n        if (m !== null && Array.isArray(m) && m.length >= 2) {\n          key = m[1];\n          setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);\n        }\n      } else if (arg.match(/^--.+/) || !configuration['short-option-groups'] && arg.match(/^-[^-]+/)) {\n        m = arg.match(/^--?(.+)/);\n\n        if (m !== null && Array.isArray(m) && m.length >= 2) {\n          key = m[1];\n\n          if (checkAllAliases(key, flags.arrays)) {\n            i = eatArray(i, key, args);\n          } else if (checkAllAliases(key, flags.nargs) !== false) {\n            i = eatNargs(i, key, args);\n          } else {\n            next = args[i + 1];\n\n            if (next !== undefined && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n              setArg(key, next);\n              i++;\n            } else if (/^(true|false)$/.test(next)) {\n              setArg(key, next);\n              i++;\n            } else {\n              setArg(key, defaultValue(key));\n            }\n          }\n        }\n      } else if (arg.match(/^-.\\..+=/)) {\n        m = arg.match(/^-([^=]+)=([\\s\\S]*)$/);\n\n        if (m !== null && Array.isArray(m) && m.length >= 3) {\n          setArg(m[1], m[2]);\n        }\n      } else if (arg.match(/^-.\\..+/) && !arg.match(negative)) {\n        next = args[i + 1];\n        m = arg.match(/^-(.\\..+)/);\n\n        if (m !== null && Array.isArray(m) && m.length >= 2) {\n          key = m[1];\n\n          if (next !== undefined && !next.match(/^-/) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n            setArg(key, next);\n            i++;\n          } else {\n            setArg(key, defaultValue(key));\n          }\n        }\n      } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n        letters = arg.slice(1, -1).split('');\n        broken = false;\n\n        for (let j = 0; j < letters.length; j++) {\n          next = arg.slice(j + 2);\n\n          if (letters[j + 1] && letters[j + 1] === '=') {\n            value = arg.slice(j + 3);\n            key = letters[j];\n\n            if (checkAllAliases(key, flags.arrays)) {\n              i = eatArray(i, key, args, value);\n            } else if (checkAllAliases(key, flags.nargs) !== false) {\n              i = eatNargs(i, key, args, value);\n            } else {\n              setArg(key, value);\n            }\n\n            broken = true;\n            break;\n          }\n\n          if (next === '-') {\n            setArg(letters[j], next);\n            continue;\n          }\n\n          if (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) && checkAllAliases(next, flags.bools) === false) {\n            setArg(letters[j], next);\n            broken = true;\n            break;\n          }\n\n          if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n            setArg(letters[j], next);\n            broken = true;\n            break;\n          } else {\n            setArg(letters[j], defaultValue(letters[j]));\n          }\n        }\n\n        key = arg.slice(-1)[0];\n\n        if (!broken && key !== '-') {\n          if (checkAllAliases(key, flags.arrays)) {\n            i = eatArray(i, key, args);\n          } else if (checkAllAliases(key, flags.nargs) !== false) {\n            i = eatNargs(i, key, args);\n          } else {\n            next = args[i + 1];\n\n            if (next !== undefined && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {\n              setArg(key, next);\n              i++;\n            } else if (/^(true|false)$/.test(next)) {\n              setArg(key, next);\n              i++;\n            } else {\n              setArg(key, defaultValue(key));\n            }\n          }\n        }\n      } else if (arg.match(/^-[0-9]$/) && arg.match(negative) && checkAllAliases(arg.slice(1), flags.bools)) {\n        key = arg.slice(1);\n        setArg(key, defaultValue(key));\n      } else if (arg === '--') {\n        notFlags = args.slice(i + 1);\n        break;\n      } else if (configuration['halt-at-non-option']) {\n        notFlags = args.slice(i);\n        break;\n      } else {\n        pushPositional(arg);\n      }\n    }\n\n    applyEnvVars(argv, true);\n    applyEnvVars(argv, false);\n    setConfig(argv);\n    setConfigObjects();\n    applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\n    applyCoercions(argv);\n    if (configuration['set-placeholder-key']) setPlaceholderKeys(argv);\n    Object.keys(flags.counts).forEach(function (key) {\n      if (!hasKey(argv, key.split('.'))) setArg(key, 0);\n    });\n    if (notFlagsOption && notFlags.length) argv[notFlagsArgv] = [];\n    notFlags.forEach(function (key) {\n      argv[notFlagsArgv].push(key);\n    });\n\n    if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\n      Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\n        delete argv[key];\n      });\n    }\n\n    if (configuration['strip-aliased']) {\n      [].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\n        if (configuration['camel-case-expansion'] && alias.includes('-')) {\n          delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')];\n        }\n\n        delete argv[alias];\n      });\n    }\n\n    function pushPositional(arg) {\n      const maybeCoercedNumber = maybeCoerceNumber('_', arg);\n\n      if (typeof maybeCoercedNumber === 'string' || typeof maybeCoercedNumber === 'number') {\n        argv._.push(maybeCoercedNumber);\n      }\n    }\n\n    function eatNargs(i, key, args, argAfterEqualSign) {\n      let ii;\n      let toEat = checkAllAliases(key, flags.nargs);\n      toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat;\n\n      if (toEat === 0) {\n        if (!isUndefined(argAfterEqualSign)) {\n          error = Error(__('Argument unexpected for: %s', key));\n        }\n\n        setArg(key, defaultValue(key));\n        return i;\n      }\n\n      let available = isUndefined(argAfterEqualSign) ? 0 : 1;\n\n      if (configuration['nargs-eats-options']) {\n        if (args.length - (i + 1) + available < toEat) {\n          error = Error(__('Not enough arguments following: %s', key));\n        }\n\n        available = toEat;\n      } else {\n        for (ii = i + 1; ii < args.length; ii++) {\n          if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii])) available++;else break;\n        }\n\n        if (available < toEat) error = Error(__('Not enough arguments following: %s', key));\n      }\n\n      let consumed = Math.min(available, toEat);\n\n      if (!isUndefined(argAfterEqualSign) && consumed > 0) {\n        setArg(key, argAfterEqualSign);\n        consumed--;\n      }\n\n      for (ii = i + 1; ii < consumed + i + 1; ii++) {\n        setArg(key, args[ii]);\n      }\n\n      return i + consumed;\n    }\n\n    function eatArray(i, key, args, argAfterEqualSign) {\n      let argsToSet = [];\n      let next = argAfterEqualSign || args[i + 1];\n      const nargsCount = checkAllAliases(key, flags.nargs);\n\n      if (checkAllAliases(key, flags.bools) && !/^(true|false)$/.test(next)) {\n        argsToSet.push(true);\n      } else if (isUndefined(next) || isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) {\n        if (defaults[key] !== undefined) {\n          const defVal = defaults[key];\n          argsToSet = Array.isArray(defVal) ? defVal : [defVal];\n        }\n      } else {\n        if (!isUndefined(argAfterEqualSign)) {\n          argsToSet.push(processValue(key, argAfterEqualSign, true));\n        }\n\n        for (let ii = i + 1; ii < args.length; ii++) {\n          if (!configuration['greedy-arrays'] && argsToSet.length > 0 || nargsCount && typeof nargsCount === 'number' && argsToSet.length >= nargsCount) break;\n          next = args[ii];\n          if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next)) break;\n          i = ii;\n          argsToSet.push(processValue(key, next, inputIsString));\n        }\n      }\n\n      if (typeof nargsCount === 'number' && (nargsCount && argsToSet.length < nargsCount || isNaN(nargsCount) && argsToSet.length === 0)) {\n        error = Error(__('Not enough arguments following: %s', key));\n      }\n\n      setArg(key, argsToSet);\n      return i;\n    }\n\n    function setArg(key, val, shouldStripQuotes = inputIsString) {\n      if (/-/.test(key) && configuration['camel-case-expansion']) {\n        const alias = key.split('.').map(function (prop) {\n          return camelCase(prop);\n        }).join('.');\n        addNewAlias(key, alias);\n      }\n\n      const value = processValue(key, val, shouldStripQuotes);\n      const splitKey = key.split('.');\n      setKey(argv, splitKey, value);\n\n      if (flags.aliases[key]) {\n        flags.aliases[key].forEach(function (x) {\n          const keyProperties = x.split('.');\n          setKey(argv, keyProperties, value);\n        });\n      }\n\n      if (splitKey.length > 1 && configuration['dot-notation']) {\n        (flags.aliases[splitKey[0]] || []).forEach(function (x) {\n          let keyProperties = x.split('.');\n          const a = [].concat(splitKey);\n          a.shift();\n          keyProperties = keyProperties.concat(a);\n\n          if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {\n            setKey(argv, keyProperties, value);\n          }\n        });\n      }\n\n      if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n        const keys = [key].concat(flags.aliases[key] || []);\n        keys.forEach(function (key) {\n          Object.defineProperty(argvReturn, key, {\n            enumerable: true,\n\n            get() {\n              return val;\n            },\n\n            set(value) {\n              val = typeof value === 'string' ? mixin.normalize(value) : value;\n            }\n\n          });\n        });\n      }\n    }\n\n    function addNewAlias(key, alias) {\n      if (!(flags.aliases[key] && flags.aliases[key].length)) {\n        flags.aliases[key] = [alias];\n        newAliases[alias] = true;\n      }\n\n      if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n        addNewAlias(alias, key);\n      }\n    }\n\n    function processValue(key, val, shouldStripQuotes) {\n      if (shouldStripQuotes) {\n        val = stripQuotes(val);\n      }\n\n      if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n        if (typeof val === 'string') val = val === 'true';\n      }\n\n      let value = Array.isArray(val) ? val.map(function (v) {\n        return maybeCoerceNumber(key, v);\n      }) : maybeCoerceNumber(key, val);\n\n      if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n        value = increment();\n      }\n\n      if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n        if (Array.isArray(val)) value = val.map(val => {\n          return mixin.normalize(val);\n        });else value = mixin.normalize(val);\n      }\n\n      return value;\n    }\n\n    function maybeCoerceNumber(key, value) {\n      if (!configuration['parse-positional-numbers'] && key === '_') return value;\n\n      if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n        const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && Number.isSafeInteger(Math.floor(parseFloat(`${value}`)));\n\n        if (shouldCoerceNumber || !isUndefined(value) && checkAllAliases(key, flags.numbers)) {\n          value = Number(value);\n        }\n      }\n\n      return value;\n    }\n\n    function setConfig(argv) {\n      const configLookup = Object.create(null);\n      applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\n      Object.keys(flags.configs).forEach(function (configKey) {\n        const configPath = argv[configKey] || configLookup[configKey];\n\n        if (configPath) {\n          try {\n            let config = null;\n            const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\n            const resolveConfig = flags.configs[configKey];\n\n            if (typeof resolveConfig === 'function') {\n              try {\n                config = resolveConfig(resolvedConfigPath);\n              } catch (e) {\n                config = e;\n              }\n\n              if (config instanceof Error) {\n                error = config;\n                return;\n              }\n            } else {\n              config = mixin.require(resolvedConfigPath);\n            }\n\n            setConfigObject(config);\n          } catch (ex) {\n            if (ex.name === 'PermissionDenied') error = ex;else if (argv[configKey]) error = Error(__('Invalid JSON config file: %s', configPath));\n          }\n        }\n      });\n    }\n\n    function setConfigObject(config, prev) {\n      Object.keys(config).forEach(function (key) {\n        const value = config[key];\n        const fullKey = prev ? prev + '.' + key : key;\n\n        if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\n          setConfigObject(value, fullKey);\n        } else {\n          if (!hasKey(argv, fullKey.split('.')) || checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays']) {\n            setArg(fullKey, value);\n          }\n        }\n      });\n    }\n\n    function setConfigObjects() {\n      if (typeof configObjects !== 'undefined') {\n        configObjects.forEach(function (configObject) {\n          setConfigObject(configObject);\n        });\n      }\n    }\n\n    function applyEnvVars(argv, configOnly) {\n      if (typeof envPrefix === 'undefined') return;\n      const prefix = typeof envPrefix === 'string' ? envPrefix : '';\n      const env = mixin.env();\n      Object.keys(env).forEach(function (envVar) {\n        if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n          const keys = envVar.split('__').map(function (key, i) {\n            if (i === 0) {\n              key = key.substring(prefix.length);\n            }\n\n            return camelCase(key);\n          });\n\n          if ((configOnly && flags.configs[keys.join('.')] || !configOnly) && !hasKey(argv, keys)) {\n            setArg(keys.join('.'), env[envVar]);\n          }\n        }\n      });\n    }\n\n    function applyCoercions(argv) {\n      let coerce;\n      const applied = new Set();\n      Object.keys(argv).forEach(function (key) {\n        if (!applied.has(key)) {\n          coerce = checkAllAliases(key, flags.coercions);\n\n          if (typeof coerce === 'function') {\n            try {\n              const value = maybeCoerceNumber(key, coerce(argv[key]));\n              [].concat(flags.aliases[key] || [], key).forEach(ali => {\n                applied.add(ali);\n                argv[ali] = value;\n              });\n            } catch (err) {\n              error = err;\n            }\n          }\n        }\n      });\n    }\n\n    function setPlaceholderKeys(argv) {\n      flags.keys.forEach(key => {\n        if (~key.indexOf('.')) return;\n        if (typeof argv[key] === 'undefined') argv[key] = undefined;\n      });\n      return argv;\n    }\n\n    function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {\n      Object.keys(defaults).forEach(function (key) {\n        if (!hasKey(obj, key.split('.'))) {\n          setKey(obj, key.split('.'), defaults[key]);\n          if (canLog) defaulted[key] = true;\n          (aliases[key] || []).forEach(function (x) {\n            if (hasKey(obj, x.split('.'))) return;\n            setKey(obj, x.split('.'), defaults[key]);\n          });\n        }\n      });\n    }\n\n    function hasKey(obj, keys) {\n      let o = obj;\n      if (!configuration['dot-notation']) keys = [keys.join('.')];\n      keys.slice(0, -1).forEach(function (key) {\n        o = o[key] || {};\n      });\n      const key = keys[keys.length - 1];\n      if (typeof o !== 'object') return false;else return key in o;\n    }\n\n    function setKey(obj, keys, value) {\n      let o = obj;\n      if (!configuration['dot-notation']) keys = [keys.join('.')];\n      keys.slice(0, -1).forEach(function (key) {\n        key = sanitizeKey(key);\n\n        if (typeof o === 'object' && o[key] === undefined) {\n          o[key] = {};\n        }\n\n        if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\n          if (Array.isArray(o[key])) {\n            o[key].push({});\n          } else {\n            o[key] = [o[key], {}];\n          }\n\n          o = o[key][o[key].length - 1];\n        } else {\n          o = o[key];\n        }\n      });\n      const key = sanitizeKey(keys[keys.length - 1]);\n      const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);\n      const isValueArray = Array.isArray(value);\n      let duplicate = configuration['duplicate-arguments-array'];\n\n      if (!duplicate && checkAllAliases(key, flags.nargs)) {\n        duplicate = true;\n\n        if (!isUndefined(o[key]) && flags.nargs[key] === 1 || Array.isArray(o[key]) && o[key].length === flags.nargs[key]) {\n          o[key] = undefined;\n        }\n      }\n\n      if (value === increment()) {\n        o[key] = increment(o[key]);\n      } else if (Array.isArray(o[key])) {\n        if (duplicate && isTypeArray && isValueArray) {\n          o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);\n        } else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n          o[key] = value;\n        } else {\n          o[key] = o[key].concat([value]);\n        }\n      } else if (o[key] === undefined && isTypeArray) {\n        o[key] = isValueArray ? value : [value];\n      } else if (duplicate && !(o[key] === undefined || checkAllAliases(key, flags.counts) || checkAllAliases(key, flags.bools))) {\n        o[key] = [o[key], value];\n      } else {\n        o[key] = value;\n      }\n    }\n\n    function extendAliases(...args) {\n      args.forEach(function (obj) {\n        Object.keys(obj || {}).forEach(function (key) {\n          if (flags.aliases[key]) return;\n          flags.aliases[key] = [].concat(aliases[key] || []);\n          flags.aliases[key].concat(key).forEach(function (x) {\n            if (/-/.test(x) && configuration['camel-case-expansion']) {\n              const c = camelCase(x);\n\n              if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                flags.aliases[key].push(c);\n                newAliases[c] = true;\n              }\n            }\n          });\n          flags.aliases[key].concat(key).forEach(function (x) {\n            if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\n              const c = decamelize(x, '-');\n\n              if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                flags.aliases[key].push(c);\n                newAliases[c] = true;\n              }\n            }\n          });\n          flags.aliases[key].forEach(function (x) {\n            flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n              return x !== y;\n            }));\n          });\n        });\n      });\n    }\n\n    function checkAllAliases(key, flag) {\n      const toCheck = [].concat(flags.aliases[key] || [], key);\n      const keys = Object.keys(flag);\n      const setAlias = toCheck.find(key => keys.includes(key));\n      return setAlias ? flag[setAlias] : false;\n    }\n\n    function hasAnyFlag(key) {\n      const flagsKeys = Object.keys(flags);\n      const toCheck = [].concat(flagsKeys.map(k => flags[k]));\n      return toCheck.some(function (flag) {\n        return Array.isArray(flag) ? flag.includes(key) : flag[key];\n      });\n    }\n\n    function hasFlagsMatching(arg, ...patterns) {\n      const toCheck = [].concat(...patterns);\n      return toCheck.some(function (pattern) {\n        const match = arg.match(pattern);\n        return match && hasAnyFlag(match[1]);\n      });\n    }\n\n    function hasAllShortFlags(arg) {\n      if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\n        return false;\n      }\n\n      let hasAllFlags = true;\n      let next;\n      const letters = arg.slice(1).split('');\n\n      for (let j = 0; j < letters.length; j++) {\n        next = arg.slice(j + 2);\n\n        if (!hasAnyFlag(letters[j])) {\n          hasAllFlags = false;\n          break;\n        }\n\n        if (letters[j + 1] && letters[j + 1] === '=' || next === '-' || /[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) || letters[j + 1] && letters[j + 1].match(/\\W/)) {\n          break;\n        }\n      }\n\n      return hasAllFlags;\n    }\n\n    function isUnknownOptionAsArg(arg) {\n      return configuration['unknown-options-as-args'] && isUnknownOption(arg);\n    }\n\n    function isUnknownOption(arg) {\n      arg = arg.replace(/^-{3,}/, '--');\n\n      if (arg.match(negative)) {\n        return false;\n      }\n\n      if (hasAllShortFlags(arg)) {\n        return false;\n      }\n\n      const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/;\n      const normalFlag = /^-+([^=]+?)$/;\n      const flagEndingInHyphen = /^-+([^=]+?)-$/;\n      const flagEndingInDigits = /^-+([^=]+?\\d+)$/;\n      const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/;\n      return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\n    }\n\n    function defaultValue(key) {\n      if (!checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts) && `${key}` in defaults) {\n        return defaults[key];\n      } else {\n        return defaultForType(guessType(key));\n      }\n    }\n\n    function defaultForType(type) {\n      const def = {\n        [DefaultValuesForTypeKey.BOOLEAN]: true,\n        [DefaultValuesForTypeKey.STRING]: '',\n        [DefaultValuesForTypeKey.NUMBER]: undefined,\n        [DefaultValuesForTypeKey.ARRAY]: []\n      };\n      return def[type];\n    }\n\n    function guessType(key) {\n      let type = DefaultValuesForTypeKey.BOOLEAN;\n      if (checkAllAliases(key, flags.strings)) type = DefaultValuesForTypeKey.STRING;else if (checkAllAliases(key, flags.numbers)) type = DefaultValuesForTypeKey.NUMBER;else if (checkAllAliases(key, flags.bools)) type = DefaultValuesForTypeKey.BOOLEAN;else if (checkAllAliases(key, flags.arrays)) type = DefaultValuesForTypeKey.ARRAY;\n      return type;\n    }\n\n    function isUndefined(num) {\n      return num === undefined;\n    }\n\n    function checkConfiguration() {\n      Object.keys(flags.counts).find(key => {\n        if (checkAllAliases(key, flags.arrays)) {\n          error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));\n          return true;\n        } else if (checkAllAliases(key, flags.nargs)) {\n          error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    return {\n      aliases: Object.assign({}, flags.aliases),\n      argv: Object.assign(argvReturn, argv),\n      configuration: configuration,\n      defaulted: Object.assign({}, defaulted),\n      error: error,\n      newAliases: Object.assign({}, newAliases)\n    };\n  }\n\n}\n\nfunction combineAliases(aliases) {\n  const aliasArrays = [];\n  const combined = Object.create(null);\n  let change = true;\n  Object.keys(aliases).forEach(function (key) {\n    aliasArrays.push([].concat(aliases[key], key));\n  });\n\n  while (change) {\n    change = false;\n\n    for (let i = 0; i < aliasArrays.length; i++) {\n      for (let ii = i + 1; ii < aliasArrays.length; ii++) {\n        const intersect = aliasArrays[i].filter(function (v) {\n          return aliasArrays[ii].indexOf(v) !== -1;\n        });\n\n        if (intersect.length) {\n          aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\n          aliasArrays.splice(ii, 1);\n          change = true;\n          break;\n        }\n      }\n    }\n  }\n\n  aliasArrays.forEach(function (aliasArray) {\n    aliasArray = aliasArray.filter(function (v, i, self) {\n      return self.indexOf(v) === i;\n    });\n    const lastAlias = aliasArray.pop();\n\n    if (lastAlias !== undefined && typeof lastAlias === 'string') {\n      combined[lastAlias] = aliasArray;\n    }\n  });\n  return combined;\n}\n\nfunction increment(orig) {\n  return orig !== undefined ? orig + 1 : 1;\n}\n\nfunction sanitizeKey(key) {\n  if (key === '__proto__') return '___proto___';\n  return key;\n}\n\nfunction stripQuotes(val) {\n  return typeof val === 'string' && (val[0] === \"'\" || val[0] === '\"') && val[val.length - 1] === val[0] ? val.substring(1, val.length - 1) : val;\n}\n\nvar _a, _b, _c;\n\nconst minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\n\nif (nodeVersion) {\n  const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n\n  if (major < minNodeVersion) {\n    throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n  }\n}\n\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n  cwd: process.cwd,\n  env: () => {\n    return env;\n  },\n  format: util.format,\n  normalize: path.normalize,\n  resolve: path.resolve,\n  require: path => {\n    if (typeof require !== 'undefined') {\n      return require(path);\n    } else if (path.match(/\\.json$/)) {\n      return JSON.parse(fs.readFileSync(path, 'utf8'));\n    } else {\n      throw Error('only .json config files are supported in ESM');\n    }\n  }\n});\n\nconst yargsParser = function Parser(args, opts) {\n  const result = parser.parse(args.slice(), opts);\n  return result.argv;\n};\n\nyargsParser.detailed = function (args, opts) {\n  return parser.parse(args.slice(), opts);\n};\n\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nmodule.exports = yargsParser;","map":{"version":3,"names":["util","require","path","fs","camelCase","str","isCamelCase","toLowerCase","toUpperCase","indexOf","camelcase","nextChrUpper","leadingHyphens","match","i","length","chr","charAt","decamelize","joinString","lowercase","notCamelcase","chrLower","chrString","looksLikeNumber","x","undefined","test","tokenizeArgString","argString","Array","isArray","map","e","trim","prevC","c","opening","args","ii","DefaultValuesForTypeKey","mixin","YargsParser","constructor","_mixin","parse","argsInput","options","opts","Object","assign","alias","array","boolean","config","configObjects","configuration","coerce","count","default","envPrefix","narg","normalize","string","number","__","key","inputIsString","aliases","combineAliases","create","defaults","notFlagsOption","notFlagsArgv","newAliases","defaulted","format","flags","arrays","bools","strings","numbers","counts","configs","nargs","coercions","keys","negative","negatedBoolean","RegExp","concat","filter","Boolean","forEach","opt","assignment","arrayFlagKeys","pop","push","entries","value","extendAliases","error","checkConfiguration","notFlags","argv","_","argvReturn","arg","truncatedArg","replace","broken","letters","m","next","isUnknownOptionAsArg","pushPositional","checkAllAliases","eatArray","eatNargs","setArg","defaultValue","slice","split","j","applyEnvVars","setConfig","setConfigObjects","applyDefaultsAndAliases","applyCoercions","setPlaceholderKeys","hasKey","includes","k","prop","join","maybeCoercedNumber","maybeCoerceNumber","argAfterEqualSign","toEat","isNaN","isUndefined","Error","available","consumed","Math","min","argsToSet","nargsCount","defVal","processValue","val","shouldStripQuotes","addNewAlias","splitKey","setKey","keyProperties","a","shift","defineProperty","enumerable","get","set","stripQuotes","v","increment","shouldCoerceNumber","Number","isSafeInteger","floor","parseFloat","configLookup","configKey","configPath","resolvedConfigPath","resolve","cwd","resolveConfig","setConfigObject","ex","name","prev","fullKey","configObject","configOnly","prefix","env","envVar","lastIndexOf","substring","applied","Set","has","ali","add","err","obj","canLog","o","sanitizeKey","isTypeArray","isValueArray","duplicate","y","flag","toCheck","setAlias","find","hasAnyFlag","flagsKeys","some","hasFlagsMatching","patterns","pattern","hasAllShortFlags","hasAllFlags","isUnknownOption","flagWithEquals","normalFlag","flagEndingInHyphen","flagEndingInDigits","flagEndingInNonWordCharacters","defaultForType","guessType","type","def","BOOLEAN","STRING","NUMBER","ARRAY","num","aliasArrays","combined","change","intersect","splice","aliasArray","self","lastAlias","orig","_a","_b","_c","minNodeVersion","process","YARGS_MIN_NODE_VERSION","nodeVersion","versions","node","version","major","parser","JSON","readFileSync","yargsParser","Parser","result","detailed","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/yargs-parser/build/index.cjs"],"sourcesContent":["'use strict';\n\nvar util = require('util');\nvar path = require('path');\nvar fs = require('fs');\n\nfunction camelCase(str) {\n    const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n    if (!isCamelCase) {\n        str = str.toLowerCase();\n    }\n    if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n        return str;\n    }\n    else {\n        let camelcase = '';\n        let nextChrUpper = false;\n        const leadingHyphens = str.match(/^-+/);\n        for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n            let chr = str.charAt(i);\n            if (nextChrUpper) {\n                nextChrUpper = false;\n                chr = chr.toUpperCase();\n            }\n            if (i !== 0 && (chr === '-' || chr === '_')) {\n                nextChrUpper = true;\n            }\n            else if (chr !== '-' && chr !== '_') {\n                camelcase += chr;\n            }\n        }\n        return camelcase;\n    }\n}\nfunction decamelize(str, joinString) {\n    const lowercase = str.toLowerCase();\n    joinString = joinString || '-';\n    let notCamelcase = '';\n    for (let i = 0; i < str.length; i++) {\n        const chrLower = lowercase.charAt(i);\n        const chrString = str.charAt(i);\n        if (chrLower !== chrString && i > 0) {\n            notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n        }\n        else {\n            notCamelcase += chrString;\n        }\n    }\n    return notCamelcase;\n}\nfunction looksLikeNumber(x) {\n    if (x === null || x === undefined)\n        return false;\n    if (typeof x === 'number')\n        return true;\n    if (/^0x[0-9a-f]+$/i.test(x))\n        return true;\n    if (/^0[^.]/.test(x))\n        return false;\n    return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n\nfunction tokenizeArgString(argString) {\n    if (Array.isArray(argString)) {\n        return argString.map(e => typeof e !== 'string' ? e + '' : e);\n    }\n    argString = argString.trim();\n    let i = 0;\n    let prevC = null;\n    let c = null;\n    let opening = null;\n    const args = [];\n    for (let ii = 0; ii < argString.length; ii++) {\n        prevC = c;\n        c = argString.charAt(ii);\n        if (c === ' ' && !opening) {\n            if (!(prevC === ' ')) {\n                i++;\n            }\n            continue;\n        }\n        if (c === opening) {\n            opening = null;\n        }\n        else if ((c === \"'\" || c === '\"') && !opening) {\n            opening = c;\n        }\n        if (!args[i])\n            args[i] = '';\n        args[i] += c;\n    }\n    return args;\n}\n\nvar DefaultValuesForTypeKey;\n(function (DefaultValuesForTypeKey) {\n    DefaultValuesForTypeKey[\"BOOLEAN\"] = \"boolean\";\n    DefaultValuesForTypeKey[\"STRING\"] = \"string\";\n    DefaultValuesForTypeKey[\"NUMBER\"] = \"number\";\n    DefaultValuesForTypeKey[\"ARRAY\"] = \"array\";\n})(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));\n\nlet mixin;\nclass YargsParser {\n    constructor(_mixin) {\n        mixin = _mixin;\n    }\n    parse(argsInput, options) {\n        const opts = Object.assign({\n            alias: undefined,\n            array: undefined,\n            boolean: undefined,\n            config: undefined,\n            configObjects: undefined,\n            configuration: undefined,\n            coerce: undefined,\n            count: undefined,\n            default: undefined,\n            envPrefix: undefined,\n            narg: undefined,\n            normalize: undefined,\n            string: undefined,\n            number: undefined,\n            __: undefined,\n            key: undefined\n        }, options);\n        const args = tokenizeArgString(argsInput);\n        const inputIsString = typeof argsInput === 'string';\n        const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\n        const configuration = Object.assign({\n            'boolean-negation': true,\n            'camel-case-expansion': true,\n            'combine-arrays': false,\n            'dot-notation': true,\n            'duplicate-arguments-array': true,\n            'flatten-duplicate-arrays': true,\n            'greedy-arrays': true,\n            'halt-at-non-option': false,\n            'nargs-eats-options': false,\n            'negation-prefix': 'no-',\n            'parse-numbers': true,\n            'parse-positional-numbers': true,\n            'populate--': false,\n            'set-placeholder-key': false,\n            'short-option-groups': true,\n            'strip-aliased': false,\n            'strip-dashed': false,\n            'unknown-options-as-args': false\n        }, opts.configuration);\n        const defaults = Object.assign(Object.create(null), opts.default);\n        const configObjects = opts.configObjects || [];\n        const envPrefix = opts.envPrefix;\n        const notFlagsOption = configuration['populate--'];\n        const notFlagsArgv = notFlagsOption ? '--' : '_';\n        const newAliases = Object.create(null);\n        const defaulted = Object.create(null);\n        const __ = opts.__ || mixin.format;\n        const flags = {\n            aliases: Object.create(null),\n            arrays: Object.create(null),\n            bools: Object.create(null),\n            strings: Object.create(null),\n            numbers: Object.create(null),\n            counts: Object.create(null),\n            normalize: Object.create(null),\n            configs: Object.create(null),\n            nargs: Object.create(null),\n            coercions: Object.create(null),\n            keys: []\n        };\n        const negative = /^-([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$/;\n        const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');\n        [].concat(opts.array || []).filter(Boolean).forEach(function (opt) {\n            const key = typeof opt === 'object' ? opt.key : opt;\n            const assignment = Object.keys(opt).map(function (key) {\n                const arrayFlagKeys = {\n                    boolean: 'bools',\n                    string: 'strings',\n                    number: 'numbers'\n                };\n                return arrayFlagKeys[key];\n            }).filter(Boolean).pop();\n            if (assignment) {\n                flags[assignment][key] = true;\n            }\n            flags.arrays[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.boolean || []).filter(Boolean).forEach(function (key) {\n            flags.bools[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.string || []).filter(Boolean).forEach(function (key) {\n            flags.strings[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.number || []).filter(Boolean).forEach(function (key) {\n            flags.numbers[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.count || []).filter(Boolean).forEach(function (key) {\n            flags.counts[key] = true;\n            flags.keys.push(key);\n        });\n        [].concat(opts.normalize || []).filter(Boolean).forEach(function (key) {\n            flags.normalize[key] = true;\n            flags.keys.push(key);\n        });\n        if (typeof opts.narg === 'object') {\n            Object.entries(opts.narg).forEach(([key, value]) => {\n                if (typeof value === 'number') {\n                    flags.nargs[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.coerce === 'object') {\n            Object.entries(opts.coerce).forEach(([key, value]) => {\n                if (typeof value === 'function') {\n                    flags.coercions[key] = value;\n                    flags.keys.push(key);\n                }\n            });\n        }\n        if (typeof opts.config !== 'undefined') {\n            if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n                [].concat(opts.config).filter(Boolean).forEach(function (key) {\n                    flags.configs[key] = true;\n                });\n            }\n            else if (typeof opts.config === 'object') {\n                Object.entries(opts.config).forEach(([key, value]) => {\n                    if (typeof value === 'boolean' || typeof value === 'function') {\n                        flags.configs[key] = value;\n                    }\n                });\n            }\n        }\n        extendAliases(opts.key, aliases, opts.default, flags.arrays);\n        Object.keys(defaults).forEach(function (key) {\n            (flags.aliases[key] || []).forEach(function (alias) {\n                defaults[alias] = defaults[key];\n            });\n        });\n        let error = null;\n        checkConfiguration();\n        let notFlags = [];\n        const argv = Object.assign(Object.create(null), { _: [] });\n        const argvReturn = {};\n        for (let i = 0; i < args.length; i++) {\n            const arg = args[i];\n            const truncatedArg = arg.replace(/^-{3,}/, '---');\n            let broken;\n            let key;\n            let letters;\n            let m;\n            let next;\n            let value;\n            if (arg !== '--' && /^-/.test(arg) && isUnknownOptionAsArg(arg)) {\n                pushPositional(arg);\n            }\n            else if (truncatedArg.match(/^---+(=|$)/)) {\n                pushPositional(arg);\n                continue;\n            }\n            else if (arg.match(/^--.+=/) || (!configuration['short-option-groups'] && arg.match(/^-.+=/))) {\n                m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/);\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    if (checkAllAliases(m[1], flags.arrays)) {\n                        i = eatArray(i, m[1], args, m[2]);\n                    }\n                    else if (checkAllAliases(m[1], flags.nargs) !== false) {\n                        i = eatNargs(i, m[1], args, m[2]);\n                    }\n                    else {\n                        setArg(m[1], m[2], true);\n                    }\n                }\n            }\n            else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\n                m = arg.match(negatedBoolean);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);\n                }\n            }\n            else if (arg.match(/^--.+/) || (!configuration['short-option-groups'] && arg.match(/^-[^-]+/))) {\n                m = arg.match(/^--?(.+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (checkAllAliases(key, flags.arrays)) {\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!next.match(/^-/) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n            }\n            else if (arg.match(/^-.\\..+=/)) {\n                m = arg.match(/^-([^=]+)=([\\s\\S]*)$/);\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\n                    setArg(m[1], m[2]);\n                }\n            }\n            else if (arg.match(/^-.\\..+/) && !arg.match(negative)) {\n                next = args[i + 1];\n                m = arg.match(/^-(.\\..+)/);\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\n                    key = m[1];\n                    if (next !== undefined && !next.match(/^-/) &&\n                        !checkAllAliases(key, flags.bools) &&\n                        !checkAllAliases(key, flags.counts)) {\n                        setArg(key, next);\n                        i++;\n                    }\n                    else {\n                        setArg(key, defaultValue(key));\n                    }\n                }\n            }\n            else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n                letters = arg.slice(1, -1).split('');\n                broken = false;\n                for (let j = 0; j < letters.length; j++) {\n                    next = arg.slice(j + 2);\n                    if (letters[j + 1] && letters[j + 1] === '=') {\n                        value = arg.slice(j + 3);\n                        key = letters[j];\n                        if (checkAllAliases(key, flags.arrays)) {\n                            i = eatArray(i, key, args, value);\n                        }\n                        else if (checkAllAliases(key, flags.nargs) !== false) {\n                            i = eatNargs(i, key, args, value);\n                        }\n                        else {\n                            setArg(key, value);\n                        }\n                        broken = true;\n                        break;\n                    }\n                    if (next === '-') {\n                        setArg(letters[j], next);\n                        continue;\n                    }\n                    if (/[A-Za-z]/.test(letters[j]) &&\n                        /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next) &&\n                        checkAllAliases(next, flags.bools) === false) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n                        setArg(letters[j], next);\n                        broken = true;\n                        break;\n                    }\n                    else {\n                        setArg(letters[j], defaultValue(letters[j]));\n                    }\n                }\n                key = arg.slice(-1)[0];\n                if (!broken && key !== '-') {\n                    if (checkAllAliases(key, flags.arrays)) {\n                        i = eatArray(i, key, args);\n                    }\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\n                        i = eatNargs(i, key, args);\n                    }\n                    else {\n                        next = args[i + 1];\n                        if (next !== undefined && (!/^(-|--)[^-]/.test(next) ||\n                            next.match(negative)) &&\n                            !checkAllAliases(key, flags.bools) &&\n                            !checkAllAliases(key, flags.counts)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else if (/^(true|false)$/.test(next)) {\n                            setArg(key, next);\n                            i++;\n                        }\n                        else {\n                            setArg(key, defaultValue(key));\n                        }\n                    }\n                }\n            }\n            else if (arg.match(/^-[0-9]$/) &&\n                arg.match(negative) &&\n                checkAllAliases(arg.slice(1), flags.bools)) {\n                key = arg.slice(1);\n                setArg(key, defaultValue(key));\n            }\n            else if (arg === '--') {\n                notFlags = args.slice(i + 1);\n                break;\n            }\n            else if (configuration['halt-at-non-option']) {\n                notFlags = args.slice(i);\n                break;\n            }\n            else {\n                pushPositional(arg);\n            }\n        }\n        applyEnvVars(argv, true);\n        applyEnvVars(argv, false);\n        setConfig(argv);\n        setConfigObjects();\n        applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\n        applyCoercions(argv);\n        if (configuration['set-placeholder-key'])\n            setPlaceholderKeys(argv);\n        Object.keys(flags.counts).forEach(function (key) {\n            if (!hasKey(argv, key.split('.')))\n                setArg(key, 0);\n        });\n        if (notFlagsOption && notFlags.length)\n            argv[notFlagsArgv] = [];\n        notFlags.forEach(function (key) {\n            argv[notFlagsArgv].push(key);\n        });\n        if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\n            Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\n                delete argv[key];\n            });\n        }\n        if (configuration['strip-aliased']) {\n            [].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\n                if (configuration['camel-case-expansion'] && alias.includes('-')) {\n                    delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')];\n                }\n                delete argv[alias];\n            });\n        }\n        function pushPositional(arg) {\n            const maybeCoercedNumber = maybeCoerceNumber('_', arg);\n            if (typeof maybeCoercedNumber === 'string' || typeof maybeCoercedNumber === 'number') {\n                argv._.push(maybeCoercedNumber);\n            }\n        }\n        function eatNargs(i, key, args, argAfterEqualSign) {\n            let ii;\n            let toEat = checkAllAliases(key, flags.nargs);\n            toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat;\n            if (toEat === 0) {\n                if (!isUndefined(argAfterEqualSign)) {\n                    error = Error(__('Argument unexpected for: %s', key));\n                }\n                setArg(key, defaultValue(key));\n                return i;\n            }\n            let available = isUndefined(argAfterEqualSign) ? 0 : 1;\n            if (configuration['nargs-eats-options']) {\n                if (args.length - (i + 1) + available < toEat) {\n                    error = Error(__('Not enough arguments following: %s', key));\n                }\n                available = toEat;\n            }\n            else {\n                for (ii = i + 1; ii < args.length; ii++) {\n                    if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii]))\n                        available++;\n                    else\n                        break;\n                }\n                if (available < toEat)\n                    error = Error(__('Not enough arguments following: %s', key));\n            }\n            let consumed = Math.min(available, toEat);\n            if (!isUndefined(argAfterEqualSign) && consumed > 0) {\n                setArg(key, argAfterEqualSign);\n                consumed--;\n            }\n            for (ii = i + 1; ii < (consumed + i + 1); ii++) {\n                setArg(key, args[ii]);\n            }\n            return (i + consumed);\n        }\n        function eatArray(i, key, args, argAfterEqualSign) {\n            let argsToSet = [];\n            let next = argAfterEqualSign || args[i + 1];\n            const nargsCount = checkAllAliases(key, flags.nargs);\n            if (checkAllAliases(key, flags.bools) && !(/^(true|false)$/.test(next))) {\n                argsToSet.push(true);\n            }\n            else if (isUndefined(next) ||\n                (isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))) {\n                if (defaults[key] !== undefined) {\n                    const defVal = defaults[key];\n                    argsToSet = Array.isArray(defVal) ? defVal : [defVal];\n                }\n            }\n            else {\n                if (!isUndefined(argAfterEqualSign)) {\n                    argsToSet.push(processValue(key, argAfterEqualSign, true));\n                }\n                for (let ii = i + 1; ii < args.length; ii++) {\n                    if ((!configuration['greedy-arrays'] && argsToSet.length > 0) ||\n                        (nargsCount && typeof nargsCount === 'number' && argsToSet.length >= nargsCount))\n                        break;\n                    next = args[ii];\n                    if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))\n                        break;\n                    i = ii;\n                    argsToSet.push(processValue(key, next, inputIsString));\n                }\n            }\n            if (typeof nargsCount === 'number' && ((nargsCount && argsToSet.length < nargsCount) ||\n                (isNaN(nargsCount) && argsToSet.length === 0))) {\n                error = Error(__('Not enough arguments following: %s', key));\n            }\n            setArg(key, argsToSet);\n            return i;\n        }\n        function setArg(key, val, shouldStripQuotes = inputIsString) {\n            if (/-/.test(key) && configuration['camel-case-expansion']) {\n                const alias = key.split('.').map(function (prop) {\n                    return camelCase(prop);\n                }).join('.');\n                addNewAlias(key, alias);\n            }\n            const value = processValue(key, val, shouldStripQuotes);\n            const splitKey = key.split('.');\n            setKey(argv, splitKey, value);\n            if (flags.aliases[key]) {\n                flags.aliases[key].forEach(function (x) {\n                    const keyProperties = x.split('.');\n                    setKey(argv, keyProperties, value);\n                });\n            }\n            if (splitKey.length > 1 && configuration['dot-notation']) {\n                (flags.aliases[splitKey[0]] || []).forEach(function (x) {\n                    let keyProperties = x.split('.');\n                    const a = [].concat(splitKey);\n                    a.shift();\n                    keyProperties = keyProperties.concat(a);\n                    if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {\n                        setKey(argv, keyProperties, value);\n                    }\n                });\n            }\n            if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n                const keys = [key].concat(flags.aliases[key] || []);\n                keys.forEach(function (key) {\n                    Object.defineProperty(argvReturn, key, {\n                        enumerable: true,\n                        get() {\n                            return val;\n                        },\n                        set(value) {\n                            val = typeof value === 'string' ? mixin.normalize(value) : value;\n                        }\n                    });\n                });\n            }\n        }\n        function addNewAlias(key, alias) {\n            if (!(flags.aliases[key] && flags.aliases[key].length)) {\n                flags.aliases[key] = [alias];\n                newAliases[alias] = true;\n            }\n            if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\n                addNewAlias(alias, key);\n            }\n        }\n        function processValue(key, val, shouldStripQuotes) {\n            if (shouldStripQuotes) {\n                val = stripQuotes(val);\n            }\n            if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n                if (typeof val === 'string')\n                    val = val === 'true';\n            }\n            let value = Array.isArray(val)\n                ? val.map(function (v) { return maybeCoerceNumber(key, v); })\n                : maybeCoerceNumber(key, val);\n            if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n                value = increment();\n            }\n            if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n                if (Array.isArray(val))\n                    value = val.map((val) => { return mixin.normalize(val); });\n                else\n                    value = mixin.normalize(val);\n            }\n            return value;\n        }\n        function maybeCoerceNumber(key, value) {\n            if (!configuration['parse-positional-numbers'] && key === '_')\n                return value;\n            if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\n                const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && (Number.isSafeInteger(Math.floor(parseFloat(`${value}`))));\n                if (shouldCoerceNumber || (!isUndefined(value) && checkAllAliases(key, flags.numbers))) {\n                    value = Number(value);\n                }\n            }\n            return value;\n        }\n        function setConfig(argv) {\n            const configLookup = Object.create(null);\n            applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\n            Object.keys(flags.configs).forEach(function (configKey) {\n                const configPath = argv[configKey] || configLookup[configKey];\n                if (configPath) {\n                    try {\n                        let config = null;\n                        const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\n                        const resolveConfig = flags.configs[configKey];\n                        if (typeof resolveConfig === 'function') {\n                            try {\n                                config = resolveConfig(resolvedConfigPath);\n                            }\n                            catch (e) {\n                                config = e;\n                            }\n                            if (config instanceof Error) {\n                                error = config;\n                                return;\n                            }\n                        }\n                        else {\n                            config = mixin.require(resolvedConfigPath);\n                        }\n                        setConfigObject(config);\n                    }\n                    catch (ex) {\n                        if (ex.name === 'PermissionDenied')\n                            error = ex;\n                        else if (argv[configKey])\n                            error = Error(__('Invalid JSON config file: %s', configPath));\n                    }\n                }\n            });\n        }\n        function setConfigObject(config, prev) {\n            Object.keys(config).forEach(function (key) {\n                const value = config[key];\n                const fullKey = prev ? prev + '.' + key : key;\n                if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\n                    setConfigObject(value, fullKey);\n                }\n                else {\n                    if (!hasKey(argv, fullKey.split('.')) || (checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays'])) {\n                        setArg(fullKey, value);\n                    }\n                }\n            });\n        }\n        function setConfigObjects() {\n            if (typeof configObjects !== 'undefined') {\n                configObjects.forEach(function (configObject) {\n                    setConfigObject(configObject);\n                });\n            }\n        }\n        function applyEnvVars(argv, configOnly) {\n            if (typeof envPrefix === 'undefined')\n                return;\n            const prefix = typeof envPrefix === 'string' ? envPrefix : '';\n            const env = mixin.env();\n            Object.keys(env).forEach(function (envVar) {\n                if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n                    const keys = envVar.split('__').map(function (key, i) {\n                        if (i === 0) {\n                            key = key.substring(prefix.length);\n                        }\n                        return camelCase(key);\n                    });\n                    if (((configOnly && flags.configs[keys.join('.')]) || !configOnly) && !hasKey(argv, keys)) {\n                        setArg(keys.join('.'), env[envVar]);\n                    }\n                }\n            });\n        }\n        function applyCoercions(argv) {\n            let coerce;\n            const applied = new Set();\n            Object.keys(argv).forEach(function (key) {\n                if (!applied.has(key)) {\n                    coerce = checkAllAliases(key, flags.coercions);\n                    if (typeof coerce === 'function') {\n                        try {\n                            const value = maybeCoerceNumber(key, coerce(argv[key]));\n                            ([].concat(flags.aliases[key] || [], key)).forEach(ali => {\n                                applied.add(ali);\n                                argv[ali] = value;\n                            });\n                        }\n                        catch (err) {\n                            error = err;\n                        }\n                    }\n                }\n            });\n        }\n        function setPlaceholderKeys(argv) {\n            flags.keys.forEach((key) => {\n                if (~key.indexOf('.'))\n                    return;\n                if (typeof argv[key] === 'undefined')\n                    argv[key] = undefined;\n            });\n            return argv;\n        }\n        function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {\n            Object.keys(defaults).forEach(function (key) {\n                if (!hasKey(obj, key.split('.'))) {\n                    setKey(obj, key.split('.'), defaults[key]);\n                    if (canLog)\n                        defaulted[key] = true;\n                    (aliases[key] || []).forEach(function (x) {\n                        if (hasKey(obj, x.split('.')))\n                            return;\n                        setKey(obj, x.split('.'), defaults[key]);\n                    });\n                }\n            });\n        }\n        function hasKey(obj, keys) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                o = (o[key] || {});\n            });\n            const key = keys[keys.length - 1];\n            if (typeof o !== 'object')\n                return false;\n            else\n                return key in o;\n        }\n        function setKey(obj, keys, value) {\n            let o = obj;\n            if (!configuration['dot-notation'])\n                keys = [keys.join('.')];\n            keys.slice(0, -1).forEach(function (key) {\n                key = sanitizeKey(key);\n                if (typeof o === 'object' && o[key] === undefined) {\n                    o[key] = {};\n                }\n                if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\n                    if (Array.isArray(o[key])) {\n                        o[key].push({});\n                    }\n                    else {\n                        o[key] = [o[key], {}];\n                    }\n                    o = o[key][o[key].length - 1];\n                }\n                else {\n                    o = o[key];\n                }\n            });\n            const key = sanitizeKey(keys[keys.length - 1]);\n            const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);\n            const isValueArray = Array.isArray(value);\n            let duplicate = configuration['duplicate-arguments-array'];\n            if (!duplicate && checkAllAliases(key, flags.nargs)) {\n                duplicate = true;\n                if ((!isUndefined(o[key]) && flags.nargs[key] === 1) || (Array.isArray(o[key]) && o[key].length === flags.nargs[key])) {\n                    o[key] = undefined;\n                }\n            }\n            if (value === increment()) {\n                o[key] = increment(o[key]);\n            }\n            else if (Array.isArray(o[key])) {\n                if (duplicate && isTypeArray && isValueArray) {\n                    o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);\n                }\n                else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\n                    o[key] = value;\n                }\n                else {\n                    o[key] = o[key].concat([value]);\n                }\n            }\n            else if (o[key] === undefined && isTypeArray) {\n                o[key] = isValueArray ? value : [value];\n            }\n            else if (duplicate && !(o[key] === undefined ||\n                checkAllAliases(key, flags.counts) ||\n                checkAllAliases(key, flags.bools))) {\n                o[key] = [o[key], value];\n            }\n            else {\n                o[key] = value;\n            }\n        }\n        function extendAliases(...args) {\n            args.forEach(function (obj) {\n                Object.keys(obj || {}).forEach(function (key) {\n                    if (flags.aliases[key])\n                        return;\n                    flags.aliases[key] = [].concat(aliases[key] || []);\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (/-/.test(x) && configuration['camel-case-expansion']) {\n                            const c = camelCase(x);\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    flags.aliases[key].concat(key).forEach(function (x) {\n                        if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\n                            const c = decamelize(x, '-');\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\n                                flags.aliases[key].push(c);\n                                newAliases[c] = true;\n                            }\n                        }\n                    });\n                    flags.aliases[key].forEach(function (x) {\n                        flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n                            return x !== y;\n                        }));\n                    });\n                });\n            });\n        }\n        function checkAllAliases(key, flag) {\n            const toCheck = [].concat(flags.aliases[key] || [], key);\n            const keys = Object.keys(flag);\n            const setAlias = toCheck.find(key => keys.includes(key));\n            return setAlias ? flag[setAlias] : false;\n        }\n        function hasAnyFlag(key) {\n            const flagsKeys = Object.keys(flags);\n            const toCheck = [].concat(flagsKeys.map(k => flags[k]));\n            return toCheck.some(function (flag) {\n                return Array.isArray(flag) ? flag.includes(key) : flag[key];\n            });\n        }\n        function hasFlagsMatching(arg, ...patterns) {\n            const toCheck = [].concat(...patterns);\n            return toCheck.some(function (pattern) {\n                const match = arg.match(pattern);\n                return match && hasAnyFlag(match[1]);\n            });\n        }\n        function hasAllShortFlags(arg) {\n            if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\n                return false;\n            }\n            let hasAllFlags = true;\n            let next;\n            const letters = arg.slice(1).split('');\n            for (let j = 0; j < letters.length; j++) {\n                next = arg.slice(j + 2);\n                if (!hasAnyFlag(letters[j])) {\n                    hasAllFlags = false;\n                    break;\n                }\n                if ((letters[j + 1] && letters[j + 1] === '=') ||\n                    next === '-' ||\n                    (/[A-Za-z]/.test(letters[j]) && /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) ||\n                    (letters[j + 1] && letters[j + 1].match(/\\W/))) {\n                    break;\n                }\n            }\n            return hasAllFlags;\n        }\n        function isUnknownOptionAsArg(arg) {\n            return configuration['unknown-options-as-args'] && isUnknownOption(arg);\n        }\n        function isUnknownOption(arg) {\n            arg = arg.replace(/^-{3,}/, '--');\n            if (arg.match(negative)) {\n                return false;\n            }\n            if (hasAllShortFlags(arg)) {\n                return false;\n            }\n            const flagWithEquals = /^-+([^=]+?)=[\\s\\S]*$/;\n            const normalFlag = /^-+([^=]+?)$/;\n            const flagEndingInHyphen = /^-+([^=]+?)-$/;\n            const flagEndingInDigits = /^-+([^=]+?\\d+)$/;\n            const flagEndingInNonWordCharacters = /^-+([^=]+?)\\W+.*$/;\n            return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\n        }\n        function defaultValue(key) {\n            if (!checkAllAliases(key, flags.bools) &&\n                !checkAllAliases(key, flags.counts) &&\n                `${key}` in defaults) {\n                return defaults[key];\n            }\n            else {\n                return defaultForType(guessType(key));\n            }\n        }\n        function defaultForType(type) {\n            const def = {\n                [DefaultValuesForTypeKey.BOOLEAN]: true,\n                [DefaultValuesForTypeKey.STRING]: '',\n                [DefaultValuesForTypeKey.NUMBER]: undefined,\n                [DefaultValuesForTypeKey.ARRAY]: []\n            };\n            return def[type];\n        }\n        function guessType(key) {\n            let type = DefaultValuesForTypeKey.BOOLEAN;\n            if (checkAllAliases(key, flags.strings))\n                type = DefaultValuesForTypeKey.STRING;\n            else if (checkAllAliases(key, flags.numbers))\n                type = DefaultValuesForTypeKey.NUMBER;\n            else if (checkAllAliases(key, flags.bools))\n                type = DefaultValuesForTypeKey.BOOLEAN;\n            else if (checkAllAliases(key, flags.arrays))\n                type = DefaultValuesForTypeKey.ARRAY;\n            return type;\n        }\n        function isUndefined(num) {\n            return num === undefined;\n        }\n        function checkConfiguration() {\n            Object.keys(flags.counts).find(key => {\n                if (checkAllAliases(key, flags.arrays)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));\n                    return true;\n                }\n                else if (checkAllAliases(key, flags.nargs)) {\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));\n                    return true;\n                }\n                return false;\n            });\n        }\n        return {\n            aliases: Object.assign({}, flags.aliases),\n            argv: Object.assign(argvReturn, argv),\n            configuration: configuration,\n            defaulted: Object.assign({}, defaulted),\n            error: error,\n            newAliases: Object.assign({}, newAliases)\n        };\n    }\n}\nfunction combineAliases(aliases) {\n    const aliasArrays = [];\n    const combined = Object.create(null);\n    let change = true;\n    Object.keys(aliases).forEach(function (key) {\n        aliasArrays.push([].concat(aliases[key], key));\n    });\n    while (change) {\n        change = false;\n        for (let i = 0; i < aliasArrays.length; i++) {\n            for (let ii = i + 1; ii < aliasArrays.length; ii++) {\n                const intersect = aliasArrays[i].filter(function (v) {\n                    return aliasArrays[ii].indexOf(v) !== -1;\n                });\n                if (intersect.length) {\n                    aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\n                    aliasArrays.splice(ii, 1);\n                    change = true;\n                    break;\n                }\n            }\n        }\n    }\n    aliasArrays.forEach(function (aliasArray) {\n        aliasArray = aliasArray.filter(function (v, i, self) {\n            return self.indexOf(v) === i;\n        });\n        const lastAlias = aliasArray.pop();\n        if (lastAlias !== undefined && typeof lastAlias === 'string') {\n            combined[lastAlias] = aliasArray;\n        }\n    });\n    return combined;\n}\nfunction increment(orig) {\n    return orig !== undefined ? orig + 1 : 1;\n}\nfunction sanitizeKey(key) {\n    if (key === '__proto__')\n        return '___proto___';\n    return key;\n}\nfunction stripQuotes(val) {\n    return (typeof val === 'string' &&\n        (val[0] === \"'\" || val[0] === '\"') &&\n        val[val.length - 1] === val[0])\n        ? val.substring(1, val.length - 1)\n        : val;\n}\n\nvar _a, _b, _c;\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 12;\nconst nodeVersion = (_b = (_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== null && _b !== void 0 ? _b : (_c = process === null || process === void 0 ? void 0 : process.version) === null || _c === void 0 ? void 0 : _c.slice(1);\nif (nodeVersion) {\n    const major = Number(nodeVersion.match(/^([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n    cwd: process.cwd,\n    env: () => {\n        return env;\n    },\n    format: util.format,\n    normalize: path.normalize,\n    resolve: path.resolve,\n    require: (path) => {\n        if (typeof require !== 'undefined') {\n            return require(path);\n        }\n        else if (path.match(/\\.json$/)) {\n            return JSON.parse(fs.readFileSync(path, 'utf8'));\n        }\n        else {\n            throw Error('only .json config files are supported in ESM');\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\n\nmodule.exports = yargsParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}