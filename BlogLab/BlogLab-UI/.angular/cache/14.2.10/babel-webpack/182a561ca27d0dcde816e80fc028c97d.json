{"ast":null,"code":"const {\n  spawn\n} = require('child_process');\n\nconst inferOwner = require('infer-owner');\n\nconst isPipe = (stdio = 'pipe', fd) => stdio === 'pipe' || stdio === null ? true : Array.isArray(stdio) ? isPipe(stdio[fd], fd) : false; // 'extra' object is for decorating the error a bit more\n\n\nconst promiseSpawn = (cmd, args, opts = {}, extra = {}) => {\n  const cwd = opts.cwd || process.cwd();\n  const isRoot = process.getuid && process.getuid() === 0;\n  const {\n    uid,\n    gid\n  } = isRoot ? inferOwner.sync(cwd) : {};\n  return promiseSpawnUid(cmd, args, { ...opts,\n    cwd,\n    uid,\n    gid\n  }, extra);\n};\n\nconst stdioResult = (stdout, stderr, {\n  stdioString,\n  stdio\n}) => stdioString ? {\n  stdout: isPipe(stdio, 1) ? Buffer.concat(stdout).toString() : null,\n  stderr: isPipe(stdio, 2) ? Buffer.concat(stderr).toString() : null\n} : {\n  stdout: isPipe(stdio, 1) ? Buffer.concat(stdout) : null,\n  stderr: isPipe(stdio, 2) ? Buffer.concat(stderr) : null\n};\n\nconst promiseSpawnUid = (cmd, args, opts, extra) => {\n  let proc;\n  const p = new Promise((res, rej) => {\n    proc = spawn(cmd, args, opts);\n    const stdout = [];\n    const stderr = [];\n\n    const reject = er => rej(Object.assign(er, {\n      cmd,\n      args,\n      ...stdioResult(stdout, stderr, opts),\n      ...extra\n    }));\n\n    proc.on('error', reject);\n\n    if (proc.stdout) {\n      proc.stdout.on('data', c => stdout.push(c)).on('error', reject);\n      proc.stdout.on('error', er => reject(er));\n    }\n\n    if (proc.stderr) {\n      proc.stderr.on('data', c => stderr.push(c)).on('error', reject);\n      proc.stderr.on('error', er => reject(er));\n    }\n\n    proc.on('close', (code, signal) => {\n      const result = {\n        cmd,\n        args,\n        code,\n        signal,\n        ...stdioResult(stdout, stderr, opts),\n        ...extra\n      };\n\n      if (code || signal) {\n        rej(Object.assign(new Error('command failed'), result));\n      } else {\n        res(result);\n      }\n    });\n  });\n  p.stdin = proc.stdin;\n  p.process = proc;\n  return p;\n};\n\nmodule.exports = promiseSpawn;","map":{"version":3,"names":["spawn","require","inferOwner","isPipe","stdio","fd","Array","isArray","promiseSpawn","cmd","args","opts","extra","cwd","process","isRoot","getuid","uid","gid","sync","promiseSpawnUid","stdioResult","stdout","stderr","stdioString","Buffer","concat","toString","proc","p","Promise","res","rej","reject","er","Object","assign","on","c","push","code","signal","result","Error","stdin","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@npmcli/promise-spawn/lib/index.js"],"sourcesContent":["const { spawn } = require('child_process')\nconst inferOwner = require('infer-owner')\n\nconst isPipe = (stdio = 'pipe', fd) =>\n  stdio === 'pipe' || stdio === null ? true\n  : Array.isArray(stdio) ? isPipe(stdio[fd], fd)\n  : false\n\n// 'extra' object is for decorating the error a bit more\nconst promiseSpawn = (cmd, args, opts = {}, extra = {}) => {\n  const cwd = opts.cwd || process.cwd()\n  const isRoot = process.getuid && process.getuid() === 0\n  const { uid, gid } = isRoot ? inferOwner.sync(cwd) : {}\n  return promiseSpawnUid(cmd, args, {\n    ...opts,\n    cwd,\n    uid,\n    gid,\n  }, extra)\n}\n\nconst stdioResult = (stdout, stderr, { stdioString, stdio }) =>\n  stdioString ? {\n    stdout: isPipe(stdio, 1) ? Buffer.concat(stdout).toString() : null,\n    stderr: isPipe(stdio, 2) ? Buffer.concat(stderr).toString() : null,\n  }\n  : {\n    stdout: isPipe(stdio, 1) ? Buffer.concat(stdout) : null,\n    stderr: isPipe(stdio, 2) ? Buffer.concat(stderr) : null,\n  }\n\nconst promiseSpawnUid = (cmd, args, opts, extra) => {\n  let proc\n  const p = new Promise((res, rej) => {\n    proc = spawn(cmd, args, opts)\n    const stdout = []\n    const stderr = []\n    const reject = er => rej(Object.assign(er, {\n      cmd,\n      args,\n      ...stdioResult(stdout, stderr, opts),\n      ...extra,\n    }))\n    proc.on('error', reject)\n    if (proc.stdout) {\n      proc.stdout.on('data', c => stdout.push(c)).on('error', reject)\n      proc.stdout.on('error', er => reject(er))\n    }\n    if (proc.stderr) {\n      proc.stderr.on('data', c => stderr.push(c)).on('error', reject)\n      proc.stderr.on('error', er => reject(er))\n    }\n    proc.on('close', (code, signal) => {\n      const result = {\n        cmd,\n        args,\n        code,\n        signal,\n        ...stdioResult(stdout, stderr, opts),\n        ...extra,\n      }\n      if (code || signal) {\n        rej(Object.assign(new Error('command failed'), result))\n      } else {\n        res(result)\n      }\n    })\n  })\n\n  p.stdin = proc.stdin\n  p.process = proc\n  return p\n}\n\nmodule.exports = promiseSpawn\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}