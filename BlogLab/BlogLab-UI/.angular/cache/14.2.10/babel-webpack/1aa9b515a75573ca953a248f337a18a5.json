{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompletionCommandModule = void 0;\n\nconst path_1 = require(\"path\");\n\nconst yargs_1 = __importDefault(require(\"yargs\"));\n\nconst command_module_1 = require(\"../../command-builder/command-module\");\n\nconst command_1 = require(\"../../command-builder/utilities/command\");\n\nconst color_1 = require(\"../../utilities/color\");\n\nconst completion_1 = require(\"../../utilities/completion\");\n\nconst error_1 = require(\"../../utilities/error\");\n\nclass CompletionCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'completion';\n    this.describe = 'Set up Angular CLI autocompletion for your terminal.';\n    this.longDescriptionPath = (0, path_1.join)(__dirname, 'long-description.md');\n  }\n\n  builder(localYargs) {\n    return (0, command_1.addCommandModuleToYargs)(localYargs, CompletionScriptCommandModule, this.context);\n  }\n\n  run() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let rcFile;\n\n      try {\n        rcFile = yield (0, completion_1.initializeAutocomplete)();\n      } catch (err) {\n        (0, error_1.assertIsError)(err);\n\n        _this.context.logger.error(err.message);\n\n        return 1;\n      }\n\n      _this.context.logger.info(`\nAppended \\`source <(ng completion script)\\` to \\`${rcFile}\\`. Restart your terminal or run the following to autocomplete \\`ng\\` commands:\n\n    ${color_1.colors.yellow('source <(ng completion script)')}\n      `.trim());\n\n      if ((yield (0, completion_1.hasGlobalCliInstall)()) === false) {\n        _this.context.logger.warn('Setup completed successfully, but there does not seem to be a global install of the' + ' Angular CLI. For autocompletion to work, the CLI will need to be on your `$PATH`, which' + ' is typically done with the `-g` flag in `npm install -g @angular/cli`.' + '\\n\\n' + 'For more information, see https://angular.io/cli/completion#global-install');\n      }\n\n      return 0;\n    })();\n  }\n\n}\n\nexports.CompletionCommandModule = CompletionCommandModule;\n\nclass CompletionScriptCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'script';\n    this.describe = 'Generate a bash and zsh real-time type-ahead autocompletion script.';\n    this.longDescriptionPath = undefined;\n  }\n\n  builder(localYargs) {\n    return localYargs;\n  }\n\n  run() {\n    yargs_1.default.showCompletionScript();\n  }\n\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","CompletionCommandModule","path_1","require","yargs_1","command_module_1","command_1","color_1","completion_1","error_1","CommandModule","constructor","arguments","command","describe","longDescriptionPath","join","__dirname","builder","localYargs","addCommandModuleToYargs","CompletionScriptCommandModule","context","run","rcFile","initializeAutocomplete","err","assertIsError","logger","error","message","info","colors","yellow","trim","hasGlobalCliInstall","warn","undefined","default","showCompletionScript"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/commands/completion/cli.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompletionCommandModule = void 0;\nconst path_1 = require(\"path\");\nconst yargs_1 = __importDefault(require(\"yargs\"));\nconst command_module_1 = require(\"../../command-builder/command-module\");\nconst command_1 = require(\"../../command-builder/utilities/command\");\nconst color_1 = require(\"../../utilities/color\");\nconst completion_1 = require(\"../../utilities/completion\");\nconst error_1 = require(\"../../utilities/error\");\nclass CompletionCommandModule extends command_module_1.CommandModule {\n    constructor() {\n        super(...arguments);\n        this.command = 'completion';\n        this.describe = 'Set up Angular CLI autocompletion for your terminal.';\n        this.longDescriptionPath = (0, path_1.join)(__dirname, 'long-description.md');\n    }\n    builder(localYargs) {\n        return (0, command_1.addCommandModuleToYargs)(localYargs, CompletionScriptCommandModule, this.context);\n    }\n    async run() {\n        let rcFile;\n        try {\n            rcFile = await (0, completion_1.initializeAutocomplete)();\n        }\n        catch (err) {\n            (0, error_1.assertIsError)(err);\n            this.context.logger.error(err.message);\n            return 1;\n        }\n        this.context.logger.info(`\nAppended \\`source <(ng completion script)\\` to \\`${rcFile}\\`. Restart your terminal or run the following to autocomplete \\`ng\\` commands:\n\n    ${color_1.colors.yellow('source <(ng completion script)')}\n      `.trim());\n        if ((await (0, completion_1.hasGlobalCliInstall)()) === false) {\n            this.context.logger.warn('Setup completed successfully, but there does not seem to be a global install of the' +\n                ' Angular CLI. For autocompletion to work, the CLI will need to be on your `$PATH`, which' +\n                ' is typically done with the `-g` flag in `npm install -g @angular/cli`.' +\n                '\\n\\n' +\n                'For more information, see https://angular.io/cli/completion#global-install');\n        }\n        return 0;\n    }\n}\nexports.CompletionCommandModule = CompletionCommandModule;\nclass CompletionScriptCommandModule extends command_module_1.CommandModule {\n    constructor() {\n        super(...arguments);\n        this.command = 'script';\n        this.describe = 'Generate a bash and zsh real-time type-ahead autocompletion script.';\n        this.longDescriptionPath = undefined;\n    }\n    builder(localYargs) {\n        return localYargs;\n    }\n    run() {\n        yargs_1.default.showCompletionScript();\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkC,KAAK,CAAvC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGV,eAAe,CAACS,OAAO,CAAC,OAAD,CAAR,CAA/B;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,sCAAD,CAAhC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,yCAAD,CAAzB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,4BAAD,CAA5B;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAMF,uBAAN,SAAsCI,gBAAgB,CAACK,aAAvD,CAAqE;EACjEC,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,OAAL,GAAe,YAAf;IACA,KAAKC,QAAL,GAAgB,sDAAhB;IACA,KAAKC,mBAAL,GAA2B,CAAC,GAAGb,MAAM,CAACc,IAAX,EAAiBC,SAAjB,EAA4B,qBAA5B,CAA3B;EACH;;EACDC,OAAO,CAACC,UAAD,EAAa;IAChB,OAAO,CAAC,GAAGb,SAAS,CAACc,uBAAd,EAAuCD,UAAvC,EAAmDE,6BAAnD,EAAkF,KAAKC,OAAvF,CAAP;EACH;;EACKC,GAAG,GAAG;IAAA;;IAAA;MACR,IAAIC,MAAJ;;MACA,IAAI;QACAA,MAAM,SAAS,CAAC,GAAGhB,YAAY,CAACiB,sBAAjB,GAAf;MACH,CAFD,CAGA,OAAOC,GAAP,EAAY;QACR,CAAC,GAAGjB,OAAO,CAACkB,aAAZ,EAA2BD,GAA3B;;QACA,KAAI,CAACJ,OAAL,CAAaM,MAAb,CAAoBC,KAApB,CAA0BH,GAAG,CAACI,OAA9B;;QACA,OAAO,CAAP;MACH;;MACD,KAAI,CAACR,OAAL,CAAaM,MAAb,CAAoBG,IAApB,CAA0B;AAClC,mDAAmDP,MAAO;AAC1D;AACA,MAAMjB,OAAO,CAACyB,MAAR,CAAeC,MAAf,CAAsB,gCAAtB,CAAwD;AAC9D,OAJiC,CAIzBC,IAJyB,EAAzB;;MAKA,IAAI,OAAO,CAAC,GAAG1B,YAAY,CAAC2B,mBAAjB,GAAP,MAAoD,KAAxD,EAA+D;QAC3D,KAAI,CAACb,OAAL,CAAaM,MAAb,CAAoBQ,IAApB,CAAyB,wFACrB,0FADqB,GAErB,yEAFqB,GAGrB,MAHqB,GAIrB,4EAJJ;MAKH;;MACD,OAAO,CAAP;IAtBQ;EAuBX;;AAjCgE;;AAmCrErC,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC;;AACA,MAAMoB,6BAAN,SAA4ChB,gBAAgB,CAACK,aAA7D,CAA2E;EACvEC,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,OAAL,GAAe,QAAf;IACA,KAAKC,QAAL,GAAgB,qEAAhB;IACA,KAAKC,mBAAL,GAA2BsB,SAA3B;EACH;;EACDnB,OAAO,CAACC,UAAD,EAAa;IAChB,OAAOA,UAAP;EACH;;EACDI,GAAG,GAAG;IACFnB,OAAO,CAACkC,OAAR,CAAgBC,oBAAhB;EACH;;AAZsE"},"metadata":{},"sourceType":"script"}