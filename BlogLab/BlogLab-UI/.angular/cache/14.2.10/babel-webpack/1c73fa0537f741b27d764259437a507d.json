{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeModuleJobRegistry = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst src_1 = require(\"../../../src\");\n\nclass NodeModuleJobRegistry {\n  _resolve(name) {\n    try {\n      return require.resolve(name);\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND') {\n        return null;\n      }\n\n      throw e;\n    }\n  }\n  /**\n   * Get a job description for a named job.\n   *\n   * @param name The name of the job.\n   * @returns A description, or null if the job is not registered.\n   */\n\n\n  get(name) {\n    const [moduleName, exportName] = name.split(/#/, 2);\n\n    const resolvedPath = this._resolve(moduleName);\n\n    if (!resolvedPath) {\n      return (0, rxjs_1.of)(null);\n    }\n\n    const pkg = require(resolvedPath);\n\n    const handler = pkg[exportName || 'default'];\n\n    if (!handler) {\n      return (0, rxjs_1.of)(null);\n    }\n\n    function _getValue(...fields) {\n      return fields.find(x => src_1.schema.isJsonSchema(x)) || true;\n    }\n\n    const argument = _getValue(pkg.argument, handler.argument);\n\n    const input = _getValue(pkg.input, handler.input);\n\n    const output = _getValue(pkg.output, handler.output);\n\n    const channels = _getValue(pkg.channels, handler.channels);\n\n    return (0, rxjs_1.of)(Object.assign(handler.bind(undefined), {\n      jobDescription: {\n        argument,\n        input,\n        output,\n        channels\n      }\n    }));\n  }\n\n}\n\nexports.NodeModuleJobRegistry = NodeModuleJobRegistry;","map":{"version":3,"names":["Object","defineProperty","exports","value","NodeModuleJobRegistry","rxjs_1","require","src_1","_resolve","name","resolve","e","code","get","moduleName","exportName","split","resolvedPath","of","pkg","handler","_getValue","fields","find","x","schema","isJsonSchema","argument","input","output","channels","assign","bind","undefined","jobDescription"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/node/experimental/jobs/job-registry.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeModuleJobRegistry = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst src_1 = require(\"../../../src\");\nclass NodeModuleJobRegistry {\n    _resolve(name) {\n        try {\n            return require.resolve(name);\n        }\n        catch (e) {\n            if (e.code === 'MODULE_NOT_FOUND') {\n                return null;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Get a job description for a named job.\n     *\n     * @param name The name of the job.\n     * @returns A description, or null if the job is not registered.\n     */\n    get(name) {\n        const [moduleName, exportName] = name.split(/#/, 2);\n        const resolvedPath = this._resolve(moduleName);\n        if (!resolvedPath) {\n            return (0, rxjs_1.of)(null);\n        }\n        const pkg = require(resolvedPath);\n        const handler = pkg[exportName || 'default'];\n        if (!handler) {\n            return (0, rxjs_1.of)(null);\n        }\n        function _getValue(...fields) {\n            return fields.find((x) => src_1.schema.isJsonSchema(x)) || true;\n        }\n        const argument = _getValue(pkg.argument, handler.argument);\n        const input = _getValue(pkg.input, handler.input);\n        const output = _getValue(pkg.output, handler.output);\n        const channels = _getValue(pkg.channels, handler.channels);\n        return (0, rxjs_1.of)(Object.assign(handler.bind(undefined), {\n            jobDescription: {\n                argument,\n                input,\n                output,\n                channels,\n            },\n        }));\n    }\n}\nexports.NodeModuleJobRegistry = NodeModuleJobRegistry;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgC,KAAK,CAArC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAArB;;AACA,MAAMF,qBAAN,CAA4B;EACxBI,QAAQ,CAACC,IAAD,EAAO;IACX,IAAI;MACA,OAAOH,OAAO,CAACI,OAAR,CAAgBD,IAAhB,CAAP;IACH,CAFD,CAGA,OAAOE,CAAP,EAAU;MACN,IAAIA,CAAC,CAACC,IAAF,KAAW,kBAAf,EAAmC;QAC/B,OAAO,IAAP;MACH;;MACD,MAAMD,CAAN;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIE,GAAG,CAACJ,IAAD,EAAO;IACN,MAAM,CAACK,UAAD,EAAaC,UAAb,IAA2BN,IAAI,CAACO,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAjC;;IACA,MAAMC,YAAY,GAAG,KAAKT,QAAL,CAAcM,UAAd,CAArB;;IACA,IAAI,CAACG,YAAL,EAAmB;MACf,OAAO,CAAC,GAAGZ,MAAM,CAACa,EAAX,EAAe,IAAf,CAAP;IACH;;IACD,MAAMC,GAAG,GAAGb,OAAO,CAACW,YAAD,CAAnB;;IACA,MAAMG,OAAO,GAAGD,GAAG,CAACJ,UAAU,IAAI,SAAf,CAAnB;;IACA,IAAI,CAACK,OAAL,EAAc;MACV,OAAO,CAAC,GAAGf,MAAM,CAACa,EAAX,EAAe,IAAf,CAAP;IACH;;IACD,SAASG,SAAT,CAAmB,GAAGC,MAAtB,EAA8B;MAC1B,OAAOA,MAAM,CAACC,IAAP,CAAaC,CAAD,IAAOjB,KAAK,CAACkB,MAAN,CAAaC,YAAb,CAA0BF,CAA1B,CAAnB,KAAoD,IAA3D;IACH;;IACD,MAAMG,QAAQ,GAAGN,SAAS,CAACF,GAAG,CAACQ,QAAL,EAAeP,OAAO,CAACO,QAAvB,CAA1B;;IACA,MAAMC,KAAK,GAAGP,SAAS,CAACF,GAAG,CAACS,KAAL,EAAYR,OAAO,CAACQ,KAApB,CAAvB;;IACA,MAAMC,MAAM,GAAGR,SAAS,CAACF,GAAG,CAACU,MAAL,EAAaT,OAAO,CAACS,MAArB,CAAxB;;IACA,MAAMC,QAAQ,GAAGT,SAAS,CAACF,GAAG,CAACW,QAAL,EAAeV,OAAO,CAACU,QAAvB,CAA1B;;IACA,OAAO,CAAC,GAAGzB,MAAM,CAACa,EAAX,EAAelB,MAAM,CAAC+B,MAAP,CAAcX,OAAO,CAACY,IAAR,CAAaC,SAAb,CAAd,EAAuC;MACzDC,cAAc,EAAE;QACZP,QADY;QAEZC,KAFY;QAGZC,MAHY;QAIZC;MAJY;IADyC,CAAvC,CAAf,CAAP;EAQH;;AA5CuB;;AA8C5B5B,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC"},"metadata":{},"sourceType":"script"}