{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.move = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst base_1 = require(\"./base\");\n\nfunction move(from, to) {\n  if (to === undefined) {\n    to = from;\n    from = '/';\n  }\n\n  const fromPath = (0, core_1.normalize)('/' + from);\n  const toPath = (0, core_1.normalize)('/' + to);\n\n  if (fromPath === toPath) {\n    return base_1.noop;\n  }\n\n  return tree => {\n    if (tree.exists(fromPath)) {\n      // fromPath is a file\n      tree.rename(fromPath, toPath);\n    } else {\n      // fromPath is a directory\n      tree.getDir(fromPath).visit(path => {\n        tree.rename(path, (0, core_1.join)(toPath, path.slice(fromPath.length)));\n      });\n    }\n\n    return tree;\n  };\n}\n\nexports.move = move;","map":{"version":3,"names":["Object","defineProperty","exports","value","move","core_1","require","base_1","from","to","undefined","fromPath","normalize","toPath","noop","tree","exists","rename","getDir","visit","path","join","slice","length"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/schematics/src/rules/move.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.move = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst base_1 = require(\"./base\");\nfunction move(from, to) {\n    if (to === undefined) {\n        to = from;\n        from = '/';\n    }\n    const fromPath = (0, core_1.normalize)('/' + from);\n    const toPath = (0, core_1.normalize)('/' + to);\n    if (fromPath === toPath) {\n        return base_1.noop;\n    }\n    return (tree) => {\n        if (tree.exists(fromPath)) {\n            // fromPath is a file\n            tree.rename(fromPath, toPath);\n        }\n        else {\n            // fromPath is a directory\n            tree.getDir(fromPath).visit((path) => {\n                tree.rename(path, (0, core_1.join)(toPath, path.slice(fromPath.length)));\n            });\n        }\n        return tree;\n    };\n}\nexports.move = move;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,IAAR,GAAe,KAAK,CAApB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,SAASF,IAAT,CAAcI,IAAd,EAAoBC,EAApB,EAAwB;EACpB,IAAIA,EAAE,KAAKC,SAAX,EAAsB;IAClBD,EAAE,GAAGD,IAAL;IACAA,IAAI,GAAG,GAAP;EACH;;EACD,MAAMG,QAAQ,GAAG,CAAC,GAAGN,MAAM,CAACO,SAAX,EAAsB,MAAMJ,IAA5B,CAAjB;EACA,MAAMK,MAAM,GAAG,CAAC,GAAGR,MAAM,CAACO,SAAX,EAAsB,MAAMH,EAA5B,CAAf;;EACA,IAAIE,QAAQ,KAAKE,MAAjB,EAAyB;IACrB,OAAON,MAAM,CAACO,IAAd;EACH;;EACD,OAAQC,IAAD,IAAU;IACb,IAAIA,IAAI,CAACC,MAAL,CAAYL,QAAZ,CAAJ,EAA2B;MACvB;MACAI,IAAI,CAACE,MAAL,CAAYN,QAAZ,EAAsBE,MAAtB;IACH,CAHD,MAIK;MACD;MACAE,IAAI,CAACG,MAAL,CAAYP,QAAZ,EAAsBQ,KAAtB,CAA6BC,IAAD,IAAU;QAClCL,IAAI,CAACE,MAAL,CAAYG,IAAZ,EAAkB,CAAC,GAAGf,MAAM,CAACgB,IAAX,EAAiBR,MAAjB,EAAyBO,IAAI,CAACE,KAAL,CAAWX,QAAQ,CAACY,MAApB,CAAzB,CAAlB;MACH,CAFD;IAGH;;IACD,OAAOR,IAAP;EACH,CAZD;AAaH;;AACDb,OAAO,CAACE,IAAR,GAAeA,IAAf"},"metadata":{},"sourceType":"script"}