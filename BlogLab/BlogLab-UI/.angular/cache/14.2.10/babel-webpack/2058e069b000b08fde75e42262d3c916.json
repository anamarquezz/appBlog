{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n\nprocess.title = 'node-gyp';\n\nconst envPaths = require('env-paths');\n\nconst gyp = require('../');\n\nconst log = require('npmlog');\n\nconst os = require('os');\n/**\n * Process and execute the selected commands.\n */\n\n\nconst prog = gyp();\nvar completed = false;\nprog.parseArgv(process.argv);\nprog.devDir = prog.opts.devdir;\nvar homeDir = os.homedir();\n\nif (prog.devDir) {\n  prog.devDir = prog.devDir.replace(/^~/, homeDir);\n} else if (homeDir) {\n  prog.devDir = envPaths('node-gyp', {\n    suffix: ''\n  }).cache;\n} else {\n  throw new Error(\"node-gyp requires that the user's home directory is specified \" + 'in either of the environmental variables HOME or USERPROFILE. ' + 'Overide with: --devdir /path/to/.node-gyp');\n}\n\nif (prog.todo.length === 0) {\n  if (~process.argv.indexOf('-v') || ~process.argv.indexOf('--version')) {\n    console.log('v%s', prog.version);\n  } else {\n    console.log('%s', prog.usage());\n  }\n\n  process.exit(0);\n}\n\nlog.info('it worked if it ends with', 'ok');\nlog.verbose('cli', process.argv);\nlog.info('using', 'node-gyp@%s', prog.version);\nlog.info('using', 'node@%s | %s | %s', process.versions.node, process.platform, process.arch);\n/**\n * Change dir if -C/--directory was passed.\n */\n\nvar dir = prog.opts.directory;\n\nif (dir) {\n  var fs = require('fs');\n\n  try {\n    var stat = fs.statSync(dir);\n\n    if (stat.isDirectory()) {\n      log.info('chdir', dir);\n      process.chdir(dir);\n    } else {\n      log.warn('chdir', dir + ' is not a directory');\n    }\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      log.warn('chdir', dir + ' is not a directory');\n    } else {\n      log.warn('chdir', 'error during chdir() \"%s\"', e.message);\n    }\n  }\n}\n\nfunction run() {\n  var command = prog.todo.shift();\n\n  if (!command) {\n    // done!\n    completed = true;\n    log.info('ok');\n    return;\n  }\n\n  prog.commands[command.name](command.args, function (err) {\n    if (err) {\n      log.error(command.name + ' error');\n      log.error('stack', err.stack);\n      errorMessage();\n      log.error('not ok');\n      return process.exit(1);\n    }\n\n    if (command.name === 'list') {\n      var versions = arguments[1];\n\n      if (versions.length > 0) {\n        versions.forEach(function (version) {\n          console.log(version);\n        });\n      } else {\n        console.log('No node development files installed. Use `node-gyp install` to install a version.');\n      }\n    } else if (arguments.length >= 2) {\n      console.log.apply(console, [].slice.call(arguments, 1));\n    } // now run the next command in the queue\n\n\n    process.nextTick(run);\n  });\n}\n\nprocess.on('exit', function (code) {\n  if (!completed && !code) {\n    log.error('Completion callback never invoked!');\n    issueMessage();\n    process.exit(6);\n  }\n});\nprocess.on('uncaughtException', function (err) {\n  log.error('UNCAUGHT EXCEPTION');\n  log.error('stack', err.stack);\n  issueMessage();\n  process.exit(7);\n});\n\nfunction errorMessage() {\n  // copied from npm's lib/utils/error-handler.js\n  var os = require('os');\n\n  log.error('System', os.type() + ' ' + os.release());\n  log.error('command', process.argv.map(JSON.stringify).join(' '));\n  log.error('cwd', process.cwd());\n  log.error('node -v', process.version);\n  log.error('node-gyp -v', 'v' + prog.package.version);\n}\n\nfunction issueMessage() {\n  errorMessage();\n  log.error('', ['Node-gyp failed to build your package.', 'Try to update npm and/or node-gyp and if it does not help file an issue with the package author.'].join('\\n'));\n} // start running the given commands!\n\n\nrun();","map":{"version":3,"names":["process","title","envPaths","require","gyp","log","os","prog","completed","parseArgv","argv","devDir","opts","devdir","homeDir","homedir","replace","suffix","cache","Error","todo","length","indexOf","console","version","usage","exit","info","verbose","versions","node","platform","arch","dir","directory","fs","stat","statSync","isDirectory","chdir","warn","e","code","message","run","command","shift","commands","name","args","err","error","stack","errorMessage","arguments","forEach","apply","slice","call","nextTick","on","issueMessage","type","release","map","JSON","stringify","join","cwd","package"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/node-gyp/bin/node-gyp.js"],"sourcesContent":["#!/usr/bin/env node\n\n'use strict'\n\nprocess.title = 'node-gyp'\n\nconst envPaths = require('env-paths')\nconst gyp = require('../')\nconst log = require('npmlog')\nconst os = require('os')\n\n/**\n * Process and execute the selected commands.\n */\n\nconst prog = gyp()\nvar completed = false\nprog.parseArgv(process.argv)\nprog.devDir = prog.opts.devdir\n\nvar homeDir = os.homedir()\nif (prog.devDir) {\n  prog.devDir = prog.devDir.replace(/^~/, homeDir)\n} else if (homeDir) {\n  prog.devDir = envPaths('node-gyp', { suffix: '' }).cache\n} else {\n  throw new Error(\n    \"node-gyp requires that the user's home directory is specified \" +\n    'in either of the environmental variables HOME or USERPROFILE. ' +\n    'Overide with: --devdir /path/to/.node-gyp')\n}\n\nif (prog.todo.length === 0) {\n  if (~process.argv.indexOf('-v') || ~process.argv.indexOf('--version')) {\n    console.log('v%s', prog.version)\n  } else {\n    console.log('%s', prog.usage())\n  }\n  process.exit(0)\n}\n\nlog.info('it worked if it ends with', 'ok')\nlog.verbose('cli', process.argv)\nlog.info('using', 'node-gyp@%s', prog.version)\nlog.info('using', 'node@%s | %s | %s', process.versions.node, process.platform, process.arch)\n\n/**\n * Change dir if -C/--directory was passed.\n */\n\nvar dir = prog.opts.directory\nif (dir) {\n  var fs = require('fs')\n  try {\n    var stat = fs.statSync(dir)\n    if (stat.isDirectory()) {\n      log.info('chdir', dir)\n      process.chdir(dir)\n    } else {\n      log.warn('chdir', dir + ' is not a directory')\n    }\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      log.warn('chdir', dir + ' is not a directory')\n    } else {\n      log.warn('chdir', 'error during chdir() \"%s\"', e.message)\n    }\n  }\n}\n\nfunction run () {\n  var command = prog.todo.shift()\n  if (!command) {\n    // done!\n    completed = true\n    log.info('ok')\n    return\n  }\n\n  prog.commands[command.name](command.args, function (err) {\n    if (err) {\n      log.error(command.name + ' error')\n      log.error('stack', err.stack)\n      errorMessage()\n      log.error('not ok')\n      return process.exit(1)\n    }\n    if (command.name === 'list') {\n      var versions = arguments[1]\n      if (versions.length > 0) {\n        versions.forEach(function (version) {\n          console.log(version)\n        })\n      } else {\n        console.log('No node development files installed. Use `node-gyp install` to install a version.')\n      }\n    } else if (arguments.length >= 2) {\n      console.log.apply(console, [].slice.call(arguments, 1))\n    }\n\n    // now run the next command in the queue\n    process.nextTick(run)\n  })\n}\n\nprocess.on('exit', function (code) {\n  if (!completed && !code) {\n    log.error('Completion callback never invoked!')\n    issueMessage()\n    process.exit(6)\n  }\n})\n\nprocess.on('uncaughtException', function (err) {\n  log.error('UNCAUGHT EXCEPTION')\n  log.error('stack', err.stack)\n  issueMessage()\n  process.exit(7)\n})\n\nfunction errorMessage () {\n  // copied from npm's lib/utils/error-handler.js\n  var os = require('os')\n  log.error('System', os.type() + ' ' + os.release())\n  log.error('command', process.argv\n    .map(JSON.stringify).join(' '))\n  log.error('cwd', process.cwd())\n  log.error('node -v', process.version)\n  log.error('node-gyp -v', 'v' + prog.package.version)\n}\n\nfunction issueMessage () {\n  errorMessage()\n  log.error('', ['Node-gyp failed to build your package.',\n    'Try to update npm and/or node-gyp and if it does not help file an issue with the package author.'\n  ].join('\\n'))\n}\n\n// start running the given commands!\nrun()\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}