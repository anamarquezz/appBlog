{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst MiniPass = require('minipass');\n\nconst SPEC_ALGORITHMS = ['sha256', 'sha384', 'sha512']; // TODO: this should really be a hardcoded list of algorithms we support,\n// rather than [a-z0-9].\n\nconst BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i;\nconst SRI_REGEX = /^([a-z0-9]+)-([^?]+)([?\\S*]*)$/;\nconst STRICT_SRI_REGEX = /^([a-z0-9]+)-([A-Za-z0-9+/=]{44,88})(\\?[\\x21-\\x7E]*)?$/;\nconst VCHAR_REGEX = /^[\\x21-\\x7E]+$/;\nconst defaultOpts = {\n  algorithms: ['sha512'],\n  error: false,\n  options: [],\n  pickAlgorithm: getPrioritizedHash,\n  sep: ' ',\n  single: false,\n  strict: false\n};\n\nconst ssriOpts = (opts = {}) => ({ ...defaultOpts,\n  ...opts\n});\n\nconst getOptString = options => !options || !options.length ? '' : `?${options.join('?')}`;\n\nconst _onEnd = Symbol('_onEnd');\n\nconst _getOptions = Symbol('_getOptions');\n\nconst _emittedSize = Symbol('_emittedSize');\n\nconst _emittedIntegrity = Symbol('_emittedIntegrity');\n\nconst _emittedVerified = Symbol('_emittedVerified');\n\nclass IntegrityStream extends MiniPass {\n  constructor(opts) {\n    super();\n    this.size = 0;\n    this.opts = opts; // may be overridden later, but set now for class consistency\n\n    this[_getOptions](); // options used for calculating stream.  can't be changed.\n\n\n    const {\n      algorithms = defaultOpts.algorithms\n    } = opts;\n    this.algorithms = Array.from(new Set(algorithms.concat(this.algorithm ? [this.algorithm] : [])));\n    this.hashes = this.algorithms.map(crypto.createHash);\n  }\n\n  [_getOptions]() {\n    const {\n      integrity,\n      size,\n      options\n    } = { ...defaultOpts,\n      ...this.opts\n    }; // For verification\n\n    this.sri = integrity ? parse(integrity, this.opts) : null;\n    this.expectedSize = size;\n    this.goodSri = this.sri ? !!Object.keys(this.sri).length : false;\n    this.algorithm = this.goodSri ? this.sri.pickAlgorithm(this.opts) : null;\n    this.digests = this.goodSri ? this.sri[this.algorithm] : null;\n    this.optString = getOptString(options);\n  }\n\n  on(ev, handler) {\n    if (ev === 'size' && this[_emittedSize]) {\n      return handler(this[_emittedSize]);\n    }\n\n    if (ev === 'integrity' && this[_emittedIntegrity]) {\n      return handler(this[_emittedIntegrity]);\n    }\n\n    if (ev === 'verified' && this[_emittedVerified]) {\n      return handler(this[_emittedVerified]);\n    }\n\n    return super.on(ev, handler);\n  }\n\n  emit(ev, data) {\n    if (ev === 'end') {\n      this[_onEnd]();\n    }\n\n    return super.emit(ev, data);\n  }\n\n  write(data) {\n    this.size += data.length;\n    this.hashes.forEach(h => h.update(data));\n    return super.write(data);\n  }\n\n  [_onEnd]() {\n    if (!this.goodSri) {\n      this[_getOptions]();\n    }\n\n    const newSri = parse(this.hashes.map((h, i) => {\n      return `${this.algorithms[i]}-${h.digest('base64')}${this.optString}`;\n    }).join(' '), this.opts); // Integrity verification mode\n\n    const match = this.goodSri && newSri.match(this.sri, this.opts);\n\n    if (typeof this.expectedSize === 'number' && this.size !== this.expectedSize) {\n      /* eslint-disable-next-line max-len */\n      const err = new Error(`stream size mismatch when checking ${this.sri}.\\n  Wanted: ${this.expectedSize}\\n  Found: ${this.size}`);\n      err.code = 'EBADSIZE';\n      err.found = this.size;\n      err.expected = this.expectedSize;\n      err.sri = this.sri;\n      this.emit('error', err);\n    } else if (this.sri && !match) {\n      /* eslint-disable-next-line max-len */\n      const err = new Error(`${this.sri} integrity checksum failed when using ${this.algorithm}: wanted ${this.digests} but got ${newSri}. (${this.size} bytes)`);\n      err.code = 'EINTEGRITY';\n      err.found = newSri;\n      err.expected = this.digests;\n      err.algorithm = this.algorithm;\n      err.sri = this.sri;\n      this.emit('error', err);\n    } else {\n      this[_emittedSize] = this.size;\n      this.emit('size', this.size);\n      this[_emittedIntegrity] = newSri;\n      this.emit('integrity', newSri);\n\n      if (match) {\n        this[_emittedVerified] = match;\n        this.emit('verified', match);\n      }\n    }\n  }\n\n}\n\nclass Hash {\n  get isHash() {\n    return true;\n  }\n\n  constructor(hash, opts) {\n    opts = ssriOpts(opts);\n    const strict = !!opts.strict;\n    this.source = hash.trim(); // set default values so that we make V8 happy to\n    // always see a familiar object template.\n\n    this.digest = '';\n    this.algorithm = '';\n    this.options = []; // 3.1. Integrity metadata (called \"Hash\" by ssri)\n    // https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description\n\n    const match = this.source.match(strict ? STRICT_SRI_REGEX : SRI_REGEX);\n\n    if (!match) {\n      return;\n    }\n\n    if (strict && !SPEC_ALGORITHMS.some(a => a === match[1])) {\n      return;\n    }\n\n    this.algorithm = match[1];\n    this.digest = match[2];\n    const rawOpts = match[3];\n\n    if (rawOpts) {\n      this.options = rawOpts.slice(1).split('?');\n    }\n  }\n\n  hexDigest() {\n    return this.digest && Buffer.from(this.digest, 'base64').toString('hex');\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString(opts) {\n    opts = ssriOpts(opts);\n\n    if (opts.strict) {\n      // Strict mode enforces the standard as close to the foot of the\n      // letter as it can.\n      if (!( // The spec has very restricted productions for algorithms.\n      // https://www.w3.org/TR/CSP2/#source-list-syntax\n      SPEC_ALGORITHMS.some(x => x === this.algorithm) && // Usually, if someone insists on using a \"different\" base64, we\n      // leave it as-is, since there's multiple standards, and the\n      // specified is not a URL-safe variant.\n      // https://www.w3.org/TR/CSP2/#base64_value\n      this.digest.match(BASE64_REGEX) && // Option syntax is strictly visual chars.\n      // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-option-expression\n      // https://tools.ietf.org/html/rfc5234#appendix-B.1\n      this.options.every(opt => opt.match(VCHAR_REGEX)))) {\n        return '';\n      }\n    }\n\n    const options = this.options && this.options.length ? `?${this.options.join('?')}` : '';\n    return `${this.algorithm}-${this.digest}${options}`;\n  }\n\n}\n\nclass Integrity {\n  get isIntegrity() {\n    return true;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  isEmpty() {\n    return Object.keys(this).length === 0;\n  }\n\n  toString(opts) {\n    opts = ssriOpts(opts);\n    let sep = opts.sep || ' ';\n\n    if (opts.strict) {\n      // Entries must be separated by whitespace, according to spec.\n      sep = sep.replace(/\\S+/g, ' ');\n    }\n\n    return Object.keys(this).map(k => {\n      return this[k].map(hash => {\n        return Hash.prototype.toString.call(hash, opts);\n      }).filter(x => x.length).join(sep);\n    }).filter(x => x.length).join(sep);\n  }\n\n  concat(integrity, opts) {\n    opts = ssriOpts(opts);\n    const other = typeof integrity === 'string' ? integrity : stringify(integrity, opts);\n    return parse(`${this.toString(opts)} ${other}`, opts);\n  }\n\n  hexDigest() {\n    return parse(this, {\n      single: true\n    }).hexDigest();\n  } // add additional hashes to an integrity value, but prevent\n  // *changing* an existing integrity hash.\n\n\n  merge(integrity, opts) {\n    opts = ssriOpts(opts);\n    const other = parse(integrity, opts);\n\n    for (const algo in other) {\n      if (this[algo]) {\n        if (!this[algo].find(hash => other[algo].find(otherhash => hash.digest === otherhash.digest))) {\n          throw new Error('hashes do not match, cannot update integrity');\n        }\n      } else {\n        this[algo] = other[algo];\n      }\n    }\n  }\n\n  match(integrity, opts) {\n    opts = ssriOpts(opts);\n    const other = parse(integrity, opts);\n    const algo = other.pickAlgorithm(opts);\n    return this[algo] && other[algo] && this[algo].find(hash => other[algo].find(otherhash => hash.digest === otherhash.digest)) || false;\n  }\n\n  pickAlgorithm(opts) {\n    opts = ssriOpts(opts);\n    const pickAlgorithm = opts.pickAlgorithm;\n    const keys = Object.keys(this);\n    return keys.reduce((acc, algo) => {\n      return pickAlgorithm(acc, algo) || acc;\n    });\n  }\n\n}\n\nmodule.exports.parse = parse;\n\nfunction parse(sri, opts) {\n  if (!sri) {\n    return null;\n  }\n\n  opts = ssriOpts(opts);\n\n  if (typeof sri === 'string') {\n    return _parse(sri, opts);\n  } else if (sri.algorithm && sri.digest) {\n    const fullSri = new Integrity();\n    fullSri[sri.algorithm] = [sri];\n    return _parse(stringify(fullSri, opts), opts);\n  } else {\n    return _parse(stringify(sri, opts), opts);\n  }\n}\n\nfunction _parse(integrity, opts) {\n  // 3.4.3. Parse metadata\n  // https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n  if (opts.single) {\n    return new Hash(integrity, opts);\n  }\n\n  const hashes = integrity.trim().split(/\\s+/).reduce((acc, string) => {\n    const hash = new Hash(string, opts);\n\n    if (hash.algorithm && hash.digest) {\n      const algo = hash.algorithm;\n\n      if (!acc[algo]) {\n        acc[algo] = [];\n      }\n\n      acc[algo].push(hash);\n    }\n\n    return acc;\n  }, new Integrity());\n  return hashes.isEmpty() ? null : hashes;\n}\n\nmodule.exports.stringify = stringify;\n\nfunction stringify(obj, opts) {\n  opts = ssriOpts(opts);\n\n  if (obj.algorithm && obj.digest) {\n    return Hash.prototype.toString.call(obj, opts);\n  } else if (typeof obj === 'string') {\n    return stringify(parse(obj, opts), opts);\n  } else {\n    return Integrity.prototype.toString.call(obj, opts);\n  }\n}\n\nmodule.exports.fromHex = fromHex;\n\nfunction fromHex(hexDigest, algorithm, opts) {\n  opts = ssriOpts(opts);\n  const optString = getOptString(opts.options);\n  return parse(`${algorithm}-${Buffer.from(hexDigest, 'hex').toString('base64')}${optString}`, opts);\n}\n\nmodule.exports.fromData = fromData;\n\nfunction fromData(data, opts) {\n  opts = ssriOpts(opts);\n  const algorithms = opts.algorithms;\n  const optString = getOptString(opts.options);\n  return algorithms.reduce((acc, algo) => {\n    const digest = crypto.createHash(algo).update(data).digest('base64');\n    const hash = new Hash(`${algo}-${digest}${optString}`, opts);\n    /* istanbul ignore else - it would be VERY strange if the string we\n     * just calculated with an algo did not have an algo or digest.\n     */\n\n    if (hash.algorithm && hash.digest) {\n      const hashAlgo = hash.algorithm;\n\n      if (!acc[hashAlgo]) {\n        acc[hashAlgo] = [];\n      }\n\n      acc[hashAlgo].push(hash);\n    }\n\n    return acc;\n  }, new Integrity());\n}\n\nmodule.exports.fromStream = fromStream;\n\nfunction fromStream(stream, opts) {\n  opts = ssriOpts(opts);\n  const istream = integrityStream(opts);\n  return new Promise((resolve, reject) => {\n    stream.pipe(istream);\n    stream.on('error', reject);\n    istream.on('error', reject);\n    let sri;\n    istream.on('integrity', s => {\n      sri = s;\n    });\n    istream.on('end', () => resolve(sri));\n    istream.on('data', () => {});\n  });\n}\n\nmodule.exports.checkData = checkData;\n\nfunction checkData(data, sri, opts) {\n  opts = ssriOpts(opts);\n  sri = parse(sri, opts);\n\n  if (!sri || !Object.keys(sri).length) {\n    if (opts.error) {\n      throw Object.assign(new Error('No valid integrity hashes to check against'), {\n        code: 'EINTEGRITY'\n      });\n    } else {\n      return false;\n    }\n  }\n\n  const algorithm = sri.pickAlgorithm(opts);\n  const digest = crypto.createHash(algorithm).update(data).digest('base64');\n  const newSri = parse({\n    algorithm,\n    digest\n  });\n  const match = newSri.match(sri, opts);\n\n  if (match || !opts.error) {\n    return match;\n  } else if (typeof opts.size === 'number' && data.length !== opts.size) {\n    /* eslint-disable-next-line max-len */\n    const err = new Error(`data size mismatch when checking ${sri}.\\n  Wanted: ${opts.size}\\n  Found: ${data.length}`);\n    err.code = 'EBADSIZE';\n    err.found = data.length;\n    err.expected = opts.size;\n    err.sri = sri;\n    throw err;\n  } else {\n    /* eslint-disable-next-line max-len */\n    const err = new Error(`Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`);\n    err.code = 'EINTEGRITY';\n    err.found = newSri;\n    err.expected = sri;\n    err.algorithm = algorithm;\n    err.sri = sri;\n    throw err;\n  }\n}\n\nmodule.exports.checkStream = checkStream;\n\nfunction checkStream(stream, sri, opts) {\n  opts = ssriOpts(opts);\n  opts.integrity = sri;\n  sri = parse(sri, opts);\n\n  if (!sri || !Object.keys(sri).length) {\n    return Promise.reject(Object.assign(new Error('No valid integrity hashes to check against'), {\n      code: 'EINTEGRITY'\n    }));\n  }\n\n  const checker = integrityStream(opts);\n  return new Promise((resolve, reject) => {\n    stream.pipe(checker);\n    stream.on('error', reject);\n    checker.on('error', reject);\n    let verified;\n    checker.on('verified', s => {\n      verified = s;\n    });\n    checker.on('end', () => resolve(verified));\n    checker.on('data', () => {});\n  });\n}\n\nmodule.exports.integrityStream = integrityStream;\n\nfunction integrityStream(opts = {}) {\n  return new IntegrityStream(opts);\n}\n\nmodule.exports.create = createIntegrity;\n\nfunction createIntegrity(opts) {\n  opts = ssriOpts(opts);\n  const algorithms = opts.algorithms;\n  const optString = getOptString(opts.options);\n  const hashes = algorithms.map(crypto.createHash);\n  return {\n    update: function (chunk, enc) {\n      hashes.forEach(h => h.update(chunk, enc));\n      return this;\n    },\n    digest: function (enc) {\n      const integrity = algorithms.reduce((acc, algo) => {\n        const digest = hashes.shift().digest('base64');\n        const hash = new Hash(`${algo}-${digest}${optString}`, opts);\n        /* istanbul ignore else - it would be VERY strange if the hash we\n         * just calculated with an algo did not have an algo or digest.\n         */\n\n        if (hash.algorithm && hash.digest) {\n          const hashAlgo = hash.algorithm;\n\n          if (!acc[hashAlgo]) {\n            acc[hashAlgo] = [];\n          }\n\n          acc[hashAlgo].push(hash);\n        }\n\n        return acc;\n      }, new Integrity());\n      return integrity;\n    }\n  };\n}\n\nconst NODE_HASHES = new Set(crypto.getHashes()); // This is a Best Effort™ at a reasonable priority for hash algos\n\nconst DEFAULT_PRIORITY = ['md5', 'whirlpool', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', // TODO - it's unclear _which_ of these Node will actually use as its name\n//        for the algorithm, so we guesswork it based on the OpenSSL names.\n'sha3', 'sha3-256', 'sha3-384', 'sha3-512', 'sha3_256', 'sha3_384', 'sha3_512'].filter(algo => NODE_HASHES.has(algo));\n\nfunction getPrioritizedHash(algo1, algo2) {\n  /* eslint-disable-next-line max-len */\n  return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase()) ? algo1 : algo2;\n}","map":{"version":3,"names":["crypto","require","MiniPass","SPEC_ALGORITHMS","BASE64_REGEX","SRI_REGEX","STRICT_SRI_REGEX","VCHAR_REGEX","defaultOpts","algorithms","error","options","pickAlgorithm","getPrioritizedHash","sep","single","strict","ssriOpts","opts","getOptString","length","join","_onEnd","Symbol","_getOptions","_emittedSize","_emittedIntegrity","_emittedVerified","IntegrityStream","constructor","size","Array","from","Set","concat","algorithm","hashes","map","createHash","integrity","sri","parse","expectedSize","goodSri","Object","keys","digests","optString","on","ev","handler","emit","data","write","forEach","h","update","newSri","i","digest","match","err","Error","code","found","expected","Hash","isHash","hash","source","trim","some","a","rawOpts","slice","split","hexDigest","Buffer","toString","toJSON","x","every","opt","Integrity","isIntegrity","isEmpty","replace","k","prototype","call","filter","other","stringify","merge","algo","find","otherhash","reduce","acc","module","exports","_parse","fullSri","string","push","obj","fromHex","fromData","hashAlgo","fromStream","stream","istream","integrityStream","Promise","resolve","reject","pipe","s","checkData","assign","checkStream","checker","verified","create","createIntegrity","chunk","enc","shift","NODE_HASHES","getHashes","DEFAULT_PRIORITY","has","algo1","algo2","indexOf","toLowerCase"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/ssri/lib/index.js"],"sourcesContent":["'use strict'\n\nconst crypto = require('crypto')\nconst MiniPass = require('minipass')\n\nconst SPEC_ALGORITHMS = ['sha256', 'sha384', 'sha512']\n\n// TODO: this should really be a hardcoded list of algorithms we support,\n// rather than [a-z0-9].\nconst BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i\nconst SRI_REGEX = /^([a-z0-9]+)-([^?]+)([?\\S*]*)$/\nconst STRICT_SRI_REGEX = /^([a-z0-9]+)-([A-Za-z0-9+/=]{44,88})(\\?[\\x21-\\x7E]*)?$/\nconst VCHAR_REGEX = /^[\\x21-\\x7E]+$/\n\nconst defaultOpts = {\n  algorithms: ['sha512'],\n  error: false,\n  options: [],\n  pickAlgorithm: getPrioritizedHash,\n  sep: ' ',\n  single: false,\n  strict: false,\n}\n\nconst ssriOpts = (opts = {}) => ({ ...defaultOpts, ...opts })\n\nconst getOptString = options => !options || !options.length\n  ? ''\n  : `?${options.join('?')}`\n\nconst _onEnd = Symbol('_onEnd')\nconst _getOptions = Symbol('_getOptions')\nconst _emittedSize = Symbol('_emittedSize')\nconst _emittedIntegrity = Symbol('_emittedIntegrity')\nconst _emittedVerified = Symbol('_emittedVerified')\n\nclass IntegrityStream extends MiniPass {\n  constructor (opts) {\n    super()\n    this.size = 0\n    this.opts = opts\n\n    // may be overridden later, but set now for class consistency\n    this[_getOptions]()\n\n    // options used for calculating stream.  can't be changed.\n    const { algorithms = defaultOpts.algorithms } = opts\n    this.algorithms = Array.from(\n      new Set(algorithms.concat(this.algorithm ? [this.algorithm] : []))\n    )\n    this.hashes = this.algorithms.map(crypto.createHash)\n  }\n\n  [_getOptions] () {\n    const {\n      integrity,\n      size,\n      options,\n    } = { ...defaultOpts, ...this.opts }\n\n    // For verification\n    this.sri = integrity ? parse(integrity, this.opts) : null\n    this.expectedSize = size\n    this.goodSri = this.sri ? !!Object.keys(this.sri).length : false\n    this.algorithm = this.goodSri ? this.sri.pickAlgorithm(this.opts) : null\n    this.digests = this.goodSri ? this.sri[this.algorithm] : null\n    this.optString = getOptString(options)\n  }\n\n  on (ev, handler) {\n    if (ev === 'size' && this[_emittedSize]) {\n      return handler(this[_emittedSize])\n    }\n\n    if (ev === 'integrity' && this[_emittedIntegrity]) {\n      return handler(this[_emittedIntegrity])\n    }\n\n    if (ev === 'verified' && this[_emittedVerified]) {\n      return handler(this[_emittedVerified])\n    }\n\n    return super.on(ev, handler)\n  }\n\n  emit (ev, data) {\n    if (ev === 'end') {\n      this[_onEnd]()\n    }\n    return super.emit(ev, data)\n  }\n\n  write (data) {\n    this.size += data.length\n    this.hashes.forEach(h => h.update(data))\n    return super.write(data)\n  }\n\n  [_onEnd] () {\n    if (!this.goodSri) {\n      this[_getOptions]()\n    }\n    const newSri = parse(this.hashes.map((h, i) => {\n      return `${this.algorithms[i]}-${h.digest('base64')}${this.optString}`\n    }).join(' '), this.opts)\n    // Integrity verification mode\n    const match = this.goodSri && newSri.match(this.sri, this.opts)\n    if (typeof this.expectedSize === 'number' && this.size !== this.expectedSize) {\n      /* eslint-disable-next-line max-len */\n      const err = new Error(`stream size mismatch when checking ${this.sri}.\\n  Wanted: ${this.expectedSize}\\n  Found: ${this.size}`)\n      err.code = 'EBADSIZE'\n      err.found = this.size\n      err.expected = this.expectedSize\n      err.sri = this.sri\n      this.emit('error', err)\n    } else if (this.sri && !match) {\n      /* eslint-disable-next-line max-len */\n      const err = new Error(`${this.sri} integrity checksum failed when using ${this.algorithm}: wanted ${this.digests} but got ${newSri}. (${this.size} bytes)`)\n      err.code = 'EINTEGRITY'\n      err.found = newSri\n      err.expected = this.digests\n      err.algorithm = this.algorithm\n      err.sri = this.sri\n      this.emit('error', err)\n    } else {\n      this[_emittedSize] = this.size\n      this.emit('size', this.size)\n      this[_emittedIntegrity] = newSri\n      this.emit('integrity', newSri)\n      if (match) {\n        this[_emittedVerified] = match\n        this.emit('verified', match)\n      }\n    }\n  }\n}\n\nclass Hash {\n  get isHash () {\n    return true\n  }\n\n  constructor (hash, opts) {\n    opts = ssriOpts(opts)\n    const strict = !!opts.strict\n    this.source = hash.trim()\n\n    // set default values so that we make V8 happy to\n    // always see a familiar object template.\n    this.digest = ''\n    this.algorithm = ''\n    this.options = []\n\n    // 3.1. Integrity metadata (called \"Hash\" by ssri)\n    // https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description\n    const match = this.source.match(\n      strict\n        ? STRICT_SRI_REGEX\n        : SRI_REGEX\n    )\n    if (!match) {\n      return\n    }\n    if (strict && !SPEC_ALGORITHMS.some(a => a === match[1])) {\n      return\n    }\n    this.algorithm = match[1]\n    this.digest = match[2]\n\n    const rawOpts = match[3]\n    if (rawOpts) {\n      this.options = rawOpts.slice(1).split('?')\n    }\n  }\n\n  hexDigest () {\n    return this.digest && Buffer.from(this.digest, 'base64').toString('hex')\n  }\n\n  toJSON () {\n    return this.toString()\n  }\n\n  toString (opts) {\n    opts = ssriOpts(opts)\n    if (opts.strict) {\n      // Strict mode enforces the standard as close to the foot of the\n      // letter as it can.\n      if (!(\n        // The spec has very restricted productions for algorithms.\n        // https://www.w3.org/TR/CSP2/#source-list-syntax\n        SPEC_ALGORITHMS.some(x => x === this.algorithm) &&\n        // Usually, if someone insists on using a \"different\" base64, we\n        // leave it as-is, since there's multiple standards, and the\n        // specified is not a URL-safe variant.\n        // https://www.w3.org/TR/CSP2/#base64_value\n        this.digest.match(BASE64_REGEX) &&\n        // Option syntax is strictly visual chars.\n        // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-option-expression\n        // https://tools.ietf.org/html/rfc5234#appendix-B.1\n        this.options.every(opt => opt.match(VCHAR_REGEX))\n      )) {\n        return ''\n      }\n    }\n    const options = this.options && this.options.length\n      ? `?${this.options.join('?')}`\n      : ''\n    return `${this.algorithm}-${this.digest}${options}`\n  }\n}\n\nclass Integrity {\n  get isIntegrity () {\n    return true\n  }\n\n  toJSON () {\n    return this.toString()\n  }\n\n  isEmpty () {\n    return Object.keys(this).length === 0\n  }\n\n  toString (opts) {\n    opts = ssriOpts(opts)\n    let sep = opts.sep || ' '\n    if (opts.strict) {\n      // Entries must be separated by whitespace, according to spec.\n      sep = sep.replace(/\\S+/g, ' ')\n    }\n    return Object.keys(this).map(k => {\n      return this[k].map(hash => {\n        return Hash.prototype.toString.call(hash, opts)\n      }).filter(x => x.length).join(sep)\n    }).filter(x => x.length).join(sep)\n  }\n\n  concat (integrity, opts) {\n    opts = ssriOpts(opts)\n    const other = typeof integrity === 'string'\n      ? integrity\n      : stringify(integrity, opts)\n    return parse(`${this.toString(opts)} ${other}`, opts)\n  }\n\n  hexDigest () {\n    return parse(this, { single: true }).hexDigest()\n  }\n\n  // add additional hashes to an integrity value, but prevent\n  // *changing* an existing integrity hash.\n  merge (integrity, opts) {\n    opts = ssriOpts(opts)\n    const other = parse(integrity, opts)\n    for (const algo in other) {\n      if (this[algo]) {\n        if (!this[algo].find(hash =>\n          other[algo].find(otherhash =>\n            hash.digest === otherhash.digest))) {\n          throw new Error('hashes do not match, cannot update integrity')\n        }\n      } else {\n        this[algo] = other[algo]\n      }\n    }\n  }\n\n  match (integrity, opts) {\n    opts = ssriOpts(opts)\n    const other = parse(integrity, opts)\n    const algo = other.pickAlgorithm(opts)\n    return (\n      this[algo] &&\n      other[algo] &&\n      this[algo].find(hash =>\n        other[algo].find(otherhash =>\n          hash.digest === otherhash.digest\n        )\n      )\n    ) || false\n  }\n\n  pickAlgorithm (opts) {\n    opts = ssriOpts(opts)\n    const pickAlgorithm = opts.pickAlgorithm\n    const keys = Object.keys(this)\n    return keys.reduce((acc, algo) => {\n      return pickAlgorithm(acc, algo) || acc\n    })\n  }\n}\n\nmodule.exports.parse = parse\nfunction parse (sri, opts) {\n  if (!sri) {\n    return null\n  }\n  opts = ssriOpts(opts)\n  if (typeof sri === 'string') {\n    return _parse(sri, opts)\n  } else if (sri.algorithm && sri.digest) {\n    const fullSri = new Integrity()\n    fullSri[sri.algorithm] = [sri]\n    return _parse(stringify(fullSri, opts), opts)\n  } else {\n    return _parse(stringify(sri, opts), opts)\n  }\n}\n\nfunction _parse (integrity, opts) {\n  // 3.4.3. Parse metadata\n  // https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n  if (opts.single) {\n    return new Hash(integrity, opts)\n  }\n  const hashes = integrity.trim().split(/\\s+/).reduce((acc, string) => {\n    const hash = new Hash(string, opts)\n    if (hash.algorithm && hash.digest) {\n      const algo = hash.algorithm\n      if (!acc[algo]) {\n        acc[algo] = []\n      }\n      acc[algo].push(hash)\n    }\n    return acc\n  }, new Integrity())\n  return hashes.isEmpty() ? null : hashes\n}\n\nmodule.exports.stringify = stringify\nfunction stringify (obj, opts) {\n  opts = ssriOpts(opts)\n  if (obj.algorithm && obj.digest) {\n    return Hash.prototype.toString.call(obj, opts)\n  } else if (typeof obj === 'string') {\n    return stringify(parse(obj, opts), opts)\n  } else {\n    return Integrity.prototype.toString.call(obj, opts)\n  }\n}\n\nmodule.exports.fromHex = fromHex\nfunction fromHex (hexDigest, algorithm, opts) {\n  opts = ssriOpts(opts)\n  const optString = getOptString(opts.options)\n  return parse(\n    `${algorithm}-${\n      Buffer.from(hexDigest, 'hex').toString('base64')\n    }${optString}`, opts\n  )\n}\n\nmodule.exports.fromData = fromData\nfunction fromData (data, opts) {\n  opts = ssriOpts(opts)\n  const algorithms = opts.algorithms\n  const optString = getOptString(opts.options)\n  return algorithms.reduce((acc, algo) => {\n    const digest = crypto.createHash(algo).update(data).digest('base64')\n    const hash = new Hash(\n      `${algo}-${digest}${optString}`,\n      opts\n    )\n    /* istanbul ignore else - it would be VERY strange if the string we\n     * just calculated with an algo did not have an algo or digest.\n     */\n    if (hash.algorithm && hash.digest) {\n      const hashAlgo = hash.algorithm\n      if (!acc[hashAlgo]) {\n        acc[hashAlgo] = []\n      }\n      acc[hashAlgo].push(hash)\n    }\n    return acc\n  }, new Integrity())\n}\n\nmodule.exports.fromStream = fromStream\nfunction fromStream (stream, opts) {\n  opts = ssriOpts(opts)\n  const istream = integrityStream(opts)\n  return new Promise((resolve, reject) => {\n    stream.pipe(istream)\n    stream.on('error', reject)\n    istream.on('error', reject)\n    let sri\n    istream.on('integrity', s => {\n      sri = s\n    })\n    istream.on('end', () => resolve(sri))\n    istream.on('data', () => {})\n  })\n}\n\nmodule.exports.checkData = checkData\nfunction checkData (data, sri, opts) {\n  opts = ssriOpts(opts)\n  sri = parse(sri, opts)\n  if (!sri || !Object.keys(sri).length) {\n    if (opts.error) {\n      throw Object.assign(\n        new Error('No valid integrity hashes to check against'), {\n          code: 'EINTEGRITY',\n        }\n      )\n    } else {\n      return false\n    }\n  }\n  const algorithm = sri.pickAlgorithm(opts)\n  const digest = crypto.createHash(algorithm).update(data).digest('base64')\n  const newSri = parse({ algorithm, digest })\n  const match = newSri.match(sri, opts)\n  if (match || !opts.error) {\n    return match\n  } else if (typeof opts.size === 'number' && (data.length !== opts.size)) {\n    /* eslint-disable-next-line max-len */\n    const err = new Error(`data size mismatch when checking ${sri}.\\n  Wanted: ${opts.size}\\n  Found: ${data.length}`)\n    err.code = 'EBADSIZE'\n    err.found = data.length\n    err.expected = opts.size\n    err.sri = sri\n    throw err\n  } else {\n    /* eslint-disable-next-line max-len */\n    const err = new Error(`Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`)\n    err.code = 'EINTEGRITY'\n    err.found = newSri\n    err.expected = sri\n    err.algorithm = algorithm\n    err.sri = sri\n    throw err\n  }\n}\n\nmodule.exports.checkStream = checkStream\nfunction checkStream (stream, sri, opts) {\n  opts = ssriOpts(opts)\n  opts.integrity = sri\n  sri = parse(sri, opts)\n  if (!sri || !Object.keys(sri).length) {\n    return Promise.reject(Object.assign(\n      new Error('No valid integrity hashes to check against'), {\n        code: 'EINTEGRITY',\n      }\n    ))\n  }\n  const checker = integrityStream(opts)\n  return new Promise((resolve, reject) => {\n    stream.pipe(checker)\n    stream.on('error', reject)\n    checker.on('error', reject)\n    let verified\n    checker.on('verified', s => {\n      verified = s\n    })\n    checker.on('end', () => resolve(verified))\n    checker.on('data', () => {})\n  })\n}\n\nmodule.exports.integrityStream = integrityStream\nfunction integrityStream (opts = {}) {\n  return new IntegrityStream(opts)\n}\n\nmodule.exports.create = createIntegrity\nfunction createIntegrity (opts) {\n  opts = ssriOpts(opts)\n  const algorithms = opts.algorithms\n  const optString = getOptString(opts.options)\n\n  const hashes = algorithms.map(crypto.createHash)\n\n  return {\n    update: function (chunk, enc) {\n      hashes.forEach(h => h.update(chunk, enc))\n      return this\n    },\n    digest: function (enc) {\n      const integrity = algorithms.reduce((acc, algo) => {\n        const digest = hashes.shift().digest('base64')\n        const hash = new Hash(\n          `${algo}-${digest}${optString}`,\n          opts\n        )\n        /* istanbul ignore else - it would be VERY strange if the hash we\n         * just calculated with an algo did not have an algo or digest.\n         */\n        if (hash.algorithm && hash.digest) {\n          const hashAlgo = hash.algorithm\n          if (!acc[hashAlgo]) {\n            acc[hashAlgo] = []\n          }\n          acc[hashAlgo].push(hash)\n        }\n        return acc\n      }, new Integrity())\n\n      return integrity\n    },\n  }\n}\n\nconst NODE_HASHES = new Set(crypto.getHashes())\n\n// This is a Best Effort™ at a reasonable priority for hash algos\nconst DEFAULT_PRIORITY = [\n  'md5', 'whirlpool', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512',\n  // TODO - it's unclear _which_ of these Node will actually use as its name\n  //        for the algorithm, so we guesswork it based on the OpenSSL names.\n  'sha3',\n  'sha3-256', 'sha3-384', 'sha3-512',\n  'sha3_256', 'sha3_384', 'sha3_512',\n].filter(algo => NODE_HASHES.has(algo))\n\nfunction getPrioritizedHash (algo1, algo2) {\n  /* eslint-disable-next-line max-len */\n  return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase())\n    ? algo1\n    : algo2\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}