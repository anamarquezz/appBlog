{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseWorkflow = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst engine_1 = require(\"../engine\");\n\nconst exception_1 = require(\"../exception/exception\");\n\nconst formats_1 = require(\"../formats\");\n\nconst dryrun_1 = require(\"../sink/dryrun\");\n\nconst host_1 = require(\"../sink/host\");\n\nconst host_tree_1 = require(\"../tree/host-tree\");\n/**\n * Base class for workflows. Even without abstract methods, this class should not be used without\n * surrounding some initialization for the registry and host. This class only adds life cycle and\n * dryrun/force support. You need to provide any registry and task executors that you need to\n * support.\n * See {@see NodeWorkflow} implementation for how to make a specialized subclass of this.\n * TODO: add default set of CoreSchemaRegistry transforms. Once the job refactor is done, use that\n *       as the support for tasks.\n *\n * @public\n */\n\n\nclass BaseWorkflow {\n  constructor(options) {\n    this._reporter = new rxjs_1.Subject();\n    this._lifeCycle = new rxjs_1.Subject();\n    this._host = options.host;\n    this._engineHost = options.engineHost;\n\n    if (options.registry) {\n      this._registry = options.registry;\n    } else {\n      this._registry = new core_1.schema.CoreSchemaRegistry(formats_1.standardFormats);\n\n      this._registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);\n    }\n\n    this._engine = new engine_1.SchematicEngine(this._engineHost, this);\n    this._context = [];\n    this._force = options.force || false;\n    this._dryRun = options.dryRun || false;\n  }\n\n  get context() {\n    const maybeContext = this._context[this._context.length - 1];\n\n    if (!maybeContext) {\n      throw new Error('Cannot get context when workflow is not executing...');\n    }\n\n    return maybeContext;\n  }\n\n  get engine() {\n    return this._engine;\n  }\n\n  get engineHost() {\n    return this._engineHost;\n  }\n\n  get registry() {\n    return this._registry;\n  }\n\n  get reporter() {\n    return this._reporter.asObservable();\n  }\n\n  get lifeCycle() {\n    return this._lifeCycle.asObservable();\n  }\n\n  _createSinks() {\n    let error = false;\n    const dryRunSink = new dryrun_1.DryRunSink(this._host, this._force);\n    const dryRunSubscriber = dryRunSink.reporter.subscribe(event => {\n      this._reporter.next(event);\n\n      error = error || event.kind == 'error';\n    }); // We need two sinks if we want to output what will happen, and actually do the work.\n\n    return [dryRunSink, // Add a custom sink that clean ourselves and throws an error if an error happened.\n    {\n      commit() {\n        dryRunSubscriber.unsubscribe();\n\n        if (error) {\n          return (0, rxjs_1.throwError)(new exception_1.UnsuccessfulWorkflowExecution());\n        }\n\n        return (0, rxjs_1.of)();\n      }\n\n    }, // Only add a HostSink if this is not a dryRun.\n    ...(!this._dryRun ? [new host_1.HostSink(this._host, this._force)] : [])];\n  }\n\n  execute(options) {\n    const parentContext = this._context[this._context.length - 1];\n\n    if (!parentContext) {\n      this._lifeCycle.next({\n        kind: 'start'\n      });\n    }\n    /** Create the collection and the schematic. */\n\n\n    const collection = this._engine.createCollection(options.collection); // Only allow private schematics if called from the same collection.\n\n\n    const allowPrivate = options.allowPrivate || parentContext && parentContext.collection === options.collection;\n    const schematic = collection.createSchematic(options.schematic, allowPrivate);\n\n    const sinks = this._createSinks();\n\n    this._lifeCycle.next({\n      kind: 'workflow-start'\n    });\n\n    const context = { ...options,\n      debug: options.debug || false,\n      logger: options.logger || parentContext && parentContext.logger || new core_1.logging.NullLogger(),\n      parentContext\n    };\n\n    this._context.push(context);\n\n    return schematic.call(options.options, (0, rxjs_1.of)(new host_tree_1.HostTree(this._host)), {\n      logger: context.logger\n    }).pipe((0, operators_1.concatMap)(tree => {\n      // Process all sinks.\n      return (0, rxjs_1.concat)((0, rxjs_1.from)(sinks).pipe((0, operators_1.concatMap)(sink => sink.commit(tree)), (0, operators_1.ignoreElements)()), (0, rxjs_1.of)(tree));\n    }), (0, operators_1.concatMap)(() => {\n      if (this._dryRun) {\n        return rxjs_1.EMPTY;\n      }\n\n      this._lifeCycle.next({\n        kind: 'post-tasks-start'\n      });\n\n      return this._engine.executePostTasks().pipe((0, operators_1.tap)({\n        complete: () => this._lifeCycle.next({\n          kind: 'post-tasks-end'\n        })\n      }), (0, operators_1.defaultIfEmpty)(), (0, operators_1.last)());\n    }), (0, operators_1.tap)({\n      complete: () => {\n        this._lifeCycle.next({\n          kind: 'workflow-end'\n        });\n\n        this._context.pop();\n\n        if (this._context.length == 0) {\n          this._lifeCycle.next({\n            kind: 'end'\n          });\n        }\n      }\n    }));\n  }\n\n}\n\nexports.BaseWorkflow = BaseWorkflow;","map":{"version":3,"names":["Object","defineProperty","exports","value","BaseWorkflow","core_1","require","rxjs_1","operators_1","engine_1","exception_1","formats_1","dryrun_1","host_1","host_tree_1","constructor","options","_reporter","Subject","_lifeCycle","_host","host","_engineHost","engineHost","registry","_registry","schema","CoreSchemaRegistry","standardFormats","addPostTransform","transforms","addUndefinedDefaults","_engine","SchematicEngine","_context","_force","force","_dryRun","dryRun","context","maybeContext","length","Error","engine","reporter","asObservable","lifeCycle","_createSinks","error","dryRunSink","DryRunSink","dryRunSubscriber","subscribe","event","next","kind","commit","unsubscribe","throwError","UnsuccessfulWorkflowExecution","of","HostSink","execute","parentContext","collection","createCollection","allowPrivate","schematic","createSchematic","sinks","debug","logger","logging","NullLogger","push","call","HostTree","pipe","concatMap","tree","concat","from","sink","ignoreElements","EMPTY","executePostTasks","tap","complete","defaultIfEmpty","last","pop"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/schematics/src/workflow/base.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseWorkflow = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst engine_1 = require(\"../engine\");\nconst exception_1 = require(\"../exception/exception\");\nconst formats_1 = require(\"../formats\");\nconst dryrun_1 = require(\"../sink/dryrun\");\nconst host_1 = require(\"../sink/host\");\nconst host_tree_1 = require(\"../tree/host-tree\");\n/**\n * Base class for workflows. Even without abstract methods, this class should not be used without\n * surrounding some initialization for the registry and host. This class only adds life cycle and\n * dryrun/force support. You need to provide any registry and task executors that you need to\n * support.\n * See {@see NodeWorkflow} implementation for how to make a specialized subclass of this.\n * TODO: add default set of CoreSchemaRegistry transforms. Once the job refactor is done, use that\n *       as the support for tasks.\n *\n * @public\n */\nclass BaseWorkflow {\n    constructor(options) {\n        this._reporter = new rxjs_1.Subject();\n        this._lifeCycle = new rxjs_1.Subject();\n        this._host = options.host;\n        this._engineHost = options.engineHost;\n        if (options.registry) {\n            this._registry = options.registry;\n        }\n        else {\n            this._registry = new core_1.schema.CoreSchemaRegistry(formats_1.standardFormats);\n            this._registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);\n        }\n        this._engine = new engine_1.SchematicEngine(this._engineHost, this);\n        this._context = [];\n        this._force = options.force || false;\n        this._dryRun = options.dryRun || false;\n    }\n    get context() {\n        const maybeContext = this._context[this._context.length - 1];\n        if (!maybeContext) {\n            throw new Error('Cannot get context when workflow is not executing...');\n        }\n        return maybeContext;\n    }\n    get engine() {\n        return this._engine;\n    }\n    get engineHost() {\n        return this._engineHost;\n    }\n    get registry() {\n        return this._registry;\n    }\n    get reporter() {\n        return this._reporter.asObservable();\n    }\n    get lifeCycle() {\n        return this._lifeCycle.asObservable();\n    }\n    _createSinks() {\n        let error = false;\n        const dryRunSink = new dryrun_1.DryRunSink(this._host, this._force);\n        const dryRunSubscriber = dryRunSink.reporter.subscribe((event) => {\n            this._reporter.next(event);\n            error = error || event.kind == 'error';\n        });\n        // We need two sinks if we want to output what will happen, and actually do the work.\n        return [\n            dryRunSink,\n            // Add a custom sink that clean ourselves and throws an error if an error happened.\n            {\n                commit() {\n                    dryRunSubscriber.unsubscribe();\n                    if (error) {\n                        return (0, rxjs_1.throwError)(new exception_1.UnsuccessfulWorkflowExecution());\n                    }\n                    return (0, rxjs_1.of)();\n                },\n            },\n            // Only add a HostSink if this is not a dryRun.\n            ...(!this._dryRun ? [new host_1.HostSink(this._host, this._force)] : []),\n        ];\n    }\n    execute(options) {\n        const parentContext = this._context[this._context.length - 1];\n        if (!parentContext) {\n            this._lifeCycle.next({ kind: 'start' });\n        }\n        /** Create the collection and the schematic. */\n        const collection = this._engine.createCollection(options.collection);\n        // Only allow private schematics if called from the same collection.\n        const allowPrivate = options.allowPrivate || (parentContext && parentContext.collection === options.collection);\n        const schematic = collection.createSchematic(options.schematic, allowPrivate);\n        const sinks = this._createSinks();\n        this._lifeCycle.next({ kind: 'workflow-start' });\n        const context = {\n            ...options,\n            debug: options.debug || false,\n            logger: options.logger || (parentContext && parentContext.logger) || new core_1.logging.NullLogger(),\n            parentContext,\n        };\n        this._context.push(context);\n        return schematic\n            .call(options.options, (0, rxjs_1.of)(new host_tree_1.HostTree(this._host)), { logger: context.logger })\n            .pipe((0, operators_1.concatMap)((tree) => {\n            // Process all sinks.\n            return (0, rxjs_1.concat)((0, rxjs_1.from)(sinks).pipe((0, operators_1.concatMap)((sink) => sink.commit(tree)), (0, operators_1.ignoreElements)()), (0, rxjs_1.of)(tree));\n        }), (0, operators_1.concatMap)(() => {\n            if (this._dryRun) {\n                return rxjs_1.EMPTY;\n            }\n            this._lifeCycle.next({ kind: 'post-tasks-start' });\n            return this._engine\n                .executePostTasks()\n                .pipe((0, operators_1.tap)({ complete: () => this._lifeCycle.next({ kind: 'post-tasks-end' }) }), (0, operators_1.defaultIfEmpty)(), (0, operators_1.last)());\n        }), (0, operators_1.tap)({\n            complete: () => {\n                this._lifeCycle.next({ kind: 'workflow-end' });\n                this._context.pop();\n                if (this._context.length == 0) {\n                    this._lifeCycle.next({ kind: 'end' });\n                }\n            },\n        }));\n    }\n}\nexports.BaseWorkflow = BaseWorkflow;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}