{"ast":null,"code":"'use strict';\n\nconst _ = {\n  isPlainObject: require('lodash/isPlainObject'),\n  get: require('lodash/get'),\n  set: require('lodash/set')\n};\n\nconst {\n  defer,\n  empty,\n  from,\n  of\n} = require('rxjs');\n\nconst {\n  concatMap,\n  filter,\n  publish,\n  reduce\n} = require('rxjs/operators');\n\nconst runAsync = require('run-async');\n\nconst utils = require('../utils/utils');\n\nconst Base = require('./baseUI');\n/**\n * Base interface class other can inherits from\n */\n\n\nclass PromptUI extends Base {\n  constructor(prompts, opt) {\n    super(opt);\n    this.prompts = prompts;\n  }\n\n  run(questions, answers) {\n    // Keep global reference to the answers\n    if (_.isPlainObject(answers)) {\n      this.answers = { ...answers\n      };\n    } else {\n      this.answers = {};\n    } // Make sure questions is an array.\n\n\n    if (_.isPlainObject(questions)) {\n      // It's either an object of questions or a single question\n      questions = Object.values(questions).every(v => _.isPlainObject(v) && v.name === undefined) ? Object.entries(questions).map(([name, question]) => ({\n        name,\n        ...question\n      })) : [questions];\n    } // Create an observable, unless we received one as parameter.\n    // Note: As this is a public interface, we cannot do an instanceof check as we won't\n    // be using the exact same object in memory.\n\n\n    const obs = Array.isArray(questions) ? from(questions) : questions;\n    this.process = obs.pipe(concatMap(this.processQuestion.bind(this)), publish() // Creates a hot Observable. It prevents duplicating prompts.\n    );\n    this.process.connect();\n    return this.process.pipe(reduce((answers, answer) => {\n      _.set(answers, answer.name, answer.answer);\n\n      return answers;\n    }, this.answers)).toPromise(Promise).then(this.onCompletion.bind(this), this.onError.bind(this));\n  }\n  /**\n   * Once all prompt are over\n   */\n\n\n  onCompletion() {\n    this.close();\n    return this.answers;\n  }\n\n  onError(error) {\n    this.close();\n    return Promise.reject(error);\n  }\n\n  processQuestion(question) {\n    question = { ...question\n    };\n    return defer(() => {\n      const obs = of(question);\n      return obs.pipe(concatMap(this.setDefaultType.bind(this)), concatMap(this.filterIfRunnable.bind(this)), concatMap(() => utils.fetchAsyncQuestionProperty(question, 'message', this.answers)), concatMap(() => utils.fetchAsyncQuestionProperty(question, 'default', this.answers)), concatMap(() => utils.fetchAsyncQuestionProperty(question, 'choices', this.answers)), concatMap(this.fetchAnswer.bind(this)));\n    });\n  }\n\n  fetchAnswer(question) {\n    const Prompt = this.prompts[question.type];\n    this.activePrompt = new Prompt(question, this.rl, this.answers);\n    return defer(() => from(this.activePrompt.run().then(answer => ({\n      name: question.name,\n      answer\n    }))));\n  }\n\n  setDefaultType(question) {\n    // Default type to input\n    if (!this.prompts[question.type]) {\n      question.type = 'input';\n    }\n\n    return defer(() => of(question));\n  }\n\n  filterIfRunnable(question) {\n    if (question.askAnswered !== true && _.get(this.answers, question.name) !== undefined) {\n      return empty();\n    }\n\n    if (question.when === false) {\n      return empty();\n    }\n\n    if (typeof question.when !== 'function') {\n      return of(question);\n    }\n\n    const {\n      answers\n    } = this;\n    return defer(() => from(runAsync(question.when)(answers).then(shouldRun => {\n      if (shouldRun) {\n        return question;\n      }\n    })).pipe(filter(val => val != null)));\n  }\n\n}\n\nmodule.exports = PromptUI;","map":{"version":3,"names":["_","isPlainObject","require","get","set","defer","empty","from","of","concatMap","filter","publish","reduce","runAsync","utils","Base","PromptUI","constructor","prompts","opt","run","questions","answers","Object","values","every","v","name","undefined","entries","map","question","obs","Array","isArray","process","pipe","processQuestion","bind","connect","answer","toPromise","Promise","then","onCompletion","onError","close","error","reject","setDefaultType","filterIfRunnable","fetchAsyncQuestionProperty","fetchAnswer","Prompt","type","activePrompt","rl","askAnswered","when","shouldRun","val","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/inquirer/lib/ui/prompt.js"],"sourcesContent":["'use strict';\nconst _ = {\n  isPlainObject: require('lodash/isPlainObject'),\n  get: require('lodash/get'),\n  set: require('lodash/set'),\n};\nconst { defer, empty, from, of } = require('rxjs');\nconst { concatMap, filter, publish, reduce } = require('rxjs/operators');\nconst runAsync = require('run-async');\nconst utils = require('../utils/utils');\nconst Base = require('./baseUI');\n\n/**\n * Base interface class other can inherits from\n */\n\nclass PromptUI extends Base {\n  constructor(prompts, opt) {\n    super(opt);\n    this.prompts = prompts;\n  }\n\n  run(questions, answers) {\n    // Keep global reference to the answers\n    if (_.isPlainObject(answers)) {\n      this.answers = { ...answers };\n    } else {\n      this.answers = {};\n    }\n\n    // Make sure questions is an array.\n    if (_.isPlainObject(questions)) {\n      // It's either an object of questions or a single question\n      questions = Object.values(questions).every(\n        (v) => _.isPlainObject(v) && v.name === undefined\n      )\n        ? Object.entries(questions).map(([name, question]) => ({ name, ...question }))\n        : [questions];\n    }\n\n    // Create an observable, unless we received one as parameter.\n    // Note: As this is a public interface, we cannot do an instanceof check as we won't\n    // be using the exact same object in memory.\n    const obs = Array.isArray(questions) ? from(questions) : questions;\n\n    this.process = obs.pipe(\n      concatMap(this.processQuestion.bind(this)),\n      publish() // Creates a hot Observable. It prevents duplicating prompts.\n    );\n\n    this.process.connect();\n\n    return this.process\n      .pipe(\n        reduce((answers, answer) => {\n          _.set(answers, answer.name, answer.answer);\n          return answers;\n        }, this.answers)\n      )\n      .toPromise(Promise)\n      .then(this.onCompletion.bind(this), this.onError.bind(this));\n  }\n\n  /**\n   * Once all prompt are over\n   */\n\n  onCompletion() {\n    this.close();\n\n    return this.answers;\n  }\n\n  onError(error) {\n    this.close();\n    return Promise.reject(error);\n  }\n\n  processQuestion(question) {\n    question = { ...question };\n    return defer(() => {\n      const obs = of(question);\n\n      return obs.pipe(\n        concatMap(this.setDefaultType.bind(this)),\n        concatMap(this.filterIfRunnable.bind(this)),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'message', this.answers)\n        ),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'default', this.answers)\n        ),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'choices', this.answers)\n        ),\n        concatMap(this.fetchAnswer.bind(this))\n      );\n    });\n  }\n\n  fetchAnswer(question) {\n    const Prompt = this.prompts[question.type];\n    this.activePrompt = new Prompt(question, this.rl, this.answers);\n    return defer(() =>\n      from(this.activePrompt.run().then((answer) => ({ name: question.name, answer })))\n    );\n  }\n\n  setDefaultType(question) {\n    // Default type to input\n    if (!this.prompts[question.type]) {\n      question.type = 'input';\n    }\n\n    return defer(() => of(question));\n  }\n\n  filterIfRunnable(question) {\n    if (\n      question.askAnswered !== true &&\n      _.get(this.answers, question.name) !== undefined\n    ) {\n      return empty();\n    }\n\n    if (question.when === false) {\n      return empty();\n    }\n\n    if (typeof question.when !== 'function') {\n      return of(question);\n    }\n\n    const { answers } = this;\n    return defer(() =>\n      from(\n        runAsync(question.when)(answers).then((shouldRun) => {\n          if (shouldRun) {\n            return question;\n          }\n        })\n      ).pipe(filter((val) => val != null))\n    );\n  }\n}\n\nmodule.exports = PromptUI;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}