{"ast":null,"code":"var _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst {\n  join,\n  sep\n} = require('path');\n\nconst getOptions = require('./common/get-options.js');\n\nconst mkdir = require('./mkdir.js');\n\nconst mkdtemp = require('./mkdtemp.js');\n\nconst rm = require('./rm/index.js'); // create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\n\n\nconst withTempDir = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (root, fn, opts) {\n    const options = getOptions(opts, {\n      copy: ['tmpPrefix']\n    }); // create the directory, and fix its ownership\n\n    yield mkdir(root, {\n      recursive: true,\n      owner: 'inherit'\n    });\n    const target = yield mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''), {\n      owner: 'inherit'\n    });\n    let err;\n    let result;\n\n    try {\n      result = yield fn(target);\n    } catch (_err) {\n      err = _err;\n    }\n\n    try {\n      yield rm(target, {\n        force: true,\n        recursive: true\n      });\n    } catch {// ignore errors\n    }\n\n    if (err) {\n      throw err;\n    }\n\n    return result;\n  });\n\n  return function withTempDir(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = withTempDir;","map":{"version":3,"names":["join","sep","require","getOptions","mkdir","mkdtemp","rm","withTempDir","root","fn","opts","options","copy","recursive","owner","target","tmpPrefix","err","result","_err","force","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@npmcli/fs/lib/with-temp-dir.js"],"sourcesContent":["const { join, sep } = require('path')\n\nconst getOptions = require('./common/get-options.js')\nconst mkdir = require('./mkdir.js')\nconst mkdtemp = require('./mkdtemp.js')\nconst rm = require('./rm/index.js')\n\n// create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\nconst withTempDir = async (root, fn, opts) => {\n  const options = getOptions(opts, {\n    copy: ['tmpPrefix'],\n  })\n  // create the directory, and fix its ownership\n  await mkdir(root, { recursive: true, owner: 'inherit' })\n\n  const target = await mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''), { owner: 'inherit' })\n  let err\n  let result\n\n  try {\n    result = await fn(target)\n  } catch (_err) {\n    err = _err\n  }\n\n  try {\n    await rm(target, { force: true, recursive: true })\n  } catch {\n    // ignore errors\n  }\n\n  if (err) {\n    throw err\n  }\n\n  return result\n}\n\nmodule.exports = withTempDir\n"],"mappings":";;AAAA,MAAM;EAAEA,IAAF;EAAQC;AAAR,IAAgBC,OAAO,CAAC,MAAD,CAA7B;;AAEA,MAAMC,UAAU,GAAGD,OAAO,CAAC,yBAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,eAAD,CAAlB,C,CAEA;AACA;AACA;;;AACA,MAAMK,WAAW;EAAA,6BAAG,WAAOC,IAAP,EAAaC,EAAb,EAAiBC,IAAjB,EAA0B;IAC5C,MAAMC,OAAO,GAAGR,UAAU,CAACO,IAAD,EAAO;MAC/BE,IAAI,EAAE,CAAC,WAAD;IADyB,CAAP,CAA1B,CAD4C,CAI5C;;IACA,MAAMR,KAAK,CAACI,IAAD,EAAO;MAAEK,SAAS,EAAE,IAAb;MAAmBC,KAAK,EAAE;IAA1B,CAAP,CAAX;IAEA,MAAMC,MAAM,SAASV,OAAO,CAACL,IAAI,CAAE,GAAEQ,IAAK,GAAEP,GAAI,EAAf,EAAkBU,OAAO,CAACK,SAAR,IAAqB,EAAvC,CAAL,EAAiD;MAAEF,KAAK,EAAE;IAAT,CAAjD,CAA5B;IACA,IAAIG,GAAJ;IACA,IAAIC,MAAJ;;IAEA,IAAI;MACFA,MAAM,SAAST,EAAE,CAACM,MAAD,CAAjB;IACD,CAFD,CAEE,OAAOI,IAAP,EAAa;MACbF,GAAG,GAAGE,IAAN;IACD;;IAED,IAAI;MACF,MAAMb,EAAE,CAACS,MAAD,EAAS;QAAEK,KAAK,EAAE,IAAT;QAAeP,SAAS,EAAE;MAA1B,CAAT,CAAR;IACD,CAFD,CAEE,MAAM,CACN;IACD;;IAED,IAAII,GAAJ,EAAS;MACP,MAAMA,GAAN;IACD;;IAED,OAAOC,MAAP;EACD,CA5BgB;;EAAA,gBAAXX,WAAW;IAAA;EAAA;AAAA,GAAjB;;AA8BAc,MAAM,CAACC,OAAP,GAAiBf,WAAjB"},"metadata":{},"sourceType":"script"}