{"ast":null,"code":"var _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst {\n  dirname,\n  join,\n  resolve,\n  relative,\n  isAbsolute\n} = require('path');\n\nconst rimraf_ = require('rimraf');\n\nconst {\n  promisify\n} = require('util');\n\nconst {\n  access: access_,\n  accessSync,\n  copyFile: copyFile_,\n  copyFileSync,\n  readdir: readdir_,\n  readdirSync,\n  rename: rename_,\n  renameSync,\n  stat: stat_,\n  statSync,\n  lstat: lstat_,\n  lstatSync,\n  symlink: symlink_,\n  symlinkSync,\n  readlink: readlink_,\n  readlinkSync\n} = require('fs');\n\nconst access = promisify(access_);\nconst copyFile = promisify(copyFile_);\nconst readdir = promisify(readdir_);\nconst rename = promisify(rename_);\nconst stat = promisify(stat_);\nconst lstat = promisify(lstat_);\nconst symlink = promisify(symlink_);\nconst readlink = promisify(readlink_);\nconst rimraf = promisify(rimraf_);\nconst rimrafSync = rimraf_.sync;\n\nconst mkdirp = require('mkdirp');\n\nconst pathExists = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (path) {\n    try {\n      yield access(path);\n      return true;\n    } catch (er) {\n      return er.code !== 'ENOENT';\n    }\n  });\n\n  return function pathExists(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst pathExistsSync = path => {\n  try {\n    accessSync(path);\n    return true;\n  } catch (er) {\n    return er.code !== 'ENOENT';\n  }\n};\n\nconst moveFile = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (source, destination, options = {}, root = true, symlinks = []) {\n    if (!source || !destination) {\n      throw new TypeError('`source` and `destination` file required');\n    }\n\n    options = {\n      overwrite: true,\n      ...options\n    };\n\n    if (!options.overwrite && (yield pathExists(destination))) {\n      throw new Error(`The destination file exists: ${destination}`);\n    }\n\n    yield mkdirp(dirname(destination));\n\n    try {\n      yield rename(source, destination);\n    } catch (error) {\n      if (error.code === 'EXDEV' || error.code === 'EPERM') {\n        const sourceStat = yield lstat(source);\n\n        if (sourceStat.isDirectory()) {\n          const files = yield readdir(source);\n          yield Promise.all(files.map(file => moveFile(join(source, file), join(destination, file), options, false, symlinks)));\n        } else if (sourceStat.isSymbolicLink()) {\n          symlinks.push({\n            source,\n            destination\n          });\n        } else {\n          yield copyFile(source, destination);\n        }\n      } else {\n        throw error;\n      }\n    }\n\n    if (root) {\n      yield Promise.all(symlinks.map( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* ({\n          source: symSource,\n          destination: symDestination\n        }) {\n          let target = yield readlink(symSource); // junction symlinks in windows will be absolute paths, so we need to\n          // make sure they point to the symlink destination\n\n          if (isAbsolute(target)) {\n            target = resolve(symDestination, relative(symSource, target));\n          } // try to determine what the actual file is so we can create the correct\n          // type of symlink in windows\n\n\n          let targetStat = 'file';\n\n          try {\n            targetStat = yield stat(resolve(dirname(symSource), target));\n\n            if (targetStat.isDirectory()) {\n              targetStat = 'junction';\n            }\n          } catch {// targetStat remains 'file'\n          }\n\n          yield symlink(target, symDestination, targetStat);\n        });\n\n        return function (_x4) {\n          return _ref3.apply(this, arguments);\n        };\n      }()));\n      yield rimraf(source);\n    }\n  });\n\n  return function moveFile(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst moveFileSync = (source, destination, options = {}, root = true, symlinks = []) => {\n  if (!source || !destination) {\n    throw new TypeError('`source` and `destination` file required');\n  }\n\n  options = {\n    overwrite: true,\n    ...options\n  };\n\n  if (!options.overwrite && pathExistsSync(destination)) {\n    throw new Error(`The destination file exists: ${destination}`);\n  }\n\n  mkdirp.sync(dirname(destination));\n\n  try {\n    renameSync(source, destination);\n  } catch (error) {\n    if (error.code === 'EXDEV' || error.code === 'EPERM') {\n      const sourceStat = lstatSync(source);\n\n      if (sourceStat.isDirectory()) {\n        const files = readdirSync(source);\n\n        for (const file of files) {\n          moveFileSync(join(source, file), join(destination, file), options, false, symlinks);\n        }\n      } else if (sourceStat.isSymbolicLink()) {\n        symlinks.push({\n          source,\n          destination\n        });\n      } else {\n        copyFileSync(source, destination);\n      }\n    } else {\n      throw error;\n    }\n  }\n\n  if (root) {\n    for (const {\n      source: symSource,\n      destination: symDestination\n    } of symlinks) {\n      let target = readlinkSync(symSource); // junction symlinks in windows will be absolute paths, so we need to\n      // make sure they point to the symlink destination\n\n      if (isAbsolute(target)) {\n        target = resolve(symDestination, relative(symSource, target));\n      } // try to determine what the actual file is so we can create the correct\n      // type of symlink in windows\n\n\n      let targetStat = 'file';\n\n      try {\n        targetStat = statSync(resolve(dirname(symSource), target));\n\n        if (targetStat.isDirectory()) {\n          targetStat = 'junction';\n        }\n      } catch {// targetStat remains 'file'\n      }\n\n      symlinkSync(target, symDestination, targetStat);\n    }\n\n    rimrafSync(source);\n  }\n};\n\nmodule.exports = moveFile;\nmodule.exports.sync = moveFileSync;","map":{"version":3,"names":["dirname","join","resolve","relative","isAbsolute","require","rimraf_","promisify","access","access_","accessSync","copyFile","copyFile_","copyFileSync","readdir","readdir_","readdirSync","rename","rename_","renameSync","stat","stat_","statSync","lstat","lstat_","lstatSync","symlink","symlink_","symlinkSync","readlink","readlink_","readlinkSync","rimraf","rimrafSync","sync","mkdirp","pathExists","path","er","code","pathExistsSync","moveFile","source","destination","options","root","symlinks","TypeError","overwrite","Error","error","sourceStat","isDirectory","files","Promise","all","map","file","isSymbolicLink","push","symSource","symDestination","target","targetStat","moveFileSync","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@npmcli/move-file/lib/index.js"],"sourcesContent":["const { dirname, join, resolve, relative, isAbsolute } = require('path')\nconst rimraf_ = require('rimraf')\nconst { promisify } = require('util')\nconst {\n  access: access_,\n  accessSync,\n  copyFile: copyFile_,\n  copyFileSync,\n  readdir: readdir_,\n  readdirSync,\n  rename: rename_,\n  renameSync,\n  stat: stat_,\n  statSync,\n  lstat: lstat_,\n  lstatSync,\n  symlink: symlink_,\n  symlinkSync,\n  readlink: readlink_,\n  readlinkSync,\n} = require('fs')\n\nconst access = promisify(access_)\nconst copyFile = promisify(copyFile_)\nconst readdir = promisify(readdir_)\nconst rename = promisify(rename_)\nconst stat = promisify(stat_)\nconst lstat = promisify(lstat_)\nconst symlink = promisify(symlink_)\nconst readlink = promisify(readlink_)\nconst rimraf = promisify(rimraf_)\nconst rimrafSync = rimraf_.sync\n\nconst mkdirp = require('mkdirp')\n\nconst pathExists = async path => {\n  try {\n    await access(path)\n    return true\n  } catch (er) {\n    return er.code !== 'ENOENT'\n  }\n}\n\nconst pathExistsSync = path => {\n  try {\n    accessSync(path)\n    return true\n  } catch (er) {\n    return er.code !== 'ENOENT'\n  }\n}\n\nconst moveFile = async (source, destination, options = {}, root = true, symlinks = []) => {\n  if (!source || !destination) {\n    throw new TypeError('`source` and `destination` file required')\n  }\n\n  options = {\n    overwrite: true,\n    ...options,\n  }\n\n  if (!options.overwrite && await pathExists(destination)) {\n    throw new Error(`The destination file exists: ${destination}`)\n  }\n\n  await mkdirp(dirname(destination))\n\n  try {\n    await rename(source, destination)\n  } catch (error) {\n    if (error.code === 'EXDEV' || error.code === 'EPERM') {\n      const sourceStat = await lstat(source)\n      if (sourceStat.isDirectory()) {\n        const files = await readdir(source)\n        await Promise.all(files.map((file) =>\n          moveFile(join(source, file), join(destination, file), options, false, symlinks)\n        ))\n      } else if (sourceStat.isSymbolicLink()) {\n        symlinks.push({ source, destination })\n      } else {\n        await copyFile(source, destination)\n      }\n    } else {\n      throw error\n    }\n  }\n\n  if (root) {\n    await Promise.all(symlinks.map(async ({ source: symSource, destination: symDestination }) => {\n      let target = await readlink(symSource)\n      // junction symlinks in windows will be absolute paths, so we need to\n      // make sure they point to the symlink destination\n      if (isAbsolute(target)) {\n        target = resolve(symDestination, relative(symSource, target))\n      }\n      // try to determine what the actual file is so we can create the correct\n      // type of symlink in windows\n      let targetStat = 'file'\n      try {\n        targetStat = await stat(resolve(dirname(symSource), target))\n        if (targetStat.isDirectory()) {\n          targetStat = 'junction'\n        }\n      } catch {\n        // targetStat remains 'file'\n      }\n      await symlink(\n        target,\n        symDestination,\n        targetStat\n      )\n    }))\n    await rimraf(source)\n  }\n}\n\nconst moveFileSync = (source, destination, options = {}, root = true, symlinks = []) => {\n  if (!source || !destination) {\n    throw new TypeError('`source` and `destination` file required')\n  }\n\n  options = {\n    overwrite: true,\n    ...options,\n  }\n\n  if (!options.overwrite && pathExistsSync(destination)) {\n    throw new Error(`The destination file exists: ${destination}`)\n  }\n\n  mkdirp.sync(dirname(destination))\n\n  try {\n    renameSync(source, destination)\n  } catch (error) {\n    if (error.code === 'EXDEV' || error.code === 'EPERM') {\n      const sourceStat = lstatSync(source)\n      if (sourceStat.isDirectory()) {\n        const files = readdirSync(source)\n        for (const file of files) {\n          moveFileSync(join(source, file), join(destination, file), options, false, symlinks)\n        }\n      } else if (sourceStat.isSymbolicLink()) {\n        symlinks.push({ source, destination })\n      } else {\n        copyFileSync(source, destination)\n      }\n    } else {\n      throw error\n    }\n  }\n\n  if (root) {\n    for (const { source: symSource, destination: symDestination } of symlinks) {\n      let target = readlinkSync(symSource)\n      // junction symlinks in windows will be absolute paths, so we need to\n      // make sure they point to the symlink destination\n      if (isAbsolute(target)) {\n        target = resolve(symDestination, relative(symSource, target))\n      }\n      // try to determine what the actual file is so we can create the correct\n      // type of symlink in windows\n      let targetStat = 'file'\n      try {\n        targetStat = statSync(resolve(dirname(symSource), target))\n        if (targetStat.isDirectory()) {\n          targetStat = 'junction'\n        }\n      } catch {\n        // targetStat remains 'file'\n      }\n      symlinkSync(\n        target,\n        symDestination,\n        targetStat\n      )\n    }\n    rimrafSync(source)\n  }\n}\n\nmodule.exports = moveFile\nmodule.exports.sync = moveFileSync\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}