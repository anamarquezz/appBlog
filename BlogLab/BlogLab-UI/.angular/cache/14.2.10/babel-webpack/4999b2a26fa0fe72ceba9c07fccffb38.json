{"ast":null,"code":"'use strict';\n/**\n * Sticky bottom bar user interface\n */\n\nconst through = require('through');\n\nconst Base = require('./baseUI');\n\nconst rlUtils = require('../utils/readline');\n\nclass BottomBar extends Base {\n  constructor(opt = {}) {\n    super(opt);\n    this.log = through(this.writeLog.bind(this));\n    this.bottomBar = opt.bottomBar || '';\n    this.render();\n  }\n  /**\n   * Render the prompt to screen\n   * @return {BottomBar} self\n   */\n\n\n  render() {\n    this.write(this.bottomBar);\n    return this;\n  }\n\n  clean() {\n    rlUtils.clearLine(this.rl, this.bottomBar.split('\\n').length);\n    return this;\n  }\n  /**\n   * Update the bottom bar content and rerender\n   * @param  {String} bottomBar Bottom bar content\n   * @return {BottomBar}           self\n   */\n\n\n  updateBottomBar(bottomBar) {\n    rlUtils.clearLine(this.rl, 1);\n    this.rl.output.unmute();\n    this.clean();\n    this.bottomBar = bottomBar;\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n  /**\n   * Write out log data\n   * @param {String} data - The log data to be output\n   * @return {BottomBar} self\n   */\n\n\n  writeLog(data) {\n    this.rl.output.unmute();\n    this.clean();\n    this.rl.output.write(this.enforceLF(data.toString()));\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n  /**\n   * Make sure line end on a line feed\n   * @param  {String} str Input string\n   * @return {String}     The input string with a final line feed\n   */\n\n\n  enforceLF(str) {\n    return str.match(/[\\r\\n]$/) ? str : str + '\\n';\n  }\n  /**\n   * Helper for writing message in Prompt\n   * @param {String} message - The message to be output\n   */\n\n\n  write(message) {\n    const msgLines = message.split(/\\n/);\n    this.height = msgLines.length; // Write message to screen and setPrompt to control backspace\n\n    this.rl.setPrompt(msgLines[msgLines.length - 1]);\n\n    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {\n      /* When it's a tty through serial port there's no terminal info and the render will malfunction,\n         so we need enforce the cursor to locate to the leftmost position for rendering. */\n      rlUtils.left(this.rl, message.length + this.rl.line.length);\n    }\n\n    this.rl.output.write(message);\n  }\n\n}\n\nmodule.exports = BottomBar;","map":{"version":3,"names":["through","require","Base","rlUtils","BottomBar","constructor","opt","log","writeLog","bind","bottomBar","render","write","clean","clearLine","rl","split","length","updateBottomBar","output","unmute","mute","data","enforceLF","toString","str","match","message","msgLines","height","setPrompt","rows","columns","left","line","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/inquirer/lib/ui/bottom-bar.js"],"sourcesContent":["'use strict';\n/**\n * Sticky bottom bar user interface\n */\n\nconst through = require('through');\nconst Base = require('./baseUI');\nconst rlUtils = require('../utils/readline');\n\nclass BottomBar extends Base {\n  constructor(opt = {}) {\n    super(opt);\n\n    this.log = through(this.writeLog.bind(this));\n    this.bottomBar = opt.bottomBar || '';\n    this.render();\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {BottomBar} self\n   */\n\n  render() {\n    this.write(this.bottomBar);\n    return this;\n  }\n\n  clean() {\n    rlUtils.clearLine(this.rl, this.bottomBar.split('\\n').length);\n    return this;\n  }\n\n  /**\n   * Update the bottom bar content and rerender\n   * @param  {String} bottomBar Bottom bar content\n   * @return {BottomBar}           self\n   */\n\n  updateBottomBar(bottomBar) {\n    rlUtils.clearLine(this.rl, 1);\n    this.rl.output.unmute();\n    this.clean();\n    this.bottomBar = bottomBar;\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Write out log data\n   * @param {String} data - The log data to be output\n   * @return {BottomBar} self\n   */\n\n  writeLog(data) {\n    this.rl.output.unmute();\n    this.clean();\n    this.rl.output.write(this.enforceLF(data.toString()));\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Make sure line end on a line feed\n   * @param  {String} str Input string\n   * @return {String}     The input string with a final line feed\n   */\n\n  enforceLF(str) {\n    return str.match(/[\\r\\n]$/) ? str : str + '\\n';\n  }\n\n  /**\n   * Helper for writing message in Prompt\n   * @param {String} message - The message to be output\n   */\n  write(message) {\n    const msgLines = message.split(/\\n/);\n    this.height = msgLines.length;\n\n    // Write message to screen and setPrompt to control backspace\n    this.rl.setPrompt(msgLines[msgLines.length - 1]);\n\n    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {\n      /* When it's a tty through serial port there's no terminal info and the render will malfunction,\n         so we need enforce the cursor to locate to the leftmost position for rendering. */\n      rlUtils.left(this.rl, message.length + this.rl.line.length);\n    }\n\n    this.rl.output.write(message);\n  }\n}\n\nmodule.exports = BottomBar;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,UAAD,CAApB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,mBAAD,CAAvB;;AAEA,MAAMG,SAAN,SAAwBF,IAAxB,CAA6B;EAC3BG,WAAW,CAACC,GAAG,GAAG,EAAP,EAAW;IACpB,MAAMA,GAAN;IAEA,KAAKC,GAAL,GAAWP,OAAO,CAAC,KAAKQ,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAD,CAAlB;IACA,KAAKC,SAAL,GAAiBJ,GAAG,CAACI,SAAJ,IAAiB,EAAlC;IACA,KAAKC,MAAL;EACD;EAED;AACF;AACA;AACA;;;EAEEA,MAAM,GAAG;IACP,KAAKC,KAAL,CAAW,KAAKF,SAAhB;IACA,OAAO,IAAP;EACD;;EAEDG,KAAK,GAAG;IACNV,OAAO,CAACW,SAAR,CAAkB,KAAKC,EAAvB,EAA2B,KAAKL,SAAL,CAAeM,KAAf,CAAqB,IAArB,EAA2BC,MAAtD;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAEEC,eAAe,CAACR,SAAD,EAAY;IACzBP,OAAO,CAACW,SAAR,CAAkB,KAAKC,EAAvB,EAA2B,CAA3B;IACA,KAAKA,EAAL,CAAQI,MAAR,CAAeC,MAAf;IACA,KAAKP,KAAL;IACA,KAAKH,SAAL,GAAiBA,SAAjB;IACA,KAAKC,MAAL;IACA,KAAKI,EAAL,CAAQI,MAAR,CAAeE,IAAf;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAEEb,QAAQ,CAACc,IAAD,EAAO;IACb,KAAKP,EAAL,CAAQI,MAAR,CAAeC,MAAf;IACA,KAAKP,KAAL;IACA,KAAKE,EAAL,CAAQI,MAAR,CAAeP,KAAf,CAAqB,KAAKW,SAAL,CAAeD,IAAI,CAACE,QAAL,EAAf,CAArB;IACA,KAAKb,MAAL;IACA,KAAKI,EAAL,CAAQI,MAAR,CAAeE,IAAf;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAEEE,SAAS,CAACE,GAAD,EAAM;IACb,OAAOA,GAAG,CAACC,KAAJ,CAAU,SAAV,IAAuBD,GAAvB,GAA6BA,GAAG,GAAG,IAA1C;EACD;EAED;AACF;AACA;AACA;;;EACEb,KAAK,CAACe,OAAD,EAAU;IACb,MAAMC,QAAQ,GAAGD,OAAO,CAACX,KAAR,CAAc,IAAd,CAAjB;IACA,KAAKa,MAAL,GAAcD,QAAQ,CAACX,MAAvB,CAFa,CAIb;;IACA,KAAKF,EAAL,CAAQe,SAAR,CAAkBF,QAAQ,CAACA,QAAQ,CAACX,MAAT,GAAkB,CAAnB,CAA1B;;IAEA,IAAI,KAAKF,EAAL,CAAQI,MAAR,CAAeY,IAAf,KAAwB,CAAxB,IAA6B,KAAKhB,EAAL,CAAQI,MAAR,CAAea,OAAf,KAA2B,CAA5D,EAA+D;MAC7D;AACN;MACM7B,OAAO,CAAC8B,IAAR,CAAa,KAAKlB,EAAlB,EAAsBY,OAAO,CAACV,MAAR,GAAiB,KAAKF,EAAL,CAAQmB,IAAR,CAAajB,MAApD;IACD;;IAED,KAAKF,EAAL,CAAQI,MAAR,CAAeP,KAAf,CAAqBe,OAArB;EACD;;AAnF0B;;AAsF7BQ,MAAM,CAACC,OAAP,GAAiBhC,SAAjB"},"metadata":{},"sourceType":"script"}