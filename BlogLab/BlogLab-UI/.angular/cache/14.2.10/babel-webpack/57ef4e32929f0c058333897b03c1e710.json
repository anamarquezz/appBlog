{"ast":null,"code":"const {\n  resolve,\n  dirname,\n  delimiter\n} = require('path'); // the path here is relative, even though it does not need to be\n// in order to make the posix tests pass in windows\n\n\nconst nodeGypPath = resolve(__dirname, '../lib/node-gyp-bin'); // Windows typically calls its PATH environ 'Path', but this is not\n// guaranteed, nor is it guaranteed to be the only one.  Merge them\n// all together in the order they appear in the object.\n\nconst setPATH = (projectPath, binPaths, env) => {\n  const PATH = Object.keys(env).filter(p => /^path$/i.test(p) && env[p]).map(p => env[p].split(delimiter)).reduce((set, p) => set.concat(p.filter(concatted => !set.includes(concatted))), []).join(delimiter);\n  const pathArr = [];\n\n  if (binPaths) {\n    pathArr.push(...binPaths);\n  } // unshift the ./node_modules/.bin from every folder\n  // walk up until dirname() does nothing, at the root\n  // XXX we should specify a cwd that we don't go above\n\n\n  let p = projectPath;\n  let pp;\n\n  do {\n    pathArr.push(resolve(p, 'node_modules', '.bin'));\n    pp = p;\n    p = dirname(p);\n  } while (p !== pp);\n\n  pathArr.push(nodeGypPath, PATH);\n  const pathVal = pathArr.join(delimiter); // XXX include the node-gyp-bin path somehow?  Probably better for\n  // npm or arborist or whoever to just provide that by putting it in\n  // the PATH environ, since that's preserved anyway.\n\n  for (const key of Object.keys(env)) {\n    if (/^path$/i.test(key)) {\n      env[key] = pathVal;\n    }\n  }\n\n  return env;\n};\n\nmodule.exports = setPATH;","map":{"version":3,"names":["resolve","dirname","delimiter","require","nodeGypPath","__dirname","setPATH","projectPath","binPaths","env","PATH","Object","keys","filter","p","test","map","split","reduce","set","concat","concatted","includes","join","pathArr","push","pp","pathVal","key","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@npmcli/run-script/lib/set-path.js"],"sourcesContent":["const { resolve, dirname, delimiter } = require('path')\n// the path here is relative, even though it does not need to be\n// in order to make the posix tests pass in windows\nconst nodeGypPath = resolve(__dirname, '../lib/node-gyp-bin')\n\n// Windows typically calls its PATH environ 'Path', but this is not\n// guaranteed, nor is it guaranteed to be the only one.  Merge them\n// all together in the order they appear in the object.\nconst setPATH = (projectPath, binPaths, env) => {\n  const PATH = Object.keys(env).filter(p => /^path$/i.test(p) && env[p])\n    .map(p => env[p].split(delimiter))\n    .reduce((set, p) => set.concat(p.filter(concatted => !set.includes(concatted))), [])\n    .join(delimiter)\n\n  const pathArr = []\n  if (binPaths) {\n    pathArr.push(...binPaths)\n  }\n  // unshift the ./node_modules/.bin from every folder\n  // walk up until dirname() does nothing, at the root\n  // XXX we should specify a cwd that we don't go above\n  let p = projectPath\n  let pp\n  do {\n    pathArr.push(resolve(p, 'node_modules', '.bin'))\n    pp = p\n    p = dirname(p)\n  } while (p !== pp)\n  pathArr.push(nodeGypPath, PATH)\n\n  const pathVal = pathArr.join(delimiter)\n\n  // XXX include the node-gyp-bin path somehow?  Probably better for\n  // npm or arborist or whoever to just provide that by putting it in\n  // the PATH environ, since that's preserved anyway.\n  for (const key of Object.keys(env)) {\n    if (/^path$/i.test(key)) {\n      env[key] = pathVal\n    }\n  }\n\n  return env\n}\n\nmodule.exports = setPATH\n"],"mappings":"AAAA,MAAM;EAAEA,OAAF;EAAWC,OAAX;EAAoBC;AAApB,IAAkCC,OAAO,CAAC,MAAD,CAA/C,C,CACA;AACA;;;AACA,MAAMC,WAAW,GAAGJ,OAAO,CAACK,SAAD,EAAY,qBAAZ,CAA3B,C,CAEA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,CAACC,WAAD,EAAcC,QAAd,EAAwBC,GAAxB,KAAgC;EAC9C,MAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,MAAjB,CAAwBC,CAAC,IAAI,UAAUC,IAAV,CAAeD,CAAf,KAAqBL,GAAG,CAACK,CAAD,CAArD,EACVE,GADU,CACNF,CAAC,IAAIL,GAAG,CAACK,CAAD,CAAH,CAAOG,KAAP,CAAaf,SAAb,CADC,EAEVgB,MAFU,CAEH,CAACC,GAAD,EAAML,CAAN,KAAYK,GAAG,CAACC,MAAJ,CAAWN,CAAC,CAACD,MAAF,CAASQ,SAAS,IAAI,CAACF,GAAG,CAACG,QAAJ,CAAaD,SAAb,CAAvB,CAAX,CAFT,EAEsE,EAFtE,EAGVE,IAHU,CAGLrB,SAHK,CAAb;EAKA,MAAMsB,OAAO,GAAG,EAAhB;;EACA,IAAIhB,QAAJ,EAAc;IACZgB,OAAO,CAACC,IAAR,CAAa,GAAGjB,QAAhB;EACD,CAT6C,CAU9C;EACA;EACA;;;EACA,IAAIM,CAAC,GAAGP,WAAR;EACA,IAAImB,EAAJ;;EACA,GAAG;IACDF,OAAO,CAACC,IAAR,CAAazB,OAAO,CAACc,CAAD,EAAI,cAAJ,EAAoB,MAApB,CAApB;IACAY,EAAE,GAAGZ,CAAL;IACAA,CAAC,GAAGb,OAAO,CAACa,CAAD,CAAX;EACD,CAJD,QAISA,CAAC,KAAKY,EAJf;;EAKAF,OAAO,CAACC,IAAR,CAAarB,WAAb,EAA0BM,IAA1B;EAEA,MAAMiB,OAAO,GAAGH,OAAO,CAACD,IAAR,CAAarB,SAAb,CAAhB,CAtB8C,CAwB9C;EACA;EACA;;EACA,KAAK,MAAM0B,GAAX,IAAkBjB,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAlB,EAAoC;IAClC,IAAI,UAAUM,IAAV,CAAea,GAAf,CAAJ,EAAyB;MACvBnB,GAAG,CAACmB,GAAD,CAAH,GAAWD,OAAX;IACD;EACF;;EAED,OAAOlB,GAAP;AACD,CAlCD;;AAoCAoB,MAAM,CAACC,OAAP,GAAiBxB,OAAjB"},"metadata":{},"sourceType":"script"}