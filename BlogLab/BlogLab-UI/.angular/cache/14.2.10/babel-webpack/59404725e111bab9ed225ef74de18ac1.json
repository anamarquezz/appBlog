{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.memoize = void 0;\n/**\n * A decorator that memoizes methods and getters.\n *\n * **Note**: Be cautious where and how to use this decorator as the size of the cache will grow unbounded.\n *\n * @see https://en.wikipedia.org/wiki/Memoization\n */\n\nfunction memoize(target, propertyKey, descriptor) {\n  const descriptorPropertyName = descriptor.get ? 'get' : 'value';\n  const originalMethod = descriptor[descriptorPropertyName];\n\n  if (typeof originalMethod !== 'function') {\n    throw new Error('Memoize decorator can only be used on methods or get accessors.');\n  }\n\n  const cache = new Map();\n  return { ...descriptor,\n    [descriptorPropertyName]: function (...args) {\n      for (const arg of args) {\n        if (!isJSONSerializable(arg)) {\n          throw new Error(`Argument ${isNonPrimitive(arg) ? arg.toString() : arg} is JSON serializable.`);\n        }\n      }\n\n      const key = JSON.stringify(args);\n\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n\n      const result = originalMethod.apply(this, args);\n      cache.set(key, result);\n      return result;\n    }\n  };\n}\n\nexports.memoize = memoize;\n/** Method to check if value is a non primitive. */\n\nfunction isNonPrimitive(value) {\n  return value !== null && typeof value === 'object' || typeof value === 'function' || typeof value === 'symbol';\n}\n/** Method to check if the values are JSON serializable */\n\n\nfunction isJSONSerializable(value) {\n  if (!isNonPrimitive(value)) {\n    // Can be seralized since it's a primitive.\n    return true;\n  }\n\n  let nestedValues;\n\n  if (Array.isArray(value)) {\n    // It's an array, check each item.\n    nestedValues = value;\n  } else if (Object.prototype.toString.call(value) === '[object Object]') {\n    // It's a plain object, check each value.\n    nestedValues = Object.values(value);\n  }\n\n  if (!nestedValues || nestedValues.some(v => !isJSONSerializable(v))) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","memoize","target","propertyKey","descriptor","descriptorPropertyName","get","originalMethod","Error","cache","Map","args","arg","isJSONSerializable","isNonPrimitive","toString","key","JSON","stringify","has","result","apply","set","nestedValues","Array","isArray","prototype","call","values","some","v"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/utilities/memoize.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.memoize = void 0;\n/**\n * A decorator that memoizes methods and getters.\n *\n * **Note**: Be cautious where and how to use this decorator as the size of the cache will grow unbounded.\n *\n * @see https://en.wikipedia.org/wiki/Memoization\n */\nfunction memoize(target, propertyKey, descriptor) {\n    const descriptorPropertyName = descriptor.get ? 'get' : 'value';\n    const originalMethod = descriptor[descriptorPropertyName];\n    if (typeof originalMethod !== 'function') {\n        throw new Error('Memoize decorator can only be used on methods or get accessors.');\n    }\n    const cache = new Map();\n    return {\n        ...descriptor,\n        [descriptorPropertyName]: function (...args) {\n            for (const arg of args) {\n                if (!isJSONSerializable(arg)) {\n                    throw new Error(`Argument ${isNonPrimitive(arg) ? arg.toString() : arg} is JSON serializable.`);\n                }\n            }\n            const key = JSON.stringify(args);\n            if (cache.has(key)) {\n                return cache.get(key);\n            }\n            const result = originalMethod.apply(this, args);\n            cache.set(key, result);\n            return result;\n        },\n    };\n}\nexports.memoize = memoize;\n/** Method to check if value is a non primitive. */\nfunction isNonPrimitive(value) {\n    return ((value !== null && typeof value === 'object') ||\n        typeof value === 'function' ||\n        typeof value === 'symbol');\n}\n/** Method to check if the values are JSON serializable */\nfunction isJSONSerializable(value) {\n    if (!isNonPrimitive(value)) {\n        // Can be seralized since it's a primitive.\n        return true;\n    }\n    let nestedValues;\n    if (Array.isArray(value)) {\n        // It's an array, check each item.\n        nestedValues = value;\n    }\n    else if (Object.prototype.toString.call(value) === '[object Object]') {\n        // It's a plain object, check each value.\n        nestedValues = Object.values(value);\n    }\n    if (!nestedValues || nestedValues.some((v) => !isJSONSerializable(v))) {\n        return false;\n    }\n    return true;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,WAAzB,EAAsCC,UAAtC,EAAkD;EAC9C,MAAMC,sBAAsB,GAAGD,UAAU,CAACE,GAAX,GAAiB,KAAjB,GAAyB,OAAxD;EACA,MAAMC,cAAc,GAAGH,UAAU,CAACC,sBAAD,CAAjC;;EACA,IAAI,OAAOE,cAAP,KAA0B,UAA9B,EAA0C;IACtC,MAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;EACH;;EACD,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;EACA,OAAO,EACH,GAAGN,UADA;IAEH,CAACC,sBAAD,GAA0B,UAAU,GAAGM,IAAb,EAAmB;MACzC,KAAK,MAAMC,GAAX,IAAkBD,IAAlB,EAAwB;QACpB,IAAI,CAACE,kBAAkB,CAACD,GAAD,CAAvB,EAA8B;UAC1B,MAAM,IAAIJ,KAAJ,CAAW,YAAWM,cAAc,CAACF,GAAD,CAAd,GAAsBA,GAAG,CAACG,QAAJ,EAAtB,GAAuCH,GAAI,wBAAjE,CAAN;QACH;MACJ;;MACD,MAAMI,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAZ;;MACA,IAAIF,KAAK,CAACU,GAAN,CAAUH,GAAV,CAAJ,EAAoB;QAChB,OAAOP,KAAK,CAACH,GAAN,CAAUU,GAAV,CAAP;MACH;;MACD,MAAMI,MAAM,GAAGb,cAAc,CAACc,KAAf,CAAqB,IAArB,EAA2BV,IAA3B,CAAf;MACAF,KAAK,CAACa,GAAN,CAAUN,GAAV,EAAeI,MAAf;MACA,OAAOA,MAAP;IACH;EAfE,CAAP;AAiBH;;AACDrB,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACA;;AACA,SAASa,cAAT,CAAwBd,KAAxB,EAA+B;EAC3B,OAASA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAApC,IACJ,OAAOA,KAAP,KAAiB,UADb,IAEJ,OAAOA,KAAP,KAAiB,QAFrB;AAGH;AACD;;;AACA,SAASa,kBAAT,CAA4Bb,KAA5B,EAAmC;EAC/B,IAAI,CAACc,cAAc,CAACd,KAAD,CAAnB,EAA4B;IACxB;IACA,OAAO,IAAP;EACH;;EACD,IAAIuB,YAAJ;;EACA,IAAIC,KAAK,CAACC,OAAN,CAAczB,KAAd,CAAJ,EAA0B;IACtB;IACAuB,YAAY,GAAGvB,KAAf;EACH,CAHD,MAIK,IAAIH,MAAM,CAAC6B,SAAP,CAAiBX,QAAjB,CAA0BY,IAA1B,CAA+B3B,KAA/B,MAA0C,iBAA9C,EAAiE;IAClE;IACAuB,YAAY,GAAG1B,MAAM,CAAC+B,MAAP,CAAc5B,KAAd,CAAf;EACH;;EACD,IAAI,CAACuB,YAAD,IAAiBA,YAAY,CAACM,IAAb,CAAmBC,CAAD,IAAO,CAACjB,kBAAkB,CAACiB,CAAD,CAA5C,CAArB,EAAuE;IACnE,OAAO,KAAP;EACH;;EACD,OAAO,IAAP;AACH"},"metadata":{},"sourceType":"script"}