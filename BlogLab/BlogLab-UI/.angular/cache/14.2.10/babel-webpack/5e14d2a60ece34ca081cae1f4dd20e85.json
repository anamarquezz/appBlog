{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst fs = require('@npmcli/fs');\n\nconst fsm = require('fs-minipass');\n\nconst ssri = require('ssri');\n\nconst contentPath = require('./path');\n\nconst Pipeline = require('minipass-pipeline');\n\nmodule.exports = read;\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\n\nfunction read(_x, _x2) {\n  return _read.apply(this, arguments);\n}\n\nfunction _read() {\n  _read = _asyncToGenerator(function* (cache, integrity, opts = {}) {\n    const {\n      size\n    } = opts;\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (cpath, sri) {\n        // get size\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n\n      return function (_x10, _x11) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    if (typeof size === 'number' && stat.size !== size) {\n      throw sizeError(size, stat.size);\n    }\n\n    if (stat.size > MAX_SINGLE_READ_SIZE) {\n      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n    }\n\n    const data = yield fs.readFile(cpath, {\n      encoding: null\n    });\n\n    if (!ssri.checkData(data, sri)) {\n      throw integrityError(sri, cpath);\n    }\n\n    return data;\n  });\n  return _read.apply(this, arguments);\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(new fsm.ReadStream(cpath, {\n    size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size\n  }));\n  return stream;\n};\n\nmodule.exports.sync = readSync;\n\nfunction readSync(cache, integrity, opts = {}) {\n  const {\n    size\n  } = opts;\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath, {\n      encoding: null\n    });\n\n    if (typeof size === 'number' && size !== data.length) {\n      throw sizeError(size, data.length);\n    }\n\n    if (ssri.checkData(data, sri)) {\n      return data;\n    }\n\n    throw integrityError(sri, cpath);\n  });\n}\n\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\n\nfunction readStream(cache, integrity, opts = {}) {\n  const {\n    size\n  } = opts;\n  const stream = new Pipeline(); // Set all this up to run on the stream and then just return the stream\n\n  Promise.resolve().then( /*#__PURE__*/_asyncToGenerator(function* () {\n    const {\n      stat,\n      cpath,\n      sri\n    } = yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (cpath, sri) {\n        // just stat to ensure it exists\n        const stat = yield fs.stat(cpath);\n        return {\n          stat,\n          cpath,\n          sri\n        };\n      });\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size));\n    }\n\n    return readPipeline(cpath, stat.size, sri, stream);\n  })).catch(err => stream.emit('error', err));\n  return stream;\n}\n\nmodule.exports.copy = copy;\nmodule.exports.copy.sync = copySync;\n\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest);\n  });\n}\n\nfunction copySync(cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\n\nmodule.exports.hasContent = hasContent;\n\nfunction hasContent(_x5, _x6) {\n  return _hasContent.apply(this, arguments);\n}\n\nfunction _hasContent() {\n  _hasContent = _asyncToGenerator(function* (cache, integrity) {\n    if (!integrity) {\n      return false;\n    }\n\n    try {\n      return yield withContentSri(cache, integrity, /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (cpath, sri) {\n          const stat = yield fs.stat(cpath);\n          return {\n            size: stat.size,\n            sri,\n            stat\n          };\n        });\n\n        return function (_x12, _x13) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n  return _hasContent.apply(this, arguments);\n}\n\nmodule.exports.hasContent.sync = hasContentSync;\n\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) {\n    return false;\n  }\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.statSync(cpath);\n      return {\n        size: stat.size,\n        sri,\n        stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n}\n\nfunction withContentSri(_x7, _x8, _x9) {\n  return _withContentSri.apply(this, arguments);\n}\n\nfunction _withContentSri() {\n  _withContentSri = _asyncToGenerator(function* (cache, integrity, fn) {\n    const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n\n    const algo = sri.pickAlgorithm();\n    const digests = sri[algo];\n\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      const results = yield Promise.all(digests.map( /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator(function* (meta) {\n          try {\n            return yield withContentSri(cache, meta, fn);\n          } catch (err) {\n            if (err.code === 'ENOENT') {\n              return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n                code: 'ENOENT'\n              });\n            }\n\n            return err;\n          }\n        });\n\n        return function (_x14) {\n          return _ref5.apply(this, arguments);\n        };\n      }())); // Return the first non error if it is found\n\n      const result = results.find(r => !(r instanceof Error));\n\n      if (result) {\n        return result;\n      } // Throw the No matching content found error\n\n\n      const enoentError = results.find(r => r.code === 'ENOENT');\n\n      if (enoentError) {\n        throw enoentError;\n      } // Throw generic error\n\n\n      throw results.find(r => r instanceof Error);\n    }\n  });\n  return _withContentSri.apply(this, arguments);\n}\n\nfunction withContentSriSync(cache, integrity, fn) {\n  const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n\n  const algo = sri.pickAlgorithm();\n  const digests = sri[algo];\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    let lastErr = null;\n\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn);\n      } catch (err) {\n        lastErr = err;\n      }\n    }\n\n    throw lastErr;\n  }\n}\n\nfunction sizeError(expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\n\nfunction integrityError(sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`);\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"names":["fs","require","fsm","ssri","contentPath","Pipeline","module","exports","read","MAX_SINGLE_READ_SIZE","cache","integrity","opts","size","stat","cpath","sri","withContentSri","sizeError","readPipeline","concat","data","readFile","encoding","checkData","integrityError","stream","push","ReadStream","readSize","integrityStream","sync","readSync","withContentSriSync","readFileSync","length","readStream","Promise","resolve","then","emit","catch","err","copy","copySync","dest","copyFile","copyFileSync","hasContent","code","process","platform","hasContentSync","statSync","fn","parse","algo","pickAlgorithm","digests","results","all","map","meta","Object","assign","Error","toString","result","find","r","enoentError","lastErr","expected","found","path"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/cacache/lib/content/read.js"],"sourcesContent":["'use strict'\n\nconst fs = require('@npmcli/fs')\nconst fsm = require('fs-minipass')\nconst ssri = require('ssri')\nconst contentPath = require('./path')\nconst Pipeline = require('minipass-pipeline')\n\nmodule.exports = read\n\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024\nasync function read (cache, integrity, opts = {}) {\n  const { size } = opts\n  const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n    // get size\n    const stat = await fs.stat(cpath)\n    return { stat, cpath, sri }\n  })\n  if (typeof size === 'number' && stat.size !== size) {\n    throw sizeError(size, stat.size)\n  }\n\n  if (stat.size > MAX_SINGLE_READ_SIZE) {\n    return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()\n  }\n\n  const data = await fs.readFile(cpath, { encoding: null })\n  if (!ssri.checkData(data, sri)) {\n    throw integrityError(sri, cpath)\n  }\n\n  return data\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(\n    new fsm.ReadStream(cpath, {\n      size,\n      readSize: MAX_SINGLE_READ_SIZE,\n    }),\n    ssri.integrityStream({\n      integrity: sri,\n      size,\n    })\n  )\n  return stream\n}\n\nmodule.exports.sync = readSync\n\nfunction readSync (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath, { encoding: null })\n    if (typeof size === 'number' && size !== data.length) {\n      throw sizeError(size, data.length)\n    }\n\n    if (ssri.checkData(data, sri)) {\n      return data\n    }\n\n    throw integrityError(sri, cpath)\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\n\nfunction readStream (cache, integrity, opts = {}) {\n  const { size } = opts\n  const stream = new Pipeline()\n  // Set all this up to run on the stream and then just return the stream\n  Promise.resolve().then(async () => {\n    const { stat, cpath, sri } = await withContentSri(cache, integrity, async (cpath, sri) => {\n      // just stat to ensure it exists\n      const stat = await fs.stat(cpath)\n      return { stat, cpath, sri }\n    })\n    if (typeof size === 'number' && size !== stat.size) {\n      return stream.emit('error', sizeError(size, stat.size))\n    }\n\n    return readPipeline(cpath, stat.size, sri, stream)\n  }).catch(err => stream.emit('error', err))\n\n  return stream\n}\n\nmodule.exports.copy = copy\nmodule.exports.copy.sync = copySync\n\nfunction copy (cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return fs.copyFile(cpath, dest)\n  })\n}\n\nfunction copySync (cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\n\nasync function hasContent (cache, integrity) {\n  if (!integrity) {\n    return false\n  }\n\n  try {\n    return await withContentSri(cache, integrity, async (cpath, sri) => {\n      const stat = await fs.stat(cpath)\n      return { size: stat.size, sri, stat }\n    })\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return false\n    }\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') {\n        throw err\n      } else {\n        return false\n      }\n    }\n  }\n}\n\nmodule.exports.hasContent.sync = hasContentSync\n\nfunction hasContentSync (cache, integrity) {\n  if (!integrity) {\n    return false\n  }\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.statSync(cpath)\n      return { size: stat.size, sri, stat }\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false\n      }\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') {\n          throw err\n        } else {\n          return false\n        }\n      }\n    }\n  })\n}\n\nasync function withContentSri (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    // Can't use race here because a generic error can happen before\n    // a ENOENT error, and can happen before a valid result\n    const results = await Promise.all(digests.map(async (meta) => {\n      try {\n        return await withContentSri(cache, meta, fn)\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          return Object.assign(\n            new Error('No matching content found for ' + sri.toString()),\n            { code: 'ENOENT' }\n          )\n        }\n        return err\n      }\n    }))\n    // Return the first non error if it is found\n    const result = results.find((r) => !(r instanceof Error))\n    if (result) {\n      return result\n    }\n\n    // Throw the No matching content found error\n    const enoentError = results.find((r) => r.code === 'ENOENT')\n    if (enoentError) {\n      throw enoentError\n    }\n\n    // Throw generic error\n    throw results.find((r) => r instanceof Error)\n  }\n}\n\nfunction withContentSriSync (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    let lastErr = null\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn)\n      } catch (err) {\n        lastErr = err\n      }\n    }\n    throw lastErr\n  }\n}\n\nfunction sizeError (expected, found) {\n  /* eslint-disable-next-line max-len */\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}