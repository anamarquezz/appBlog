{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default('https-proxy-agent:parse-proxy-response');\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('close', onclose);\n      socket.removeListener('readable', read);\n    }\n\n    function onclose(err) {\n      debug('onclose had error %o', err);\n    }\n\n    function onend() {\n      debug('onend');\n    }\n\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const firstLine = buffered.toString('ascii', 0, buffered.indexOf('\\r\\n'));\n      const statusCode = +firstLine.split(' ')[1];\n      debug('got proxy server response: %o', firstLine);\n      resolve({\n        statusCode,\n        buffered\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('close', onclose);\n    socket.on('end', onend);\n    read();\n  });\n}\n\nexports.default = parseProxyResponse;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","debug_1","require","debug","default","parseProxyResponse","socket","Promise","resolve","reject","buffersLength","buffers","read","b","ondata","once","cleanup","removeListener","onend","onerror","onclose","err","push","length","buffered","Buffer","concat","endOfHeaders","indexOf","firstLine","toString","statusCode","split","on"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/https-proxy-agent/dist/parse-proxy-response.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default('https-proxy-agent:parse-proxy-response');\nfunction parseProxyResponse(socket) {\n    return new Promise((resolve, reject) => {\n        // we need to buffer any HTTP traffic that happens with the proxy before we get\n        // the CONNECT response, so that if the response is anything other than an \"200\"\n        // response code, then we can re-play the \"data\" events on the socket once the\n        // HTTP parser is hooked up...\n        let buffersLength = 0;\n        const buffers = [];\n        function read() {\n            const b = socket.read();\n            if (b)\n                ondata(b);\n            else\n                socket.once('readable', read);\n        }\n        function cleanup() {\n            socket.removeListener('end', onend);\n            socket.removeListener('error', onerror);\n            socket.removeListener('close', onclose);\n            socket.removeListener('readable', read);\n        }\n        function onclose(err) {\n            debug('onclose had error %o', err);\n        }\n        function onend() {\n            debug('onend');\n        }\n        function onerror(err) {\n            cleanup();\n            debug('onerror %o', err);\n            reject(err);\n        }\n        function ondata(b) {\n            buffers.push(b);\n            buffersLength += b.length;\n            const buffered = Buffer.concat(buffers, buffersLength);\n            const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n            if (endOfHeaders === -1) {\n                // keep buffering\n                debug('have not received end of HTTP headers yet...');\n                read();\n                return;\n            }\n            const firstLine = buffered.toString('ascii', 0, buffered.indexOf('\\r\\n'));\n            const statusCode = +firstLine.split(' ')[1];\n            debug('got proxy server response: %o', firstLine);\n            resolve({\n                statusCode,\n                buffered\n            });\n        }\n        socket.on('error', onerror);\n        socket.on('close', onclose);\n        socket.on('end', onend);\n        read();\n    });\n}\nexports.default = parseProxyResponse;\n"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGP,eAAe,CAACQ,OAAO,CAAC,OAAD,CAAR,CAA/B;;AACA,MAAMC,KAAK,GAAGF,OAAO,CAACG,OAAR,CAAgB,wCAAhB,CAAd;;AACA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;EAChC,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACpC;IACA;IACA;IACA;IACA,IAAIC,aAAa,GAAG,CAApB;IACA,MAAMC,OAAO,GAAG,EAAhB;;IACA,SAASC,IAAT,GAAgB;MACZ,MAAMC,CAAC,GAAGP,MAAM,CAACM,IAAP,EAAV;MACA,IAAIC,CAAJ,EACIC,MAAM,CAACD,CAAD,CAAN,CADJ,KAGIP,MAAM,CAACS,IAAP,CAAY,UAAZ,EAAwBH,IAAxB;IACP;;IACD,SAASI,OAAT,GAAmB;MACfV,MAAM,CAACW,cAAP,CAAsB,KAAtB,EAA6BC,KAA7B;MACAZ,MAAM,CAACW,cAAP,CAAsB,OAAtB,EAA+BE,OAA/B;MACAb,MAAM,CAACW,cAAP,CAAsB,OAAtB,EAA+BG,OAA/B;MACAd,MAAM,CAACW,cAAP,CAAsB,UAAtB,EAAkCL,IAAlC;IACH;;IACD,SAASQ,OAAT,CAAiBC,GAAjB,EAAsB;MAClBlB,KAAK,CAAC,sBAAD,EAAyBkB,GAAzB,CAAL;IACH;;IACD,SAASH,KAAT,GAAiB;MACbf,KAAK,CAAC,OAAD,CAAL;IACH;;IACD,SAASgB,OAAT,CAAiBE,GAAjB,EAAsB;MAClBL,OAAO;MACPb,KAAK,CAAC,YAAD,EAAekB,GAAf,CAAL;MACAZ,MAAM,CAACY,GAAD,CAAN;IACH;;IACD,SAASP,MAAT,CAAgBD,CAAhB,EAAmB;MACfF,OAAO,CAACW,IAAR,CAAaT,CAAb;MACAH,aAAa,IAAIG,CAAC,CAACU,MAAnB;MACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcf,OAAd,EAAuBD,aAAvB,CAAjB;MACA,MAAMiB,YAAY,GAAGH,QAAQ,CAACI,OAAT,CAAiB,UAAjB,CAArB;;MACA,IAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB;QACrB;QACAxB,KAAK,CAAC,8CAAD,CAAL;QACAS,IAAI;QACJ;MACH;;MACD,MAAMiB,SAAS,GAAGL,QAAQ,CAACM,QAAT,CAAkB,OAAlB,EAA2B,CAA3B,EAA8BN,QAAQ,CAACI,OAAT,CAAiB,MAAjB,CAA9B,CAAlB;MACA,MAAMG,UAAU,GAAG,CAACF,SAAS,CAACG,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAApB;MACA7B,KAAK,CAAC,+BAAD,EAAkC0B,SAAlC,CAAL;MACArB,OAAO,CAAC;QACJuB,UADI;QAEJP;MAFI,CAAD,CAAP;IAIH;;IACDlB,MAAM,CAAC2B,EAAP,CAAU,OAAV,EAAmBd,OAAnB;IACAb,MAAM,CAAC2B,EAAP,CAAU,OAAV,EAAmBb,OAAnB;IACAd,MAAM,CAAC2B,EAAP,CAAU,KAAV,EAAiBf,KAAjB;IACAN,IAAI;EACP,CAtDM,CAAP;AAuDH;;AACDb,OAAO,CAACK,OAAR,GAAkBC,kBAAlB"},"metadata":{},"sourceType":"script"}