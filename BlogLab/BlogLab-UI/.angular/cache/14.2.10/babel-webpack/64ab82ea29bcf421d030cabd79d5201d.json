{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArchitectCommandModule = void 0;\n\nconst config_1 = require(\"../utilities/config\");\n\nconst memoize_1 = require(\"../utilities/memoize\");\n\nconst architect_base_command_module_1 = require(\"./architect-base-command-module\");\n\nconst command_module_1 = require(\"./command-module\");\n\nclass ArchitectCommandModule extends architect_base_command_module_1.ArchitectBaseCommandModule {\n  builder(argv) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const project = _this.getArchitectProject();\n\n      const {\n        jsonHelp,\n        getYargsCompletions,\n        help\n      } = _this.context.args.options;\n      const localYargs = argv.positional('project', {\n        describe: 'The name of the project to build. Can be an application or a library.',\n        type: 'string',\n        // Hide choices from JSON help so that we don't display them in AIO.\n        choices: jsonHelp ? undefined : _this.getProjectChoices()\n      }).option('configuration', {\n        describe: `One or more named builder configurations as a comma-separated ` + `list as specified in the \"configurations\" section in angular.json.\\n` + `The builder uses the named configurations to run the given target.\\n` + `For more information, see https://angular.io/guide/workspace-config#alternate-build-configurations.`,\n        alias: 'c',\n        type: 'string',\n        // Show only in when using --help and auto completion because otherwise comma seperated configuration values will be invalid.\n        // Also, hide choices from JSON help so that we don't display them in AIO.\n        choices: (getYargsCompletions || help) && !jsonHelp && project ? _this.getConfigurationChoices(project) : undefined\n      }).strict();\n\n      if (!project) {\n        return localYargs;\n      }\n\n      const target = _this.getArchitectTarget();\n\n      const schemaOptions = yield _this.getArchitectTargetOptions({\n        project,\n        target\n      });\n      return _this.addSchemaOptionsToCommand(localYargs, schemaOptions);\n    })();\n  }\n\n  run(options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const target = _this2.getArchitectTarget();\n\n      const {\n        configuration = '',\n        project,\n        ...architectOptions\n      } = options;\n\n      if (!project) {\n        // This runs each target sequentially.\n        // Running them in parallel would jumble the log messages.\n        let result = 0;\n\n        const projectNames = _this2.getProjectNamesByTarget(target);\n\n        if (!projectNames) {\n          return _this2.onMissingTarget('Cannot determine project or target for command.');\n        }\n\n        for (const project of projectNames) {\n          result |= yield _this2.runSingleTarget({\n            configuration,\n            target,\n            project\n          }, architectOptions);\n        }\n\n        return result;\n      } else {\n        return yield _this2.runSingleTarget({\n          configuration,\n          target,\n          project\n        }, architectOptions);\n      }\n    })();\n  }\n\n  getArchitectProject() {\n    const {\n      options,\n      positional\n    } = this.context.args;\n    const [, projectName] = positional;\n\n    if (projectName) {\n      return projectName;\n    } // Yargs allows positional args to be used as flags.\n\n\n    if (typeof options['project'] === 'string') {\n      return options['project'];\n    }\n\n    const target = this.getArchitectTarget();\n    const projectFromTarget = this.getProjectNamesByTarget(target);\n    return (projectFromTarget === null || projectFromTarget === void 0 ? void 0 : projectFromTarget.length) ? projectFromTarget[0] : undefined;\n  }\n\n  getProjectNamesByTarget(target) {\n    const workspace = this.getWorkspaceOrThrow();\n    const allProjectsForTargetName = [];\n\n    for (const [name, project] of workspace.projects) {\n      if (project.targets.has(target)) {\n        allProjectsForTargetName.push(name);\n      }\n    }\n\n    if (allProjectsForTargetName.length === 0) {\n      return undefined;\n    }\n\n    if (this.multiTarget) {\n      // For multi target commands, we always list all projects that have the target.\n      return allProjectsForTargetName;\n    } else {\n      if (allProjectsForTargetName.length === 1) {\n        return allProjectsForTargetName;\n      }\n\n      const maybeProject = (0, config_1.getProjectByCwd)(workspace);\n\n      if (maybeProject) {\n        return allProjectsForTargetName.includes(maybeProject) ? [maybeProject] : undefined;\n      }\n\n      const {\n        getYargsCompletions,\n        help\n      } = this.context.args.options;\n\n      if (!getYargsCompletions && !help) {\n        // Only issue the below error when not in help / completion mode.\n        throw new command_module_1.CommandModuleError('Cannot determine project for command.\\n' + 'This is a multi-project workspace and more than one project supports this command. ' + `Run \"ng ${this.command}\" to execute the command for a specific project or change the current ` + 'working directory to a project directory.\\n\\n' + `Available projects are:\\n${allProjectsForTargetName.sort().map(p => `- ${p}`).join('\\n')}`);\n      }\n    }\n\n    return undefined;\n  }\n  /** @returns a sorted list of project names to be used for auto completion. */\n\n\n  getProjectChoices() {\n    const {\n      workspace\n    } = this.context;\n    return workspace ? [...workspace.projects.keys()].sort() : undefined;\n  }\n  /** @returns a sorted list of configuration names to be used for auto completion. */\n\n\n  getConfigurationChoices(project) {\n    var _a, _b;\n\n    const projectDefinition = (_a = this.context.workspace) === null || _a === void 0 ? void 0 : _a.projects.get(project);\n\n    if (!projectDefinition) {\n      return undefined;\n    }\n\n    const target = this.getArchitectTarget();\n    const configurations = (_b = projectDefinition.targets.get(target)) === null || _b === void 0 ? void 0 : _b.configurations;\n    return configurations ? Object.keys(configurations).sort() : undefined;\n  }\n\n}\n\n__decorate([memoize_1.memoize], ArchitectCommandModule.prototype, \"getProjectNamesByTarget\", null);\n\nexports.ArchitectCommandModule = ArchitectCommandModule;","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","ArchitectCommandModule","config_1","require","memoize_1","architect_base_command_module_1","command_module_1","ArchitectBaseCommandModule","builder","argv","project","getArchitectProject","jsonHelp","getYargsCompletions","help","context","args","options","localYargs","positional","describe","type","choices","undefined","getProjectChoices","option","alias","getConfigurationChoices","strict","getArchitectTarget","schemaOptions","getArchitectTargetOptions","addSchemaOptionsToCommand","run","configuration","architectOptions","result","projectNames","getProjectNamesByTarget","onMissingTarget","runSingleTarget","projectName","projectFromTarget","workspace","getWorkspaceOrThrow","allProjectsForTargetName","name","projects","targets","has","push","multiTarget","maybeProject","getProjectByCwd","includes","CommandModuleError","command","sort","map","p","join","keys","_a","_b","projectDefinition","get","configurations","memoize","prototype"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/command-builder/architect-command-module.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArchitectCommandModule = void 0;\nconst config_1 = require(\"../utilities/config\");\nconst memoize_1 = require(\"../utilities/memoize\");\nconst architect_base_command_module_1 = require(\"./architect-base-command-module\");\nconst command_module_1 = require(\"./command-module\");\nclass ArchitectCommandModule extends architect_base_command_module_1.ArchitectBaseCommandModule {\n    async builder(argv) {\n        const project = this.getArchitectProject();\n        const { jsonHelp, getYargsCompletions, help } = this.context.args.options;\n        const localYargs = argv\n            .positional('project', {\n            describe: 'The name of the project to build. Can be an application or a library.',\n            type: 'string',\n            // Hide choices from JSON help so that we don't display them in AIO.\n            choices: jsonHelp ? undefined : this.getProjectChoices(),\n        })\n            .option('configuration', {\n            describe: `One or more named builder configurations as a comma-separated ` +\n                `list as specified in the \"configurations\" section in angular.json.\\n` +\n                `The builder uses the named configurations to run the given target.\\n` +\n                `For more information, see https://angular.io/guide/workspace-config#alternate-build-configurations.`,\n            alias: 'c',\n            type: 'string',\n            // Show only in when using --help and auto completion because otherwise comma seperated configuration values will be invalid.\n            // Also, hide choices from JSON help so that we don't display them in AIO.\n            choices: (getYargsCompletions || help) && !jsonHelp && project\n                ? this.getConfigurationChoices(project)\n                : undefined,\n        })\n            .strict();\n        if (!project) {\n            return localYargs;\n        }\n        const target = this.getArchitectTarget();\n        const schemaOptions = await this.getArchitectTargetOptions({\n            project,\n            target,\n        });\n        return this.addSchemaOptionsToCommand(localYargs, schemaOptions);\n    }\n    async run(options) {\n        const target = this.getArchitectTarget();\n        const { configuration = '', project, ...architectOptions } = options;\n        if (!project) {\n            // This runs each target sequentially.\n            // Running them in parallel would jumble the log messages.\n            let result = 0;\n            const projectNames = this.getProjectNamesByTarget(target);\n            if (!projectNames) {\n                return this.onMissingTarget('Cannot determine project or target for command.');\n            }\n            for (const project of projectNames) {\n                result |= await this.runSingleTarget({ configuration, target, project }, architectOptions);\n            }\n            return result;\n        }\n        else {\n            return await this.runSingleTarget({ configuration, target, project }, architectOptions);\n        }\n    }\n    getArchitectProject() {\n        const { options, positional } = this.context.args;\n        const [, projectName] = positional;\n        if (projectName) {\n            return projectName;\n        }\n        // Yargs allows positional args to be used as flags.\n        if (typeof options['project'] === 'string') {\n            return options['project'];\n        }\n        const target = this.getArchitectTarget();\n        const projectFromTarget = this.getProjectNamesByTarget(target);\n        return (projectFromTarget === null || projectFromTarget === void 0 ? void 0 : projectFromTarget.length) ? projectFromTarget[0] : undefined;\n    }\n    getProjectNamesByTarget(target) {\n        const workspace = this.getWorkspaceOrThrow();\n        const allProjectsForTargetName = [];\n        for (const [name, project] of workspace.projects) {\n            if (project.targets.has(target)) {\n                allProjectsForTargetName.push(name);\n            }\n        }\n        if (allProjectsForTargetName.length === 0) {\n            return undefined;\n        }\n        if (this.multiTarget) {\n            // For multi target commands, we always list all projects that have the target.\n            return allProjectsForTargetName;\n        }\n        else {\n            if (allProjectsForTargetName.length === 1) {\n                return allProjectsForTargetName;\n            }\n            const maybeProject = (0, config_1.getProjectByCwd)(workspace);\n            if (maybeProject) {\n                return allProjectsForTargetName.includes(maybeProject) ? [maybeProject] : undefined;\n            }\n            const { getYargsCompletions, help } = this.context.args.options;\n            if (!getYargsCompletions && !help) {\n                // Only issue the below error when not in help / completion mode.\n                throw new command_module_1.CommandModuleError('Cannot determine project for command.\\n' +\n                    'This is a multi-project workspace and more than one project supports this command. ' +\n                    `Run \"ng ${this.command}\" to execute the command for a specific project or change the current ` +\n                    'working directory to a project directory.\\n\\n' +\n                    `Available projects are:\\n${allProjectsForTargetName\n                        .sort()\n                        .map((p) => `- ${p}`)\n                        .join('\\n')}`);\n            }\n        }\n        return undefined;\n    }\n    /** @returns a sorted list of project names to be used for auto completion. */\n    getProjectChoices() {\n        const { workspace } = this.context;\n        return workspace ? [...workspace.projects.keys()].sort() : undefined;\n    }\n    /** @returns a sorted list of configuration names to be used for auto completion. */\n    getConfigurationChoices(project) {\n        var _a, _b;\n        const projectDefinition = (_a = this.context.workspace) === null || _a === void 0 ? void 0 : _a.projects.get(project);\n        if (!projectDefinition) {\n            return undefined;\n        }\n        const target = this.getArchitectTarget();\n        const configurations = (_b = projectDefinition.targets.get(target)) === null || _b === void 0 ? void 0 : _b.configurations;\n        return configurations ? Object.keys(configurations).sort() : undefined;\n    }\n}\n__decorate([\n    memoize_1.memoize\n], ArchitectCommandModule.prototype, \"getProjectNamesByTarget\", null);\nexports.ArchitectCommandModule = ArchitectCommandModule;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAIA,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;EAAA,IAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;EAAA,IAA2HO,CAA3H;EACA,IAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;EAC7E,OAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAxB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,sBAAD,CAAzB;;AACA,MAAME,+BAA+B,GAAGF,OAAO,CAAC,iCAAD,CAA/C;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,kBAAD,CAAhC;;AACA,MAAMF,sBAAN,SAAqCI,+BAA+B,CAACE,0BAArE,CAAgG;EACtFC,OAAO,CAACC,IAAD,EAAO;IAAA;;IAAA;MAChB,MAAMC,OAAO,GAAG,KAAI,CAACC,mBAAL,EAAhB;;MACA,MAAM;QAAEC,QAAF;QAAYC,mBAAZ;QAAiCC;MAAjC,IAA0C,KAAI,CAACC,OAAL,CAAaC,IAAb,CAAkBC,OAAlE;MACA,MAAMC,UAAU,GAAGT,IAAI,CAClBU,UADc,CACH,SADG,EACQ;QACvBC,QAAQ,EAAE,uEADa;QAEvBC,IAAI,EAAE,QAFiB;QAGvB;QACAC,OAAO,EAAEV,QAAQ,GAAGW,SAAH,GAAe,KAAI,CAACC,iBAAL;MAJT,CADR,EAOdC,MAPc,CAOP,eAPO,EAOU;QACzBL,QAAQ,EAAG,gEAAD,GACL,sEADK,GAEL,sEAFK,GAGL,qGAJoB;QAKzBM,KAAK,EAAE,GALkB;QAMzBL,IAAI,EAAE,QANmB;QAOzB;QACA;QACAC,OAAO,EAAE,CAACT,mBAAmB,IAAIC,IAAxB,KAAiC,CAACF,QAAlC,IAA8CF,OAA9C,GACH,KAAI,CAACiB,uBAAL,CAA6BjB,OAA7B,CADG,GAEHa;MAXmB,CAPV,EAoBdK,MApBc,EAAnB;;MAqBA,IAAI,CAAClB,OAAL,EAAc;QACV,OAAOQ,UAAP;MACH;;MACD,MAAMjC,MAAM,GAAG,KAAI,CAAC4C,kBAAL,EAAf;;MACA,MAAMC,aAAa,SAAS,KAAI,CAACC,yBAAL,CAA+B;QACvDrB,OADuD;QAEvDzB;MAFuD,CAA/B,CAA5B;MAIA,OAAO,KAAI,CAAC+C,yBAAL,CAA+Bd,UAA/B,EAA2CY,aAA3C,CAAP;IAhCgB;EAiCnB;;EACKG,GAAG,CAAChB,OAAD,EAAU;IAAA;;IAAA;MACf,MAAMhC,MAAM,GAAG,MAAI,CAAC4C,kBAAL,EAAf;;MACA,MAAM;QAAEK,aAAa,GAAG,EAAlB;QAAsBxB,OAAtB;QAA+B,GAAGyB;MAAlC,IAAuDlB,OAA7D;;MACA,IAAI,CAACP,OAAL,EAAc;QACV;QACA;QACA,IAAI0B,MAAM,GAAG,CAAb;;QACA,MAAMC,YAAY,GAAG,MAAI,CAACC,uBAAL,CAA6BrD,MAA7B,CAArB;;QACA,IAAI,CAACoD,YAAL,EAAmB;UACf,OAAO,MAAI,CAACE,eAAL,CAAqB,iDAArB,CAAP;QACH;;QACD,KAAK,MAAM7B,OAAX,IAAsB2B,YAAtB,EAAoC;UAChCD,MAAM,UAAU,MAAI,CAACI,eAAL,CAAqB;YAAEN,aAAF;YAAiBjD,MAAjB;YAAyByB;UAAzB,CAArB,EAAyDyB,gBAAzD,CAAhB;QACH;;QACD,OAAOC,MAAP;MACH,CAZD,MAaK;QACD,aAAa,MAAI,CAACI,eAAL,CAAqB;UAAEN,aAAF;UAAiBjD,MAAjB;UAAyByB;QAAzB,CAArB,EAAyDyB,gBAAzD,CAAb;MACH;IAlBc;EAmBlB;;EACDxB,mBAAmB,GAAG;IAClB,MAAM;MAAEM,OAAF;MAAWE;IAAX,IAA0B,KAAKJ,OAAL,CAAaC,IAA7C;IACA,MAAM,GAAGyB,WAAH,IAAkBtB,UAAxB;;IACA,IAAIsB,WAAJ,EAAiB;MACb,OAAOA,WAAP;IACH,CALiB,CAMlB;;;IACA,IAAI,OAAOxB,OAAO,CAAC,SAAD,CAAd,KAA8B,QAAlC,EAA4C;MACxC,OAAOA,OAAO,CAAC,SAAD,CAAd;IACH;;IACD,MAAMhC,MAAM,GAAG,KAAK4C,kBAAL,EAAf;IACA,MAAMa,iBAAiB,GAAG,KAAKJ,uBAAL,CAA6BrD,MAA7B,CAA1B;IACA,OAAO,CAACyD,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACpD,MAAzF,IAAmGoD,iBAAiB,CAAC,CAAD,CAApH,GAA0HnB,SAAjI;EACH;;EACDe,uBAAuB,CAACrD,MAAD,EAAS;IAC5B,MAAM0D,SAAS,GAAG,KAAKC,mBAAL,EAAlB;IACA,MAAMC,wBAAwB,GAAG,EAAjC;;IACA,KAAK,MAAM,CAACC,IAAD,EAAOpC,OAAP,CAAX,IAA8BiC,SAAS,CAACI,QAAxC,EAAkD;MAC9C,IAAIrC,OAAO,CAACsC,OAAR,CAAgBC,GAAhB,CAAoBhE,MAApB,CAAJ,EAAiC;QAC7B4D,wBAAwB,CAACK,IAAzB,CAA8BJ,IAA9B;MACH;IACJ;;IACD,IAAID,wBAAwB,CAACvD,MAAzB,KAAoC,CAAxC,EAA2C;MACvC,OAAOiC,SAAP;IACH;;IACD,IAAI,KAAK4B,WAAT,EAAsB;MAClB;MACA,OAAON,wBAAP;IACH,CAHD,MAIK;MACD,IAAIA,wBAAwB,CAACvD,MAAzB,KAAoC,CAAxC,EAA2C;QACvC,OAAOuD,wBAAP;MACH;;MACD,MAAMO,YAAY,GAAG,CAAC,GAAGlD,QAAQ,CAACmD,eAAb,EAA8BV,SAA9B,CAArB;;MACA,IAAIS,YAAJ,EAAkB;QACd,OAAOP,wBAAwB,CAACS,QAAzB,CAAkCF,YAAlC,IAAkD,CAACA,YAAD,CAAlD,GAAmE7B,SAA1E;MACH;;MACD,MAAM;QAAEV,mBAAF;QAAuBC;MAAvB,IAAgC,KAAKC,OAAL,CAAaC,IAAb,CAAkBC,OAAxD;;MACA,IAAI,CAACJ,mBAAD,IAAwB,CAACC,IAA7B,EAAmC;QAC/B;QACA,MAAM,IAAIR,gBAAgB,CAACiD,kBAArB,CAAwC,4CAC1C,qFAD0C,GAEzC,WAAU,KAAKC,OAAQ,wEAFkB,GAG1C,+CAH0C,GAIzC,4BAA2BX,wBAAwB,CAC/CY,IADuB,GAEvBC,GAFuB,CAElBC,CAAD,IAAQ,KAAIA,CAAE,EAFK,EAGvBC,IAHuB,CAGlB,IAHkB,CAGZ,EAPd,CAAN;MAQH;IACJ;;IACD,OAAOrC,SAAP;EACH;EACD;;;EACAC,iBAAiB,GAAG;IAChB,MAAM;MAAEmB;IAAF,IAAgB,KAAK5B,OAA3B;IACA,OAAO4B,SAAS,GAAG,CAAC,GAAGA,SAAS,CAACI,QAAV,CAAmBc,IAAnB,EAAJ,EAA+BJ,IAA/B,EAAH,GAA2ClC,SAA3D;EACH;EACD;;;EACAI,uBAAuB,CAACjB,OAAD,EAAU;IAC7B,IAAIoD,EAAJ,EAAQC,EAAR;;IACA,MAAMC,iBAAiB,GAAG,CAACF,EAAE,GAAG,KAAK/C,OAAL,CAAa4B,SAAnB,MAAkC,IAAlC,IAA0CmB,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACf,QAAH,CAAYkB,GAAZ,CAAgBvD,OAAhB,CAA7F;;IACA,IAAI,CAACsD,iBAAL,EAAwB;MACpB,OAAOzC,SAAP;IACH;;IACD,MAAMtC,MAAM,GAAG,KAAK4C,kBAAL,EAAf;IACA,MAAMqC,cAAc,GAAG,CAACH,EAAE,GAAGC,iBAAiB,CAAChB,OAAlB,CAA0BiB,GAA1B,CAA8BhF,MAA9B,CAAN,MAAiD,IAAjD,IAAyD8E,EAAE,KAAK,KAAK,CAArE,GAAyE,KAAK,CAA9E,GAAkFA,EAAE,CAACG,cAA5G;IACA,OAAOA,cAAc,GAAG1E,MAAM,CAACqE,IAAP,CAAYK,cAAZ,EAA4BT,IAA5B,EAAH,GAAwClC,SAA7D;EACH;;AA1H2F;;AA4HhGxC,UAAU,CAAC,CACPqB,SAAS,CAAC+D,OADH,CAAD,EAEPlE,sBAAsB,CAACmE,SAFhB,EAE2B,yBAF3B,EAEsD,IAFtD,CAAV;;AAGArE,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC"},"metadata":{},"sourceType":"script"}