{"ast":null,"code":"\"use strict\";\n\nexports = module.exports = cliWidth;\n\nfunction normalizeOpts(options) {\n  let defaultOpts = {\n    defaultWidth: 0,\n    output: process.stdout,\n    tty: require(\"tty\")\n  };\n\n  if (!options) {\n    return defaultOpts;\n  }\n\n  Object.keys(defaultOpts).forEach(function (key) {\n    if (!options[key]) {\n      options[key] = defaultOpts[key];\n    }\n  });\n  return options;\n}\n\nfunction cliWidth(options) {\n  let opts = normalizeOpts(options);\n\n  if (opts.output.getWindowSize) {\n    return opts.output.getWindowSize()[0] || opts.defaultWidth;\n  }\n\n  if (opts.tty.getWindowSize) {\n    return opts.tty.getWindowSize()[1] || opts.defaultWidth;\n  }\n\n  if (opts.output.columns) {\n    return opts.output.columns;\n  }\n\n  if (process.env.CLI_WIDTH) {\n    let width = parseInt(process.env.CLI_WIDTH, 10);\n\n    if (!isNaN(width) && width !== 0) {\n      return width;\n    }\n  }\n\n  return opts.defaultWidth;\n}","map":{"version":3,"names":["exports","module","cliWidth","normalizeOpts","options","defaultOpts","defaultWidth","output","process","stdout","tty","require","Object","keys","forEach","key","opts","getWindowSize","columns","env","CLI_WIDTH","width","parseInt","isNaN"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/cli-width/index.js"],"sourcesContent":["\"use strict\";\n\nexports = module.exports = cliWidth;\n\nfunction normalizeOpts(options) {\n  let defaultOpts = {\n    defaultWidth: 0,\n    output: process.stdout,\n    tty: require(\"tty\"),\n  };\n\n  if (!options) {\n    return defaultOpts;\n  }\n\n  Object.keys(defaultOpts).forEach(function (key) {\n    if (!options[key]) {\n      options[key] = defaultOpts[key];\n    }\n  });\n\n  return options;\n}\n\nfunction cliWidth(options) {\n  let opts = normalizeOpts(options);\n\n  if (opts.output.getWindowSize) {\n    return opts.output.getWindowSize()[0] || opts.defaultWidth;\n  }\n\n  if (opts.tty.getWindowSize) {\n    return opts.tty.getWindowSize()[1] || opts.defaultWidth;\n  }\n\n  if (opts.output.columns) {\n    return opts.output.columns;\n  }\n\n  if (process.env.CLI_WIDTH) {\n    let width = parseInt(process.env.CLI_WIDTH, 10);\n\n    if (!isNaN(width) && width !== 0) {\n      return width;\n    }\n  }\n\n  return opts.defaultWidth;\n}\n"],"mappings":"AAAA;;AAEAA,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,QAA3B;;AAEA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;EAC9B,IAAIC,WAAW,GAAG;IAChBC,YAAY,EAAE,CADE;IAEhBC,MAAM,EAAEC,OAAO,CAACC,MAFA;IAGhBC,GAAG,EAAEC,OAAO,CAAC,KAAD;EAHI,CAAlB;;EAMA,IAAI,CAACP,OAAL,EAAc;IACZ,OAAOC,WAAP;EACD;;EAEDO,MAAM,CAACC,IAAP,CAAYR,WAAZ,EAAyBS,OAAzB,CAAiC,UAAUC,GAAV,EAAe;IAC9C,IAAI,CAACX,OAAO,CAACW,GAAD,CAAZ,EAAmB;MACjBX,OAAO,CAACW,GAAD,CAAP,GAAeV,WAAW,CAACU,GAAD,CAA1B;IACD;EACF,CAJD;EAMA,OAAOX,OAAP;AACD;;AAED,SAASF,QAAT,CAAkBE,OAAlB,EAA2B;EACzB,IAAIY,IAAI,GAAGb,aAAa,CAACC,OAAD,CAAxB;;EAEA,IAAIY,IAAI,CAACT,MAAL,CAAYU,aAAhB,EAA+B;IAC7B,OAAOD,IAAI,CAACT,MAAL,CAAYU,aAAZ,GAA4B,CAA5B,KAAkCD,IAAI,CAACV,YAA9C;EACD;;EAED,IAAIU,IAAI,CAACN,GAAL,CAASO,aAAb,EAA4B;IAC1B,OAAOD,IAAI,CAACN,GAAL,CAASO,aAAT,GAAyB,CAAzB,KAA+BD,IAAI,CAACV,YAA3C;EACD;;EAED,IAAIU,IAAI,CAACT,MAAL,CAAYW,OAAhB,EAAyB;IACvB,OAAOF,IAAI,CAACT,MAAL,CAAYW,OAAnB;EACD;;EAED,IAAIV,OAAO,CAACW,GAAR,CAAYC,SAAhB,EAA2B;IACzB,IAAIC,KAAK,GAAGC,QAAQ,CAACd,OAAO,CAACW,GAAR,CAAYC,SAAb,EAAwB,EAAxB,CAApB;;IAEA,IAAI,CAACG,KAAK,CAACF,KAAD,CAAN,IAAiBA,KAAK,KAAK,CAA/B,EAAkC;MAChC,OAAOA,KAAP;IACD;EACF;;EAED,OAAOL,IAAI,CAACV,YAAZ;AACD"},"metadata":{},"sourceType":"script"}