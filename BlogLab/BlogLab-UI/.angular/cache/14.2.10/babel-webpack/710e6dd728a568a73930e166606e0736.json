{"ast":null,"code":"'use strict';\n\nconst gitHosts = require('./git-host-info.js');\n\nconst GitHost = module.exports = require('./git-host.js');\n\nconst LRU = require('lru-cache');\n\nconst parseUrl = require('./parse-url.js');\n\nconst cache = new LRU({\n  max: 1000\n});\nconst protocols = {\n  'git+ssh:': {\n    name: 'sshurl'\n  },\n  'ssh:': {\n    name: 'sshurl'\n  },\n  'git+https:': {\n    name: 'https',\n    auth: true\n  },\n  'git:': {\n    auth: true\n  },\n  'http:': {\n    auth: true\n  },\n  'https:': {\n    auth: true\n  },\n  'git+http:': {\n    auth: true\n  },\n  ...Object.keys(gitHosts.byShortcut).reduce((acc, key) => {\n    acc[key] = {\n      name: gitHosts.byShortcut[key]\n    };\n    return acc;\n  }, {})\n};\n\nmodule.exports.fromUrl = function (giturl, opts) {\n  if (typeof giturl !== 'string') {\n    return;\n  }\n\n  const key = giturl + JSON.stringify(opts || {});\n\n  if (!cache.has(key)) {\n    cache.set(key, fromUrl(giturl, opts));\n  }\n\n  return cache.get(key);\n};\n\nmodule.exports.parseUrl = parseUrl;\n\nfunction fromUrl(giturl, opts) {\n  if (!giturl) {\n    return;\n  }\n\n  const correctedUrl = isGitHubShorthand(giturl) ? `github:${giturl}` : giturl;\n  const parsed = parseUrl(correctedUrl, protocols);\n\n  if (!parsed) {\n    return;\n  }\n\n  const gitHostShortcut = gitHosts.byShortcut[parsed.protocol];\n  const gitHostDomain = gitHosts.byDomain[parsed.hostname.startsWith('www.') ? parsed.hostname.slice(4) : parsed.hostname];\n  const gitHostName = gitHostShortcut || gitHostDomain;\n\n  if (!gitHostName) {\n    return;\n  }\n\n  const gitHostInfo = gitHosts[gitHostShortcut || gitHostDomain];\n  let auth = null;\n\n  if (protocols[parsed.protocol] && protocols[parsed.protocol].auth && (parsed.username || parsed.password)) {\n    auth = `${parsed.username}${parsed.password ? ':' + parsed.password : ''}`;\n  }\n\n  let committish = null;\n  let user = null;\n  let project = null;\n  let defaultRepresentation = null;\n\n  try {\n    if (gitHostShortcut) {\n      let pathname = parsed.pathname.startsWith('/') ? parsed.pathname.slice(1) : parsed.pathname;\n      const firstAt = pathname.indexOf('@'); // we ignore auth for shortcuts, so just trim it out\n\n      if (firstAt > -1) {\n        pathname = pathname.slice(firstAt + 1);\n      }\n\n      const lastSlash = pathname.lastIndexOf('/');\n\n      if (lastSlash > -1) {\n        user = decodeURIComponent(pathname.slice(0, lastSlash)); // we want nulls only, never empty strings\n\n        if (!user) {\n          user = null;\n        }\n\n        project = decodeURIComponent(pathname.slice(lastSlash + 1));\n      } else {\n        project = decodeURIComponent(pathname);\n      }\n\n      if (project.endsWith('.git')) {\n        project = project.slice(0, -4);\n      }\n\n      if (parsed.hash) {\n        committish = decodeURIComponent(parsed.hash.slice(1));\n      }\n\n      defaultRepresentation = 'shortcut';\n    } else {\n      if (!gitHostInfo.protocols.includes(parsed.protocol)) {\n        return;\n      }\n\n      const segments = gitHostInfo.extract(parsed);\n\n      if (!segments) {\n        return;\n      }\n\n      user = segments.user && decodeURIComponent(segments.user);\n      project = decodeURIComponent(segments.project);\n      committish = decodeURIComponent(segments.committish);\n      defaultRepresentation = protocols[parsed.protocol] && protocols[parsed.protocol].name || parsed.protocol.slice(0, -1);\n    }\n  } catch (err) {\n    /* istanbul ignore else */\n    if (err instanceof URIError) {\n      return;\n    } else {\n      throw err;\n    }\n  }\n\n  return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts);\n} // look for github shorthand inputs, such as npm/cli\n\n\nconst isGitHubShorthand = arg => {\n  // it cannot contain whitespace before the first #\n  // it cannot start with a / because that's probably an absolute file path\n  // but it must include a slash since repos are username/repository\n  // it cannot start with a . because that's probably a relative file path\n  // it cannot start with an @ because that's a scoped package if it passes the other tests\n  // it cannot contain a : before a # because that tells us that there's a protocol\n  // a second / may not exist before a #\n  const firstHash = arg.indexOf('#');\n  const firstSlash = arg.indexOf('/');\n  const secondSlash = arg.indexOf('/', firstSlash + 1);\n  const firstColon = arg.indexOf(':');\n  const firstSpace = /\\s/.exec(arg);\n  const firstAt = arg.indexOf('@');\n  const spaceOnlyAfterHash = !firstSpace || firstHash > -1 && firstSpace.index > firstHash;\n  const atOnlyAfterHash = firstAt === -1 || firstHash > -1 && firstAt > firstHash;\n  const colonOnlyAfterHash = firstColon === -1 || firstHash > -1 && firstColon > firstHash;\n  const secondSlashOnlyAfterHash = secondSlash === -1 || firstHash > -1 && secondSlash > firstHash;\n  const hasSlash = firstSlash > 0; // if a # is found, what we really want to know is that the character\n  // immediately before # is not a /\n\n  const doesNotEndWithSlash = firstHash > -1 ? arg[firstHash - 1] !== '/' : !arg.endsWith('/');\n  const doesNotStartWithDot = !arg.startsWith('.');\n  return spaceOnlyAfterHash && hasSlash && doesNotEndWithSlash && doesNotStartWithDot && atOnlyAfterHash && colonOnlyAfterHash && secondSlashOnlyAfterHash;\n};","map":{"version":3,"names":["gitHosts","require","GitHost","module","exports","LRU","parseUrl","cache","max","protocols","name","auth","Object","keys","byShortcut","reduce","acc","key","fromUrl","giturl","opts","JSON","stringify","has","set","get","correctedUrl","isGitHubShorthand","parsed","gitHostShortcut","protocol","gitHostDomain","byDomain","hostname","startsWith","slice","gitHostName","gitHostInfo","username","password","committish","user","project","defaultRepresentation","pathname","firstAt","indexOf","lastSlash","lastIndexOf","decodeURIComponent","endsWith","hash","includes","segments","extract","err","URIError","arg","firstHash","firstSlash","secondSlash","firstColon","firstSpace","exec","spaceOnlyAfterHash","index","atOnlyAfterHash","colonOnlyAfterHash","secondSlashOnlyAfterHash","hasSlash","doesNotEndWithSlash","doesNotStartWithDot"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/hosted-git-info/lib/index.js"],"sourcesContent":["'use strict'\nconst gitHosts = require('./git-host-info.js')\nconst GitHost = module.exports = require('./git-host.js')\nconst LRU = require('lru-cache')\nconst parseUrl = require('./parse-url.js')\n\nconst cache = new LRU({ max: 1000 })\n\nconst protocols = {\n  'git+ssh:': { name: 'sshurl' },\n  'ssh:': { name: 'sshurl' },\n  'git+https:': { name: 'https', auth: true },\n  'git:': { auth: true },\n  'http:': { auth: true },\n  'https:': { auth: true },\n  'git+http:': { auth: true },\n  ...Object.keys(gitHosts.byShortcut).reduce((acc, key) => {\n    acc[key] = { name: gitHosts.byShortcut[key] }\n    return acc\n  }, {}),\n}\n\nmodule.exports.fromUrl = function (giturl, opts) {\n  if (typeof giturl !== 'string') {\n    return\n  }\n\n  const key = giturl + JSON.stringify(opts || {})\n\n  if (!cache.has(key)) {\n    cache.set(key, fromUrl(giturl, opts))\n  }\n\n  return cache.get(key)\n}\n\nmodule.exports.parseUrl = parseUrl\n\nfunction fromUrl (giturl, opts) {\n  if (!giturl) {\n    return\n  }\n\n  const correctedUrl = isGitHubShorthand(giturl) ? `github:${giturl}` : giturl\n  const parsed = parseUrl(correctedUrl, protocols)\n  if (!parsed) {\n    return\n  }\n\n  const gitHostShortcut = gitHosts.byShortcut[parsed.protocol]\n  const gitHostDomain = gitHosts.byDomain[parsed.hostname.startsWith('www.')\n    ? parsed.hostname.slice(4)\n    : parsed.hostname]\n  const gitHostName = gitHostShortcut || gitHostDomain\n  if (!gitHostName) {\n    return\n  }\n\n  const gitHostInfo = gitHosts[gitHostShortcut || gitHostDomain]\n  let auth = null\n  if (protocols[parsed.protocol] &&\n      protocols[parsed.protocol].auth &&\n      (parsed.username || parsed.password)\n  ) {\n    auth = `${parsed.username}${parsed.password ? ':' + parsed.password : ''}`\n  }\n\n  let committish = null\n  let user = null\n  let project = null\n  let defaultRepresentation = null\n\n  try {\n    if (gitHostShortcut) {\n      let pathname = parsed.pathname.startsWith('/') ? parsed.pathname.slice(1) : parsed.pathname\n      const firstAt = pathname.indexOf('@')\n      // we ignore auth for shortcuts, so just trim it out\n      if (firstAt > -1) {\n        pathname = pathname.slice(firstAt + 1)\n      }\n\n      const lastSlash = pathname.lastIndexOf('/')\n      if (lastSlash > -1) {\n        user = decodeURIComponent(pathname.slice(0, lastSlash))\n        // we want nulls only, never empty strings\n        if (!user) {\n          user = null\n        }\n        project = decodeURIComponent(pathname.slice(lastSlash + 1))\n      } else {\n        project = decodeURIComponent(pathname)\n      }\n\n      if (project.endsWith('.git')) {\n        project = project.slice(0, -4)\n      }\n\n      if (parsed.hash) {\n        committish = decodeURIComponent(parsed.hash.slice(1))\n      }\n\n      defaultRepresentation = 'shortcut'\n    } else {\n      if (!gitHostInfo.protocols.includes(parsed.protocol)) {\n        return\n      }\n\n      const segments = gitHostInfo.extract(parsed)\n      if (!segments) {\n        return\n      }\n\n      user = segments.user && decodeURIComponent(segments.user)\n      project = decodeURIComponent(segments.project)\n      committish = decodeURIComponent(segments.committish)\n      defaultRepresentation = (protocols[parsed.protocol] && protocols[parsed.protocol].name)\n        || parsed.protocol.slice(0, -1)\n    }\n  } catch (err) {\n    /* istanbul ignore else */\n    if (err instanceof URIError) {\n      return\n    } else {\n      throw err\n    }\n  }\n\n  return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts)\n}\n\n// look for github shorthand inputs, such as npm/cli\nconst isGitHubShorthand = (arg) => {\n  // it cannot contain whitespace before the first #\n  // it cannot start with a / because that's probably an absolute file path\n  // but it must include a slash since repos are username/repository\n  // it cannot start with a . because that's probably a relative file path\n  // it cannot start with an @ because that's a scoped package if it passes the other tests\n  // it cannot contain a : before a # because that tells us that there's a protocol\n  // a second / may not exist before a #\n  const firstHash = arg.indexOf('#')\n  const firstSlash = arg.indexOf('/')\n  const secondSlash = arg.indexOf('/', firstSlash + 1)\n  const firstColon = arg.indexOf(':')\n  const firstSpace = /\\s/.exec(arg)\n  const firstAt = arg.indexOf('@')\n\n  const spaceOnlyAfterHash = !firstSpace || (firstHash > -1 && firstSpace.index > firstHash)\n  const atOnlyAfterHash = firstAt === -1 || (firstHash > -1 && firstAt > firstHash)\n  const colonOnlyAfterHash = firstColon === -1 || (firstHash > -1 && firstColon > firstHash)\n  const secondSlashOnlyAfterHash = secondSlash === -1 || (firstHash > -1 && secondSlash > firstHash)\n  const hasSlash = firstSlash > 0\n  // if a # is found, what we really want to know is that the character\n  // immediately before # is not a /\n  const doesNotEndWithSlash = firstHash > -1 ? arg[firstHash - 1] !== '/' : !arg.endsWith('/')\n  const doesNotStartWithDot = !arg.startsWith('.')\n\n  return spaceOnlyAfterHash && hasSlash && doesNotEndWithSlash &&\n    doesNotStartWithDot && atOnlyAfterHash && colonOnlyAfterHash &&\n    secondSlashOnlyAfterHash\n}\n"],"mappings":"AAAA;;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,GAAiBH,OAAO,CAAC,eAAD,CAAxC;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,gBAAD,CAAxB;;AAEA,MAAMM,KAAK,GAAG,IAAIF,GAAJ,CAAQ;EAAEG,GAAG,EAAE;AAAP,CAAR,CAAd;AAEA,MAAMC,SAAS,GAAG;EAChB,YAAY;IAAEC,IAAI,EAAE;EAAR,CADI;EAEhB,QAAQ;IAAEA,IAAI,EAAE;EAAR,CAFQ;EAGhB,cAAc;IAAEA,IAAI,EAAE,OAAR;IAAiBC,IAAI,EAAE;EAAvB,CAHE;EAIhB,QAAQ;IAAEA,IAAI,EAAE;EAAR,CAJQ;EAKhB,SAAS;IAAEA,IAAI,EAAE;EAAR,CALO;EAMhB,UAAU;IAAEA,IAAI,EAAE;EAAR,CANM;EAOhB,aAAa;IAAEA,IAAI,EAAE;EAAR,CAPG;EAQhB,GAAGC,MAAM,CAACC,IAAP,CAAYb,QAAQ,CAACc,UAArB,EAAiCC,MAAjC,CAAwC,CAACC,GAAD,EAAMC,GAAN,KAAc;IACvDD,GAAG,CAACC,GAAD,CAAH,GAAW;MAAEP,IAAI,EAAEV,QAAQ,CAACc,UAAT,CAAoBG,GAApB;IAAR,CAAX;IACA,OAAOD,GAAP;EACD,CAHE,EAGA,EAHA;AARa,CAAlB;;AAcAb,MAAM,CAACC,OAAP,CAAec,OAAf,GAAyB,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;EAC/C,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;IAC9B;EACD;;EAED,MAAMF,GAAG,GAAGE,MAAM,GAAGE,IAAI,CAACC,SAAL,CAAeF,IAAI,IAAI,EAAvB,CAArB;;EAEA,IAAI,CAACb,KAAK,CAACgB,GAAN,CAAUN,GAAV,CAAL,EAAqB;IACnBV,KAAK,CAACiB,GAAN,CAAUP,GAAV,EAAeC,OAAO,CAACC,MAAD,EAASC,IAAT,CAAtB;EACD;;EAED,OAAOb,KAAK,CAACkB,GAAN,CAAUR,GAAV,CAAP;AACD,CAZD;;AAcAd,MAAM,CAACC,OAAP,CAAeE,QAAf,GAA0BA,QAA1B;;AAEA,SAASY,OAAT,CAAkBC,MAAlB,EAA0BC,IAA1B,EAAgC;EAC9B,IAAI,CAACD,MAAL,EAAa;IACX;EACD;;EAED,MAAMO,YAAY,GAAGC,iBAAiB,CAACR,MAAD,CAAjB,GAA6B,UAASA,MAAO,EAA7C,GAAiDA,MAAtE;EACA,MAAMS,MAAM,GAAGtB,QAAQ,CAACoB,YAAD,EAAejB,SAAf,CAAvB;;EACA,IAAI,CAACmB,MAAL,EAAa;IACX;EACD;;EAED,MAAMC,eAAe,GAAG7B,QAAQ,CAACc,UAAT,CAAoBc,MAAM,CAACE,QAA3B,CAAxB;EACA,MAAMC,aAAa,GAAG/B,QAAQ,CAACgC,QAAT,CAAkBJ,MAAM,CAACK,QAAP,CAAgBC,UAAhB,CAA2B,MAA3B,IACpCN,MAAM,CAACK,QAAP,CAAgBE,KAAhB,CAAsB,CAAtB,CADoC,GAEpCP,MAAM,CAACK,QAFW,CAAtB;EAGA,MAAMG,WAAW,GAAGP,eAAe,IAAIE,aAAvC;;EACA,IAAI,CAACK,WAAL,EAAkB;IAChB;EACD;;EAED,MAAMC,WAAW,GAAGrC,QAAQ,CAAC6B,eAAe,IAAIE,aAApB,CAA5B;EACA,IAAIpB,IAAI,GAAG,IAAX;;EACA,IAAIF,SAAS,CAACmB,MAAM,CAACE,QAAR,CAAT,IACArB,SAAS,CAACmB,MAAM,CAACE,QAAR,CAAT,CAA2BnB,IAD3B,KAECiB,MAAM,CAACU,QAAP,IAAmBV,MAAM,CAACW,QAF3B,CAAJ,EAGE;IACA5B,IAAI,GAAI,GAAEiB,MAAM,CAACU,QAAS,GAAEV,MAAM,CAACW,QAAP,GAAkB,MAAMX,MAAM,CAACW,QAA/B,GAA0C,EAAG,EAAzE;EACD;;EAED,IAAIC,UAAU,GAAG,IAAjB;EACA,IAAIC,IAAI,GAAG,IAAX;EACA,IAAIC,OAAO,GAAG,IAAd;EACA,IAAIC,qBAAqB,GAAG,IAA5B;;EAEA,IAAI;IACF,IAAId,eAAJ,EAAqB;MACnB,IAAIe,QAAQ,GAAGhB,MAAM,CAACgB,QAAP,CAAgBV,UAAhB,CAA2B,GAA3B,IAAkCN,MAAM,CAACgB,QAAP,CAAgBT,KAAhB,CAAsB,CAAtB,CAAlC,GAA6DP,MAAM,CAACgB,QAAnF;MACA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,CAAhB,CAFmB,CAGnB;;MACA,IAAID,OAAO,GAAG,CAAC,CAAf,EAAkB;QAChBD,QAAQ,GAAGA,QAAQ,CAACT,KAAT,CAAeU,OAAO,GAAG,CAAzB,CAAX;MACD;;MAED,MAAME,SAAS,GAAGH,QAAQ,CAACI,WAAT,CAAqB,GAArB,CAAlB;;MACA,IAAID,SAAS,GAAG,CAAC,CAAjB,EAAoB;QAClBN,IAAI,GAAGQ,kBAAkB,CAACL,QAAQ,CAACT,KAAT,CAAe,CAAf,EAAkBY,SAAlB,CAAD,CAAzB,CADkB,CAElB;;QACA,IAAI,CAACN,IAAL,EAAW;UACTA,IAAI,GAAG,IAAP;QACD;;QACDC,OAAO,GAAGO,kBAAkB,CAACL,QAAQ,CAACT,KAAT,CAAeY,SAAS,GAAG,CAA3B,CAAD,CAA5B;MACD,CAPD,MAOO;QACLL,OAAO,GAAGO,kBAAkB,CAACL,QAAD,CAA5B;MACD;;MAED,IAAIF,OAAO,CAACQ,QAAR,CAAiB,MAAjB,CAAJ,EAA8B;QAC5BR,OAAO,GAAGA,OAAO,CAACP,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAV;MACD;;MAED,IAAIP,MAAM,CAACuB,IAAX,EAAiB;QACfX,UAAU,GAAGS,kBAAkB,CAACrB,MAAM,CAACuB,IAAP,CAAYhB,KAAZ,CAAkB,CAAlB,CAAD,CAA/B;MACD;;MAEDQ,qBAAqB,GAAG,UAAxB;IACD,CA7BD,MA6BO;MACL,IAAI,CAACN,WAAW,CAAC5B,SAAZ,CAAsB2C,QAAtB,CAA+BxB,MAAM,CAACE,QAAtC,CAAL,EAAsD;QACpD;MACD;;MAED,MAAMuB,QAAQ,GAAGhB,WAAW,CAACiB,OAAZ,CAAoB1B,MAApB,CAAjB;;MACA,IAAI,CAACyB,QAAL,EAAe;QACb;MACD;;MAEDZ,IAAI,GAAGY,QAAQ,CAACZ,IAAT,IAAiBQ,kBAAkB,CAACI,QAAQ,CAACZ,IAAV,CAA1C;MACAC,OAAO,GAAGO,kBAAkB,CAACI,QAAQ,CAACX,OAAV,CAA5B;MACAF,UAAU,GAAGS,kBAAkB,CAACI,QAAQ,CAACb,UAAV,CAA/B;MACAG,qBAAqB,GAAIlC,SAAS,CAACmB,MAAM,CAACE,QAAR,CAAT,IAA8BrB,SAAS,CAACmB,MAAM,CAACE,QAAR,CAAT,CAA2BpB,IAA1D,IACnBkB,MAAM,CAACE,QAAP,CAAgBK,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CADL;IAED;EACF,CA9CD,CA8CE,OAAOoB,GAAP,EAAY;IACZ;IACA,IAAIA,GAAG,YAAYC,QAAnB,EAA6B;MAC3B;IACD,CAFD,MAEO;MACL,MAAMD,GAAN;IACD;EACF;;EAED,OAAO,IAAIrD,OAAJ,CAAYkC,WAAZ,EAAyBK,IAAzB,EAA+B9B,IAA/B,EAAqC+B,OAArC,EAA8CF,UAA9C,EAA0DG,qBAA1D,EAAiFvB,IAAjF,CAAP;AACD,C,CAED;;;AACA,MAAMO,iBAAiB,GAAI8B,GAAD,IAAS;EACjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,SAAS,GAAGD,GAAG,CAACX,OAAJ,CAAY,GAAZ,CAAlB;EACA,MAAMa,UAAU,GAAGF,GAAG,CAACX,OAAJ,CAAY,GAAZ,CAAnB;EACA,MAAMc,WAAW,GAAGH,GAAG,CAACX,OAAJ,CAAY,GAAZ,EAAiBa,UAAU,GAAG,CAA9B,CAApB;EACA,MAAME,UAAU,GAAGJ,GAAG,CAACX,OAAJ,CAAY,GAAZ,CAAnB;EACA,MAAMgB,UAAU,GAAG,KAAKC,IAAL,CAAUN,GAAV,CAAnB;EACA,MAAMZ,OAAO,GAAGY,GAAG,CAACX,OAAJ,CAAY,GAAZ,CAAhB;EAEA,MAAMkB,kBAAkB,GAAG,CAACF,UAAD,IAAgBJ,SAAS,GAAG,CAAC,CAAb,IAAkBI,UAAU,CAACG,KAAX,GAAmBP,SAAhF;EACA,MAAMQ,eAAe,GAAGrB,OAAO,KAAK,CAAC,CAAb,IAAmBa,SAAS,GAAG,CAAC,CAAb,IAAkBb,OAAO,GAAGa,SAAvE;EACA,MAAMS,kBAAkB,GAAGN,UAAU,KAAK,CAAC,CAAhB,IAAsBH,SAAS,GAAG,CAAC,CAAb,IAAkBG,UAAU,GAAGH,SAAhF;EACA,MAAMU,wBAAwB,GAAGR,WAAW,KAAK,CAAC,CAAjB,IAAuBF,SAAS,GAAG,CAAC,CAAb,IAAkBE,WAAW,GAAGF,SAAxF;EACA,MAAMW,QAAQ,GAAGV,UAAU,GAAG,CAA9B,CAnBiC,CAoBjC;EACA;;EACA,MAAMW,mBAAmB,GAAGZ,SAAS,GAAG,CAAC,CAAb,GAAiBD,GAAG,CAACC,SAAS,GAAG,CAAb,CAAH,KAAuB,GAAxC,GAA8C,CAACD,GAAG,CAACP,QAAJ,CAAa,GAAb,CAA3E;EACA,MAAMqB,mBAAmB,GAAG,CAACd,GAAG,CAACvB,UAAJ,CAAe,GAAf,CAA7B;EAEA,OAAO8B,kBAAkB,IAAIK,QAAtB,IAAkCC,mBAAlC,IACLC,mBADK,IACkBL,eADlB,IACqCC,kBADrC,IAELC,wBAFF;AAGD,CA5BD"},"metadata":{},"sourceType":"script"}