{"ast":null,"code":"/*!\n * Tmp\n *\n * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>\n *\n * MIT Licensed\n */\n\n/*\n * Module dependencies.\n */\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst crypto = require('crypto');\n\nconst osTmpDir = require('os-tmpdir');\n\nconst _c = process.binding('constants');\n/*\n * The working inner variables.\n */\n\n\nconst\n/**\n * The temporary directory.\n * @type {string}\n */\ntmpDir = osTmpDir(),\n      // the random characters to choose from\nRANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n      TEMPLATE_PATTERN = /XXXXXX/,\n      DEFAULT_TRIES = 3,\n      CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),\n      EBADF = _c.EBADF || _c.os.errno.EBADF,\n      ENOENT = _c.ENOENT || _c.os.errno.ENOENT,\n      DIR_MODE = 448\n/* 0o700 */\n,\n      FILE_MODE = 384\n/* 0o600 */\n,\n      // this will hold the objects need to be removed on exit\n_removeObjects = [];\nvar _gracefulCleanup = false,\n    _uncaughtException = false;\n/**\n * Random name generator based on crypto.\n * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript\n *\n * @param {number} howMany\n * @returns {string} the generated random name\n * @private\n */\n\nfunction _randomChars(howMany) {\n  var value = [],\n      rnd = null; // make sure that we do not fail because we ran out of entropy\n\n  try {\n    rnd = crypto.randomBytes(howMany);\n  } catch (e) {\n    rnd = crypto.pseudoRandomBytes(howMany);\n  }\n\n  for (var i = 0; i < howMany; i++) {\n    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);\n  }\n\n  return value.join('');\n}\n/**\n * Checks whether the `obj` parameter is defined or not.\n *\n * @param {Object} obj\n * @returns {boolean} true if the object is undefined\n * @private\n */\n\n\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n/**\n * Parses the function arguments.\n *\n * This function helps to have optional arguments.\n *\n * @param {(Options|Function)} options\n * @param {Function} callback\n * @returns {Array} parsed arguments\n * @private\n */\n\n\nfunction _parseArguments(options, callback) {\n  if (typeof options == 'function') {\n    return [callback || {}, options];\n  }\n\n  if (_isUndefined(options)) {\n    return [{}, callback];\n  }\n\n  return [options, callback];\n}\n/**\n * Generates a new temporary name.\n *\n * @param {Object} opts\n * @returns {string} the new random name according to opts\n * @private\n */\n\n\nfunction _generateTmpName(opts) {\n  if (opts.name) {\n    return path.join(opts.dir || tmpDir, opts.name);\n  } // mkstemps like template\n\n\n  if (opts.template) {\n    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));\n  } // prefix and postfix\n\n\n  const name = [opts.prefix || 'tmp-', process.pid, _randomChars(12), opts.postfix || ''].join('');\n  return path.join(opts.dir || tmpDir, name);\n}\n/**\n * Gets a temporary file name.\n *\n * @param {(Options|tmpNameCallback)} options options or callback\n * @param {?tmpNameCallback} callback the callback function\n */\n\n\nfunction tmpName(options, callback) {\n  var args = _parseArguments(options, callback),\n      opts = args[0],\n      cb = args[1],\n      tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0) return cb(new Error('Invalid tries'));\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN)) return cb(new Error('Invalid template provided'));\n\n  (function _getUniqueName() {\n    const name = _generateTmpName(opts); // check whether the path exists then retry if needed\n\n\n    fs.stat(name, function (err) {\n      if (!err) {\n        if (tries-- > 0) return _getUniqueName();\n        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));\n      }\n\n      cb(null, name);\n    });\n  })();\n}\n/**\n * Synchronous version of tmpName.\n *\n * @param {Object} options\n * @returns {string} the generated random name\n * @throws {Error} if the options are invalid or could not generate a filename\n */\n\n\nfunction tmpNameSync(options) {\n  var args = _parseArguments(options),\n      opts = args[0],\n      tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0) throw new Error('Invalid tries');\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN)) throw new Error('Invalid template provided');\n\n  do {\n    const name = _generateTmpName(opts);\n\n    try {\n      fs.statSync(name);\n    } catch (e) {\n      return name;\n    }\n  } while (tries-- > 0);\n\n  throw new Error('Could not get a unique tmp filename, max tries reached');\n}\n/**\n * Creates and opens a temporary file.\n *\n * @param {(Options|fileCallback)} options the config options or the callback function\n * @param {?fileCallback} callback\n */\n\n\nfunction file(options, callback) {\n  var args = _parseArguments(options, callback),\n      opts = args[0],\n      cb = args[1];\n\n  opts.postfix = _isUndefined(opts.postfix) ? '.tmp' : opts.postfix; // gets a temporary filename\n\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err); // create and open the file\n\n    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {\n      if (err) return cb(err);\n\n      if (opts.discardDescriptor) {\n        return fs.close(fd, function _discardCallback(err) {\n          if (err) {\n            // Low probability, and the file exists, so this could be\n            // ignored.  If it isn't we certainly need to unlink the\n            // file, and if that fails too its error is more\n            // important.\n            try {\n              fs.unlinkSync(name);\n            } catch (e) {\n              if (!isENOENT(e)) {\n                err = e;\n              }\n            }\n\n            return cb(err);\n          }\n\n          cb(null, name, undefined, _prepareTmpFileRemoveCallback(name, -1, opts));\n        });\n      }\n\n      if (opts.detachDescriptor) {\n        return cb(null, name, fd, _prepareTmpFileRemoveCallback(name, -1, opts));\n      }\n\n      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));\n    });\n  });\n}\n/**\n * Synchronous version of file.\n *\n * @param {Options} options\n * @returns {FileSyncObject} object consists of name, fd and removeCallback\n * @throws {Error} if cannot create a file\n */\n\n\nfunction fileSync(options) {\n  var args = _parseArguments(options),\n      opts = args[0];\n\n  opts.postfix = opts.postfix || '.tmp';\n  const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;\n  const name = tmpNameSync(opts);\n  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);\n\n  if (opts.discardDescriptor) {\n    fs.closeSync(fd);\n    fd = undefined;\n  }\n\n  return {\n    name: name,\n    fd: fd,\n    removeCallback: _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts)\n  };\n}\n/**\n * Removes files and folders in a directory recursively.\n *\n * @param {string} root\n * @private\n */\n\n\nfunction _rmdirRecursiveSync(root) {\n  const dirs = [root];\n\n  do {\n    var dir = dirs.pop(),\n        deferred = false,\n        files = fs.readdirSync(dir);\n\n    for (var i = 0, length = files.length; i < length; i++) {\n      var file = path.join(dir, files[i]),\n          stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories\n\n      if (stat.isDirectory()) {\n        if (!deferred) {\n          deferred = true;\n          dirs.push(dir);\n        }\n\n        dirs.push(file);\n      } else {\n        fs.unlinkSync(file);\n      }\n    }\n\n    if (!deferred) {\n      fs.rmdirSync(dir);\n    }\n  } while (dirs.length !== 0);\n}\n/**\n * Creates a temporary directory.\n *\n * @param {(Options|dirCallback)} options the options or the callback function\n * @param {?dirCallback} callback\n */\n\n\nfunction dir(options, callback) {\n  var args = _parseArguments(options, callback),\n      opts = args[0],\n      cb = args[1]; // gets a temporary filename\n\n\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err); // create the directory\n\n    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {\n      if (err) return cb(err);\n      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));\n    });\n  });\n}\n/**\n * Synchronous version of dir.\n *\n * @param {Options} options\n * @returns {DirSyncObject} object consists of name and removeCallback\n * @throws {Error} if it cannot create a directory\n */\n\n\nfunction dirSync(options) {\n  var args = _parseArguments(options),\n      opts = args[0];\n\n  const name = tmpNameSync(opts);\n  fs.mkdirSync(name, opts.mode || DIR_MODE);\n  return {\n    name: name,\n    removeCallback: _prepareTmpDirRemoveCallback(name, opts)\n  };\n}\n/**\n * Prepares the callback for removal of the temporary file.\n *\n * @param {string} name the path of the file\n * @param {number} fd file descriptor\n * @param {Object} opts\n * @returns {fileCallback}\n * @private\n */\n\n\nfunction _prepareTmpFileRemoveCallback(name, fd, opts) {\n  const removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {\n    try {\n      if (0 <= fdPath[0]) {\n        fs.closeSync(fdPath[0]);\n      }\n    } catch (e) {\n      // under some node/windows related circumstances, a temporary file\n      // may have not be created as expected or the file was already closed\n      // by the user, in which case we will simply ignore the error\n      if (!isEBADF(e) && !isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n\n    try {\n      fs.unlinkSync(fdPath[1]);\n    } catch (e) {\n      if (!isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n  }, [fd, name]);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n/**\n * Prepares the callback for removal of the temporary directory.\n *\n * @param {string} name\n * @param {Object} opts\n * @returns {Function} the callback\n * @private\n */\n\n\nfunction _prepareTmpDirRemoveCallback(name, opts) {\n  const removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);\n\n  const removeCallback = _prepareRemoveCallback(removeFunction, name);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n/**\n * Creates a guarded function wrapping the removeFunction call.\n *\n * @param {Function} removeFunction\n * @param {Object} arg\n * @returns {Function}\n * @private\n */\n\n\nfunction _prepareRemoveCallback(removeFunction, arg) {\n  var called = false;\n  return function _cleanupCallback(next) {\n    if (!called) {\n      const index = _removeObjects.indexOf(_cleanupCallback);\n\n      if (index >= 0) {\n        _removeObjects.splice(index, 1);\n      }\n\n      called = true;\n      removeFunction(arg);\n    }\n\n    if (next) next(null);\n  };\n}\n/**\n * The garbage collector.\n *\n * @private\n */\n\n\nfunction _garbageCollector() {\n  if (_uncaughtException && !_gracefulCleanup) {\n    return;\n  } // the function being called removes itself from _removeObjects,\n  // loop until _removeObjects is empty\n\n\n  while (_removeObjects.length) {\n    try {\n      _removeObjects[0].call(null);\n    } catch (e) {// already removed?\n    }\n  }\n}\n/**\n * Helper for testing against EBADF to compensate changes made to Node 7.x under Windows.\n */\n\n\nfunction isEBADF(error) {\n  return isExpectedError(error, -EBADF, 'EBADF');\n}\n/**\n * Helper for testing against ENOENT to compensate changes made to Node 7.x under Windows.\n */\n\n\nfunction isENOENT(error) {\n  return isExpectedError(error, -ENOENT, 'ENOENT');\n}\n/**\n * Helper to determine whether the expected error code matches the actual code and errno,\n * which will differ between the supported node versions.\n *\n * - Node >= 7.0:\n *   error.code {String}\n *   error.errno {String|Number} any numerical value will be negated\n *\n * - Node >= 6.0 < 7.0:\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 4.0 < 6.0: introduces SystemError\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 0.10 < 4.0:\n *   error.code {Number} negated\n *   error.errno n/a\n */\n\n\nfunction isExpectedError(error, code, errno) {\n  return error.code == code || error.code == errno;\n}\n/**\n * Sets the graceful cleanup.\n *\n * Also removes the created files and directories when an uncaught exception occurs.\n */\n\n\nfunction setGracefulCleanup() {\n  _gracefulCleanup = true;\n}\n\nconst version = process.versions.node.split('.').map(function (value) {\n  return parseInt(value, 10);\n});\n\nif (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {\n  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {\n    _uncaughtException = true;\n\n    _garbageCollector();\n\n    throw err;\n  });\n}\n\nprocess.addListener('exit', function _exit(code) {\n  if (code) _uncaughtException = true;\n\n  _garbageCollector();\n});\n/**\n * Configuration options.\n *\n * @typedef {Object} Options\n * @property {?number} tries the number of tries before give up the name generation\n * @property {?string} template the \"mkstemp\" like filename template\n * @property {?string} name fix name\n * @property {?string} dir the tmp directory to use\n * @property {?string} prefix prefix for the generated name\n * @property {?string} postfix postfix for the generated name\n */\n\n/**\n * @typedef {Object} FileSyncObject\n * @property {string} name the name of the file\n * @property {string} fd the file descriptor\n * @property {fileCallback} removeCallback the callback function to remove the file\n */\n\n/**\n * @typedef {Object} DirSyncObject\n * @property {string} name the name of the directory\n * @property {fileCallback} removeCallback the callback function to remove the directory\n */\n\n/**\n * @callback tmpNameCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n */\n\n/**\n * @callback fileCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {number} fd the file descriptor\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * @callback dirCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * Removes the temporary created file or directory.\n *\n * @callback cleanupCallback\n * @param {simpleCallback} [next] function to call after entry was removed\n */\n\n/**\n * Callback function for function composition.\n * @see {@link https://github.com/raszi/node-tmp/issues/57|raszi/node-tmp#57}\n *\n * @callback simpleCallback\n */\n// exporting all the needed methods\n\nmodule.exports.tmpdir = tmpDir;\nmodule.exports.dir = dir;\nmodule.exports.dirSync = dirSync;\nmodule.exports.file = file;\nmodule.exports.fileSync = fileSync;\nmodule.exports.tmpName = tmpName;\nmodule.exports.tmpNameSync = tmpNameSync;\nmodule.exports.setGracefulCleanup = setGracefulCleanup;","map":{"version":3,"names":["fs","require","path","crypto","osTmpDir","_c","process","binding","tmpDir","RANDOM_CHARS","TEMPLATE_PATTERN","DEFAULT_TRIES","CREATE_FLAGS","O_CREAT","O_EXCL","O_RDWR","EBADF","os","errno","ENOENT","DIR_MODE","FILE_MODE","_removeObjects","_gracefulCleanup","_uncaughtException","_randomChars","howMany","value","rnd","randomBytes","e","pseudoRandomBytes","i","push","length","join","_isUndefined","obj","_parseArguments","options","callback","_generateTmpName","opts","name","dir","template","replace","prefix","pid","postfix","tmpName","args","cb","tries","isNaN","Error","match","_getUniqueName","stat","err","tmpNameSync","statSync","file","_tmpNameCreated","open","mode","_fileCreated","fd","discardDescriptor","close","_discardCallback","unlinkSync","isENOENT","undefined","_prepareTmpFileRemoveCallback","detachDescriptor","fileSync","discardOrDetachDescriptor","openSync","closeSync","removeCallback","_rmdirRecursiveSync","root","dirs","pop","deferred","files","readdirSync","lstatSync","isDirectory","rmdirSync","mkdir","_dirCreated","_prepareTmpDirRemoveCallback","dirSync","mkdirSync","_prepareRemoveCallback","_removeCallback","fdPath","isEBADF","keep","unshift","removeFunction","unsafeCleanup","bind","arg","called","_cleanupCallback","next","index","indexOf","splice","_garbageCollector","call","error","isExpectedError","code","setGracefulCleanup","version","versions","node","split","map","parseInt","addListener","_uncaughtExceptionThrown","_exit","module","exports","tmpdir"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/tmp/lib/tmp.js"],"sourcesContent":["/*!\n * Tmp\n *\n * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>\n *\n * MIT Licensed\n */\n\n/*\n * Module dependencies.\n */\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\nconst osTmpDir = require('os-tmpdir');\nconst _c = process.binding('constants');\n\n/*\n * The working inner variables.\n */\nconst\n  /**\n   * The temporary directory.\n   * @type {string}\n   */\n  tmpDir = osTmpDir(),\n\n  // the random characters to choose from\n  RANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\n  TEMPLATE_PATTERN = /XXXXXX/,\n\n  DEFAULT_TRIES = 3,\n\n  CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),\n\n  EBADF = _c.EBADF || _c.os.errno.EBADF,\n  ENOENT = _c.ENOENT || _c.os.errno.ENOENT,\n\n  DIR_MODE = 448 /* 0o700 */,\n  FILE_MODE = 384 /* 0o600 */,\n\n  // this will hold the objects need to be removed on exit\n  _removeObjects = [];\n\nvar\n  _gracefulCleanup = false,\n  _uncaughtException = false;\n\n/**\n * Random name generator based on crypto.\n * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript\n *\n * @param {number} howMany\n * @returns {string} the generated random name\n * @private\n */\nfunction _randomChars(howMany) {\n  var\n    value = [],\n    rnd = null;\n\n  // make sure that we do not fail because we ran out of entropy\n  try {\n    rnd = crypto.randomBytes(howMany);\n  } catch (e) {\n    rnd = crypto.pseudoRandomBytes(howMany);\n  }\n\n  for (var i = 0; i < howMany; i++) {\n    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);\n  }\n\n  return value.join('');\n}\n\n/**\n * Checks whether the `obj` parameter is defined or not.\n *\n * @param {Object} obj\n * @returns {boolean} true if the object is undefined\n * @private\n */\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\n/**\n * Parses the function arguments.\n *\n * This function helps to have optional arguments.\n *\n * @param {(Options|Function)} options\n * @param {Function} callback\n * @returns {Array} parsed arguments\n * @private\n */\nfunction _parseArguments(options, callback) {\n  if (typeof options == 'function') {\n    return [callback || {}, options];\n  }\n\n  if (_isUndefined(options)) {\n    return [{}, callback];\n  }\n\n  return [options, callback];\n}\n\n/**\n * Generates a new temporary name.\n *\n * @param {Object} opts\n * @returns {string} the new random name according to opts\n * @private\n */\nfunction _generateTmpName(opts) {\n  if (opts.name) {\n    return path.join(opts.dir || tmpDir, opts.name);\n  }\n\n  // mkstemps like template\n  if (opts.template) {\n    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));\n  }\n\n  // prefix and postfix\n  const name = [\n    opts.prefix || 'tmp-',\n    process.pid,\n    _randomChars(12),\n    opts.postfix || ''\n  ].join('');\n\n  return path.join(opts.dir || tmpDir, name);\n}\n\n/**\n * Gets a temporary file name.\n *\n * @param {(Options|tmpNameCallback)} options options or callback\n * @param {?tmpNameCallback} callback the callback function\n */\nfunction tmpName(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1],\n    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0)\n    return cb(new Error('Invalid tries'));\n\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))\n    return cb(new Error('Invalid template provided'));\n\n  (function _getUniqueName() {\n    const name = _generateTmpName(opts);\n\n    // check whether the path exists then retry if needed\n    fs.stat(name, function (err) {\n      if (!err) {\n        if (tries-- > 0) return _getUniqueName();\n\n        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));\n      }\n\n      cb(null, name);\n    });\n  }());\n}\n\n/**\n * Synchronous version of tmpName.\n *\n * @param {Object} options\n * @returns {string} the generated random name\n * @throws {Error} if the options are invalid or could not generate a filename\n */\nfunction tmpNameSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0],\n    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0)\n    throw new Error('Invalid tries');\n\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))\n    throw new Error('Invalid template provided');\n\n  do {\n    const name = _generateTmpName(opts);\n    try {\n      fs.statSync(name);\n    } catch (e) {\n      return name;\n    }\n  } while (tries-- > 0);\n\n  throw new Error('Could not get a unique tmp filename, max tries reached');\n}\n\n/**\n * Creates and opens a temporary file.\n *\n * @param {(Options|fileCallback)} options the config options or the callback function\n * @param {?fileCallback} callback\n */\nfunction file(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n\n  opts.postfix = (_isUndefined(opts.postfix)) ? '.tmp' : opts.postfix;\n\n  // gets a temporary filename\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create and open the file\n    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {\n      if (err) return cb(err);\n\n      if (opts.discardDescriptor) {\n        return fs.close(fd, function _discardCallback(err) {\n          if (err) {\n            // Low probability, and the file exists, so this could be\n            // ignored.  If it isn't we certainly need to unlink the\n            // file, and if that fails too its error is more\n            // important.\n            try {\n              fs.unlinkSync(name);\n            } catch (e) {\n              if (!isENOENT(e)) {\n                err = e;\n              }\n            }\n            return cb(err);\n          }\n          cb(null, name, undefined, _prepareTmpFileRemoveCallback(name, -1, opts));\n        });\n      }\n      if (opts.detachDescriptor) {\n        return cb(null, name, fd, _prepareTmpFileRemoveCallback(name, -1, opts));\n      }\n      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of file.\n *\n * @param {Options} options\n * @returns {FileSyncObject} object consists of name, fd and removeCallback\n * @throws {Error} if cannot create a file\n */\nfunction fileSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0];\n\n  opts.postfix = opts.postfix || '.tmp';\n\n  const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;\n  const name = tmpNameSync(opts);\n  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);\n  if (opts.discardDescriptor) {\n    fs.closeSync(fd); \n    fd = undefined;\n  }\n\n  return {\n    name: name,\n    fd: fd,\n    removeCallback: _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts)\n  };\n}\n\n/**\n * Removes files and folders in a directory recursively.\n *\n * @param {string} root\n * @private\n */\nfunction _rmdirRecursiveSync(root) {\n  const dirs = [root];\n\n  do {\n    var\n      dir = dirs.pop(),\n      deferred = false,\n      files = fs.readdirSync(dir);\n\n    for (var i = 0, length = files.length; i < length; i++) {\n      var\n        file = path.join(dir, files[i]),\n        stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories\n\n      if (stat.isDirectory()) {\n        if (!deferred) {\n          deferred = true;\n          dirs.push(dir);\n        }\n        dirs.push(file);\n      } else {\n        fs.unlinkSync(file);\n      }\n    }\n\n    if (!deferred) {\n      fs.rmdirSync(dir);\n    }\n  } while (dirs.length !== 0);\n}\n\n/**\n * Creates a temporary directory.\n *\n * @param {(Options|dirCallback)} options the options or the callback function\n * @param {?dirCallback} callback\n */\nfunction dir(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n\n  // gets a temporary filename\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create the directory\n    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {\n      if (err) return cb(err);\n\n      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of dir.\n *\n * @param {Options} options\n * @returns {DirSyncObject} object consists of name and removeCallback\n * @throws {Error} if it cannot create a directory\n */\nfunction dirSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0];\n\n  const name = tmpNameSync(opts);\n  fs.mkdirSync(name, opts.mode || DIR_MODE);\n\n  return {\n    name: name,\n    removeCallback: _prepareTmpDirRemoveCallback(name, opts)\n  };\n}\n\n/**\n * Prepares the callback for removal of the temporary file.\n *\n * @param {string} name the path of the file\n * @param {number} fd file descriptor\n * @param {Object} opts\n * @returns {fileCallback}\n * @private\n */\nfunction _prepareTmpFileRemoveCallback(name, fd, opts) {\n  const removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {\n    try {\n      if (0 <= fdPath[0]) {\n        fs.closeSync(fdPath[0]);\n      }\n    }\n    catch (e) {\n      // under some node/windows related circumstances, a temporary file\n      // may have not be created as expected or the file was already closed\n      // by the user, in which case we will simply ignore the error\n      if (!isEBADF(e) && !isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n    try {\n      fs.unlinkSync(fdPath[1]);\n    }\n    catch (e) {\n      if (!isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n  }, [fd, name]);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n\n/**\n * Prepares the callback for removal of the temporary directory.\n *\n * @param {string} name\n * @param {Object} opts\n * @returns {Function} the callback\n * @private\n */\nfunction _prepareTmpDirRemoveCallback(name, opts) {\n  const removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);\n  const removeCallback = _prepareRemoveCallback(removeFunction, name);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n\n/**\n * Creates a guarded function wrapping the removeFunction call.\n *\n * @param {Function} removeFunction\n * @param {Object} arg\n * @returns {Function}\n * @private\n */\nfunction _prepareRemoveCallback(removeFunction, arg) {\n  var called = false;\n\n  return function _cleanupCallback(next) {\n    if (!called) {\n      const index = _removeObjects.indexOf(_cleanupCallback);\n      if (index >= 0) {\n        _removeObjects.splice(index, 1);\n      }\n\n      called = true;\n      removeFunction(arg);\n    }\n\n    if (next) next(null);\n  };\n}\n\n/**\n * The garbage collector.\n *\n * @private\n */\nfunction _garbageCollector() {\n  if (_uncaughtException && !_gracefulCleanup) {\n    return;\n  }\n\n  // the function being called removes itself from _removeObjects,\n  // loop until _removeObjects is empty\n  while (_removeObjects.length) {\n    try {\n      _removeObjects[0].call(null);\n    } catch (e) {\n      // already removed?\n    }\n  }\n}\n\n/**\n * Helper for testing against EBADF to compensate changes made to Node 7.x under Windows.\n */\nfunction isEBADF(error) {\n  return isExpectedError(error, -EBADF, 'EBADF');\n}\n\n/**\n * Helper for testing against ENOENT to compensate changes made to Node 7.x under Windows.\n */\nfunction isENOENT(error) {\n  return isExpectedError(error, -ENOENT, 'ENOENT');\n}\n\n/**\n * Helper to determine whether the expected error code matches the actual code and errno,\n * which will differ between the supported node versions.\n *\n * - Node >= 7.0:\n *   error.code {String}\n *   error.errno {String|Number} any numerical value will be negated\n *\n * - Node >= 6.0 < 7.0:\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 4.0 < 6.0: introduces SystemError\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 0.10 < 4.0:\n *   error.code {Number} negated\n *   error.errno n/a\n */\nfunction isExpectedError(error, code, errno) {\n  return error.code == code || error.code == errno;\n}\n\n/**\n * Sets the graceful cleanup.\n *\n * Also removes the created files and directories when an uncaught exception occurs.\n */\nfunction setGracefulCleanup() {\n  _gracefulCleanup = true;\n}\n\nconst version = process.versions.node.split('.').map(function (value) {\n  return parseInt(value, 10);\n});\n\nif (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {\n  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {\n    _uncaughtException = true;\n    _garbageCollector();\n\n    throw err;\n  });\n}\n\nprocess.addListener('exit', function _exit(code) {\n  if (code) _uncaughtException = true;\n  _garbageCollector();\n});\n\n/**\n * Configuration options.\n *\n * @typedef {Object} Options\n * @property {?number} tries the number of tries before give up the name generation\n * @property {?string} template the \"mkstemp\" like filename template\n * @property {?string} name fix name\n * @property {?string} dir the tmp directory to use\n * @property {?string} prefix prefix for the generated name\n * @property {?string} postfix postfix for the generated name\n */\n\n/**\n * @typedef {Object} FileSyncObject\n * @property {string} name the name of the file\n * @property {string} fd the file descriptor\n * @property {fileCallback} removeCallback the callback function to remove the file\n */\n\n/**\n * @typedef {Object} DirSyncObject\n * @property {string} name the name of the directory\n * @property {fileCallback} removeCallback the callback function to remove the directory\n */\n\n/**\n * @callback tmpNameCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n */\n\n/**\n * @callback fileCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {number} fd the file descriptor\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * @callback dirCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * Removes the temporary created file or directory.\n *\n * @callback cleanupCallback\n * @param {simpleCallback} [next] function to call after entry was removed\n */\n\n/**\n * Callback function for function composition.\n * @see {@link https://github.com/raszi/node-tmp/issues/57|raszi/node-tmp#57}\n *\n * @callback simpleCallback\n */\n\n// exporting all the needed methods\nmodule.exports.tmpdir = tmpDir;\n\nmodule.exports.dir = dir;\nmodule.exports.dirSync = dirSync;\n\nmodule.exports.file = file;\nmodule.exports.fileSync = fileSync;\n\nmodule.exports.tmpName = tmpName;\nmodule.exports.tmpNameSync = tmpNameSync;\n\nmodule.exports.setGracefulCleanup = setGracefulCleanup;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}