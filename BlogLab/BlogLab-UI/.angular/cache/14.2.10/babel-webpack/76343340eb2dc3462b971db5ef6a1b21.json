{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndentLogger = void 0;\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst logger_1 = require(\"./logger\");\n/**\n * Keep an map of indentation => array of indentations based on the level.\n * This is to optimize calculating the prefix based on the indentation itself. Since most logs\n * come from similar levels, and with similar indentation strings, this will be shared by all\n * loggers. Also, string concatenation is expensive so performing concats for every log entries\n * is expensive; this alleviates it.\n */\n\n\nconst indentationMap = {};\n\nclass IndentLogger extends logger_1.Logger {\n  constructor(name, parent = null, indentation = '  ') {\n    super(name, parent);\n    indentationMap[indentation] = indentationMap[indentation] || [''];\n    const indentMap = indentationMap[indentation];\n    this._observable = this._observable.pipe((0, operators_1.map)(entry => {\n      const l = entry.path.filter(x => !!x).length;\n\n      if (l >= indentMap.length) {\n        let current = indentMap[indentMap.length - 1];\n\n        while (l >= indentMap.length) {\n          current += indentation;\n          indentMap.push(current);\n        }\n      }\n\n      entry.message = indentMap[l] + entry.message.split(/\\n/).join('\\n' + indentMap[l]);\n      return entry;\n    }));\n  }\n\n}\n\nexports.IndentLogger = IndentLogger;","map":{"version":3,"names":["Object","defineProperty","exports","value","IndentLogger","operators_1","require","logger_1","indentationMap","Logger","constructor","name","parent","indentation","indentMap","_observable","pipe","map","entry","l","path","filter","x","length","current","push","message","split","join"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/src/logger/indent.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IndentLogger = void 0;\nconst operators_1 = require(\"rxjs/operators\");\nconst logger_1 = require(\"./logger\");\n/**\n * Keep an map of indentation => array of indentations based on the level.\n * This is to optimize calculating the prefix based on the indentation itself. Since most logs\n * come from similar levels, and with similar indentation strings, this will be shared by all\n * loggers. Also, string concatenation is expensive so performing concats for every log entries\n * is expensive; this alleviates it.\n */\nconst indentationMap = {};\nclass IndentLogger extends logger_1.Logger {\n    constructor(name, parent = null, indentation = '  ') {\n        super(name, parent);\n        indentationMap[indentation] = indentationMap[indentation] || [''];\n        const indentMap = indentationMap[indentation];\n        this._observable = this._observable.pipe((0, operators_1.map)((entry) => {\n            const l = entry.path.filter((x) => !!x).length;\n            if (l >= indentMap.length) {\n                let current = indentMap[indentMap.length - 1];\n                while (l >= indentMap.length) {\n                    current += indentation;\n                    indentMap.push(current);\n                }\n            }\n            entry.message = indentMap[l] + entry.message.split(/\\n/).join('\\n' + indentMap[l]);\n            return entry;\n        }));\n    }\n}\nexports.IndentLogger = IndentLogger;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,cAAc,GAAG,EAAvB;;AACA,MAAMJ,YAAN,SAA2BG,QAAQ,CAACE,MAApC,CAA2C;EACvCC,WAAW,CAACC,IAAD,EAAOC,MAAM,GAAG,IAAhB,EAAsBC,WAAW,GAAG,IAApC,EAA0C;IACjD,MAAMF,IAAN,EAAYC,MAAZ;IACAJ,cAAc,CAACK,WAAD,CAAd,GAA8BL,cAAc,CAACK,WAAD,CAAd,IAA+B,CAAC,EAAD,CAA7D;IACA,MAAMC,SAAS,GAAGN,cAAc,CAACK,WAAD,CAAhC;IACA,KAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,CAAC,GAAGX,WAAW,CAACY,GAAhB,EAAsBC,KAAD,IAAW;MACrE,MAAMC,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAmBC,CAAD,IAAO,CAAC,CAACA,CAA3B,EAA8BC,MAAxC;;MACA,IAAIJ,CAAC,IAAIL,SAAS,CAACS,MAAnB,EAA2B;QACvB,IAAIC,OAAO,GAAGV,SAAS,CAACA,SAAS,CAACS,MAAV,GAAmB,CAApB,CAAvB;;QACA,OAAOJ,CAAC,IAAIL,SAAS,CAACS,MAAtB,EAA8B;UAC1BC,OAAO,IAAIX,WAAX;UACAC,SAAS,CAACW,IAAV,CAAeD,OAAf;QACH;MACJ;;MACDN,KAAK,CAACQ,OAAN,GAAgBZ,SAAS,CAACK,CAAD,CAAT,GAAeD,KAAK,CAACQ,OAAN,CAAcC,KAAd,CAAoB,IAApB,EAA0BC,IAA1B,CAA+B,OAAOd,SAAS,CAACK,CAAD,CAA/C,CAA/B;MACA,OAAOD,KAAP;IACH,CAXwC,CAAtB,CAAnB;EAYH;;AAjBsC;;AAmB3ChB,OAAO,CAACE,YAAR,GAAuBA,YAAvB"},"metadata":{},"sourceType":"script"}