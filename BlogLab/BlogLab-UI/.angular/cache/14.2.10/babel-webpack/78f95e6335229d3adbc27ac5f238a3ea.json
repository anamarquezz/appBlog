{"ast":null,"code":"var parse = require('spdx-expression-parse');\n\nvar correct = require('spdx-correct');\n\nvar genericWarning = 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN <filename>\"';\nvar fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;\n\nfunction startsWith(prefix, string) {\n  return string.slice(0, prefix.length) === prefix;\n}\n\nfunction usesLicenseRef(ast) {\n  if (ast.hasOwnProperty('license')) {\n    var license = ast.license;\n    return startsWith('LicenseRef', license) || startsWith('DocumentRef', license);\n  } else {\n    return usesLicenseRef(ast.left) || usesLicenseRef(ast.right);\n  }\n}\n\nmodule.exports = function (argument) {\n  var ast;\n\n  try {\n    ast = parse(argument);\n  } catch (e) {\n    var match;\n\n    if (argument === 'UNLICENSED' || argument === 'UNLICENCED') {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        unlicensed: true\n      };\n    } else if (match = fileReferenceRE.exec(argument)) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        inFile: match[1]\n      };\n    } else {\n      var result = {\n        validForOldPackages: false,\n        validForNewPackages: false,\n        warnings: [genericWarning]\n      };\n\n      if (argument.trim().length !== 0) {\n        var corrected = correct(argument);\n\n        if (corrected) {\n          result.warnings.push('license is similar to the valid expression \"' + corrected + '\"');\n        }\n      }\n\n      return result;\n    }\n  }\n\n  if (usesLicenseRef(ast)) {\n    return {\n      validForNewPackages: false,\n      validForOldPackages: false,\n      spdx: true,\n      warnings: [genericWarning]\n    };\n  } else {\n    return {\n      validForNewPackages: true,\n      validForOldPackages: true,\n      spdx: true\n    };\n  }\n};","map":{"version":3,"names":["parse","require","correct","genericWarning","fileReferenceRE","startsWith","prefix","string","slice","length","usesLicenseRef","ast","hasOwnProperty","license","left","right","module","exports","argument","e","match","validForOldPackages","validForNewPackages","unlicensed","exec","inFile","result","warnings","trim","corrected","push","spdx"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/validate-npm-package-license/index.js"],"sourcesContent":["var parse = require('spdx-expression-parse');\nvar correct = require('spdx-correct');\n\nvar genericWarning = (\n  'license should be ' +\n  'a valid SPDX license expression (without \"LicenseRef\"), ' +\n  '\"UNLICENSED\", or ' +\n  '\"SEE LICENSE IN <filename>\"'\n);\n\nvar fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;\n\nfunction startsWith(prefix, string) {\n  return string.slice(0, prefix.length) === prefix;\n}\n\nfunction usesLicenseRef(ast) {\n  if (ast.hasOwnProperty('license')) {\n    var license = ast.license;\n    return (\n      startsWith('LicenseRef', license) ||\n      startsWith('DocumentRef', license)\n    );\n  } else {\n    return (\n      usesLicenseRef(ast.left) ||\n      usesLicenseRef(ast.right)\n    );\n  }\n}\n\nmodule.exports = function(argument) {\n  var ast;\n\n  try {\n    ast = parse(argument);\n  } catch (e) {\n    var match\n    if (\n      argument === 'UNLICENSED' ||\n      argument === 'UNLICENCED'\n    ) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        unlicensed: true\n      };\n    } else if (match = fileReferenceRE.exec(argument)) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        inFile: match[1]\n      };\n    } else {\n      var result = {\n        validForOldPackages: false,\n        validForNewPackages: false,\n        warnings: [genericWarning]\n      };\n      if (argument.trim().length !== 0) {\n        var corrected = correct(argument);\n        if (corrected) {\n          result.warnings.push(\n            'license is similar to the valid expression \"' + corrected + '\"'\n          );\n        }\n      }\n      return result;\n    }\n  }\n\n  if (usesLicenseRef(ast)) {\n    return {\n      validForNewPackages: false,\n      validForOldPackages: false,\n      spdx: true,\n      warnings: [genericWarning]\n    };\n  } else {\n    return {\n      validForNewPackages: true,\n      validForOldPackages: true,\n      spdx: true\n    };\n  }\n};\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIE,cAAc,GAChB,uBACA,0DADA,GAEA,mBAFA,GAGA,6BAJF;AAOA,IAAIC,eAAe,GAAG,0BAAtB;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;EAClC,OAAOA,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBF,MAAM,CAACG,MAAvB,MAAmCH,MAA1C;AACD;;AAED,SAASI,cAAT,CAAwBC,GAAxB,EAA6B;EAC3B,IAAIA,GAAG,CAACC,cAAJ,CAAmB,SAAnB,CAAJ,EAAmC;IACjC,IAAIC,OAAO,GAAGF,GAAG,CAACE,OAAlB;IACA,OACER,UAAU,CAAC,YAAD,EAAeQ,OAAf,CAAV,IACAR,UAAU,CAAC,aAAD,EAAgBQ,OAAhB,CAFZ;EAID,CAND,MAMO;IACL,OACEH,cAAc,CAACC,GAAG,CAACG,IAAL,CAAd,IACAJ,cAAc,CAACC,GAAG,CAACI,KAAL,CAFhB;EAID;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmB;EAClC,IAAIP,GAAJ;;EAEA,IAAI;IACFA,GAAG,GAAGX,KAAK,CAACkB,QAAD,CAAX;EACD,CAFD,CAEE,OAAOC,CAAP,EAAU;IACV,IAAIC,KAAJ;;IACA,IACEF,QAAQ,KAAK,YAAb,IACAA,QAAQ,KAAK,YAFf,EAGE;MACA,OAAO;QACLG,mBAAmB,EAAE,IADhB;QAELC,mBAAmB,EAAE,IAFhB;QAGLC,UAAU,EAAE;MAHP,CAAP;IAKD,CATD,MASO,IAAIH,KAAK,GAAGhB,eAAe,CAACoB,IAAhB,CAAqBN,QAArB,CAAZ,EAA4C;MACjD,OAAO;QACLG,mBAAmB,EAAE,IADhB;QAELC,mBAAmB,EAAE,IAFhB;QAGLG,MAAM,EAAEL,KAAK,CAAC,CAAD;MAHR,CAAP;IAKD,CANM,MAMA;MACL,IAAIM,MAAM,GAAG;QACXL,mBAAmB,EAAE,KADV;QAEXC,mBAAmB,EAAE,KAFV;QAGXK,QAAQ,EAAE,CAACxB,cAAD;MAHC,CAAb;;MAKA,IAAIe,QAAQ,CAACU,IAAT,GAAgBnB,MAAhB,KAA2B,CAA/B,EAAkC;QAChC,IAAIoB,SAAS,GAAG3B,OAAO,CAACgB,QAAD,CAAvB;;QACA,IAAIW,SAAJ,EAAe;UACbH,MAAM,CAACC,QAAP,CAAgBG,IAAhB,CACE,iDAAiDD,SAAjD,GAA6D,GAD/D;QAGD;MACF;;MACD,OAAOH,MAAP;IACD;EACF;;EAED,IAAIhB,cAAc,CAACC,GAAD,CAAlB,EAAyB;IACvB,OAAO;MACLW,mBAAmB,EAAE,KADhB;MAELD,mBAAmB,EAAE,KAFhB;MAGLU,IAAI,EAAE,IAHD;MAILJ,QAAQ,EAAE,CAACxB,cAAD;IAJL,CAAP;EAMD,CAPD,MAOO;IACL,OAAO;MACLmB,mBAAmB,EAAE,IADhB;MAELD,mBAAmB,EAAE,IAFhB;MAGLU,IAAI,EAAE;IAHD,CAAP;EAKD;AACF,CAtDD"},"metadata":{},"sourceType":"script"}