{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addUndefinedDefaults = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst utility_1 = require(\"./utility\");\n\nfunction addUndefinedDefaults(value, _pointer, schema) {\n  if (typeof schema === 'boolean' || schema === undefined) {\n    return value;\n  }\n\n  value !== null && value !== void 0 ? value : value = schema.default;\n  const types = (0, utility_1.getTypesOfSchema)(schema);\n\n  if (types.size === 0) {\n    return value;\n  }\n\n  let type;\n\n  if (types.size === 1) {\n    // only one potential type\n    type = Array.from(types)[0];\n  } else if (types.size === 2 && types.has('array') && types.has('object')) {\n    // need to create one of them and array is simpler\n    type = 'array';\n  } else if (schema.properties && types.has('object')) {\n    // assume object\n    type = 'object';\n  } else if (schema.items && types.has('array')) {\n    // assume array\n    type = 'array';\n  } else {\n    // anything else needs to be checked by the consumer anyway\n    return value;\n  }\n\n  if (type === 'array') {\n    return value == undefined ? [] : value;\n  }\n\n  if (type === 'object') {\n    let newValue;\n\n    if (value == undefined) {\n      newValue = {};\n    } else if ((0, utils_1.isJsonObject)(value)) {\n      newValue = value;\n    } else {\n      return value;\n    }\n\n    if (!(0, utils_1.isJsonObject)(schema.properties)) {\n      return newValue;\n    }\n\n    for (const [propName, schemaObject] of Object.entries(schema.properties)) {\n      if (propName === '$schema' || !(0, utils_1.isJsonObject)(schemaObject)) {\n        continue;\n      }\n\n      const value = newValue[propName];\n\n      if (value === undefined) {\n        newValue[propName] = schemaObject.default;\n      } else if ((0, utils_1.isJsonObject)(value)) {\n        // Basic support for oneOf and anyOf.\n        const propertySchemas = schemaObject.oneOf || schemaObject.anyOf;\n        const allProperties = Object.keys(value); // Locate a schema which declares all the properties that the object contains.\n\n        const adjustedSchema = (0, utils_1.isJsonArray)(propertySchemas) && propertySchemas.find(s => {\n          if (!(0, utils_1.isJsonObject)(s)) {\n            return false;\n          }\n\n          const schemaType = (0, utility_1.getTypesOfSchema)(s);\n\n          if (schemaType.size === 1 && schemaType.has('object') && (0, utils_1.isJsonObject)(s.properties)) {\n            const properties = Object.keys(s.properties);\n            return allProperties.every(key => properties.includes(key));\n          }\n\n          return false;\n        });\n\n        if (adjustedSchema && (0, utils_1.isJsonObject)(adjustedSchema)) {\n          newValue[propName] = addUndefinedDefaults(value, _pointer, adjustedSchema);\n        }\n      }\n    }\n\n    return newValue;\n  }\n\n  return value;\n}\n\nexports.addUndefinedDefaults = addUndefinedDefaults;","map":{"version":3,"names":["Object","defineProperty","exports","value","addUndefinedDefaults","utils_1","require","utility_1","_pointer","schema","undefined","default","types","getTypesOfSchema","size","type","Array","from","has","properties","items","newValue","isJsonObject","propName","schemaObject","entries","propertySchemas","oneOf","anyOf","allProperties","keys","adjustedSchema","isJsonArray","find","s","schemaType","every","key","includes"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/src/json/schema/transforms.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addUndefinedDefaults = void 0;\nconst utils_1 = require(\"../utils\");\nconst utility_1 = require(\"./utility\");\nfunction addUndefinedDefaults(value, _pointer, schema) {\n    if (typeof schema === 'boolean' || schema === undefined) {\n        return value;\n    }\n    value !== null && value !== void 0 ? value : (value = schema.default);\n    const types = (0, utility_1.getTypesOfSchema)(schema);\n    if (types.size === 0) {\n        return value;\n    }\n    let type;\n    if (types.size === 1) {\n        // only one potential type\n        type = Array.from(types)[0];\n    }\n    else if (types.size === 2 && types.has('array') && types.has('object')) {\n        // need to create one of them and array is simpler\n        type = 'array';\n    }\n    else if (schema.properties && types.has('object')) {\n        // assume object\n        type = 'object';\n    }\n    else if (schema.items && types.has('array')) {\n        // assume array\n        type = 'array';\n    }\n    else {\n        // anything else needs to be checked by the consumer anyway\n        return value;\n    }\n    if (type === 'array') {\n        return value == undefined ? [] : value;\n    }\n    if (type === 'object') {\n        let newValue;\n        if (value == undefined) {\n            newValue = {};\n        }\n        else if ((0, utils_1.isJsonObject)(value)) {\n            newValue = value;\n        }\n        else {\n            return value;\n        }\n        if (!(0, utils_1.isJsonObject)(schema.properties)) {\n            return newValue;\n        }\n        for (const [propName, schemaObject] of Object.entries(schema.properties)) {\n            if (propName === '$schema' || !(0, utils_1.isJsonObject)(schemaObject)) {\n                continue;\n            }\n            const value = newValue[propName];\n            if (value === undefined) {\n                newValue[propName] = schemaObject.default;\n            }\n            else if ((0, utils_1.isJsonObject)(value)) {\n                // Basic support for oneOf and anyOf.\n                const propertySchemas = schemaObject.oneOf || schemaObject.anyOf;\n                const allProperties = Object.keys(value);\n                // Locate a schema which declares all the properties that the object contains.\n                const adjustedSchema = (0, utils_1.isJsonArray)(propertySchemas) &&\n                    propertySchemas.find((s) => {\n                        if (!(0, utils_1.isJsonObject)(s)) {\n                            return false;\n                        }\n                        const schemaType = (0, utility_1.getTypesOfSchema)(s);\n                        if (schemaType.size === 1 && schemaType.has('object') && (0, utils_1.isJsonObject)(s.properties)) {\n                            const properties = Object.keys(s.properties);\n                            return allProperties.every((key) => properties.includes(key));\n                        }\n                        return false;\n                    });\n                if (adjustedSchema && (0, utils_1.isJsonObject)(adjustedSchema)) {\n                    newValue[propName] = addUndefinedDefaults(value, _pointer, adjustedSchema);\n                }\n            }\n        }\n        return newValue;\n    }\n    return value;\n}\nexports.addUndefinedDefaults = addUndefinedDefaults;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}