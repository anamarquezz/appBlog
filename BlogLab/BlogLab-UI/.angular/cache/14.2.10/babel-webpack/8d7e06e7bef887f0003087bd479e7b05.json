{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CacheInfoCommandModule = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst fs_1 = require(\"fs\");\n\nconst path_1 = require(\"path\");\n\nconst command_module_1 = require(\"../../../command-builder/command-module\");\n\nconst environment_options_1 = require(\"../../../utilities/environment-options\");\n\nconst utilities_1 = require(\"../utilities\");\n\nclass CacheInfoCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.command = 'info';\n    this.describe = 'Prints persistent disk cache configuration and statistics in the console.';\n    this.scope = command_module_1.CommandScope.In;\n  }\n\n  builder(localYargs) {\n    return localYargs.strict();\n  }\n\n  run() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        path,\n        environment,\n        enabled\n      } = (0, utilities_1.getCacheConfig)(_this.context.workspace);\n\n      _this.context.logger.info(core_1.tags.stripIndents`\n      Enabled: ${enabled ? 'yes' : 'no'}\n      Environment: ${environment}\n      Path: ${path}\n      Size on disk: ${yield _this.getSizeOfDirectory(path)}\n      Effective status on current machine: ${_this.effectiveEnabledStatus() ? 'enabled' : 'disabled'}\n    `);\n    })();\n  }\n\n  getSizeOfDirectory(path) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const directoriesStack = [path];\n      let size = 0;\n\n      while (directoriesStack.length) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const dirPath = directoriesStack.pop();\n        let entries = [];\n\n        try {\n          entries = yield fs_1.promises.readdir(dirPath);\n        } catch {}\n\n        for (const entry of entries) {\n          const entryPath = (0, path_1.join)(dirPath, entry);\n          const stats = yield fs_1.promises.stat(entryPath);\n\n          if (stats.isDirectory()) {\n            directoriesStack.push(entryPath);\n          }\n\n          size += stats.size;\n        }\n      }\n\n      return _this2.formatSize(size);\n    })();\n  }\n\n  formatSize(size) {\n    if (size <= 0) {\n      return '0 bytes';\n    }\n\n    const abbreviations = ['bytes', 'kB', 'MB', 'GB'];\n    const index = Math.floor(Math.log(size) / Math.log(1024));\n    const roundedSize = size / Math.pow(1024, index); // bytes don't have a fraction\n\n    const fractionDigits = index === 0 ? 0 : 2;\n    return `${roundedSize.toFixed(fractionDigits)} ${abbreviations[index]}`;\n  }\n\n  effectiveEnabledStatus() {\n    const {\n      enabled,\n      environment\n    } = (0, utilities_1.getCacheConfig)(this.context.workspace);\n\n    if (enabled) {\n      switch (environment) {\n        case 'ci':\n          return environment_options_1.isCI;\n\n        case 'local':\n          return !environment_options_1.isCI;\n      }\n    }\n\n    return enabled;\n  }\n\n}\n\nexports.CacheInfoCommandModule = CacheInfoCommandModule;","map":{"version":3,"names":["Object","defineProperty","exports","value","CacheInfoCommandModule","core_1","require","fs_1","path_1","command_module_1","environment_options_1","utilities_1","CommandModule","constructor","arguments","command","describe","scope","CommandScope","In","builder","localYargs","strict","run","path","environment","enabled","getCacheConfig","context","workspace","logger","info","tags","stripIndents","getSizeOfDirectory","effectiveEnabledStatus","directoriesStack","size","length","dirPath","pop","entries","promises","readdir","entry","entryPath","join","stats","stat","isDirectory","push","formatSize","abbreviations","index","Math","floor","log","roundedSize","pow","fractionDigits","toFixed","isCI"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/commands/cache/info/cli.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CacheInfoCommandModule = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst path_1 = require(\"path\");\nconst command_module_1 = require(\"../../../command-builder/command-module\");\nconst environment_options_1 = require(\"../../../utilities/environment-options\");\nconst utilities_1 = require(\"../utilities\");\nclass CacheInfoCommandModule extends command_module_1.CommandModule {\n    constructor() {\n        super(...arguments);\n        this.command = 'info';\n        this.describe = 'Prints persistent disk cache configuration and statistics in the console.';\n        this.scope = command_module_1.CommandScope.In;\n    }\n    builder(localYargs) {\n        return localYargs.strict();\n    }\n    async run() {\n        const { path, environment, enabled } = (0, utilities_1.getCacheConfig)(this.context.workspace);\n        this.context.logger.info(core_1.tags.stripIndents `\n      Enabled: ${enabled ? 'yes' : 'no'}\n      Environment: ${environment}\n      Path: ${path}\n      Size on disk: ${await this.getSizeOfDirectory(path)}\n      Effective status on current machine: ${this.effectiveEnabledStatus() ? 'enabled' : 'disabled'}\n    `);\n    }\n    async getSizeOfDirectory(path) {\n        const directoriesStack = [path];\n        let size = 0;\n        while (directoriesStack.length) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const dirPath = directoriesStack.pop();\n            let entries = [];\n            try {\n                entries = await fs_1.promises.readdir(dirPath);\n            }\n            catch { }\n            for (const entry of entries) {\n                const entryPath = (0, path_1.join)(dirPath, entry);\n                const stats = await fs_1.promises.stat(entryPath);\n                if (stats.isDirectory()) {\n                    directoriesStack.push(entryPath);\n                }\n                size += stats.size;\n            }\n        }\n        return this.formatSize(size);\n    }\n    formatSize(size) {\n        if (size <= 0) {\n            return '0 bytes';\n        }\n        const abbreviations = ['bytes', 'kB', 'MB', 'GB'];\n        const index = Math.floor(Math.log(size) / Math.log(1024));\n        const roundedSize = size / Math.pow(1024, index);\n        // bytes don't have a fraction\n        const fractionDigits = index === 0 ? 0 : 2;\n        return `${roundedSize.toFixed(fractionDigits)} ${abbreviations[index]}`;\n    }\n    effectiveEnabledStatus() {\n        const { enabled, environment } = (0, utilities_1.getCacheConfig)(this.context.workspace);\n        if (enabled) {\n            switch (environment) {\n                case 'ci':\n                    return environment_options_1.isCI;\n                case 'local':\n                    return !environment_options_1.isCI;\n            }\n        }\n        return enabled;\n    }\n}\nexports.CacheInfoCommandModule = CacheInfoCommandModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}