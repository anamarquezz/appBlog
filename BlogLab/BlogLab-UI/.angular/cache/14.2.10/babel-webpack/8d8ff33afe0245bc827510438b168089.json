{"ast":null,"code":"var charToInteger = {};\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfor (var i = 0; i < chars.length; i++) {\n  charToInteger[chars.charCodeAt(i)] = i;\n}\n\nfunction decode(mappings) {\n  var decoded = [];\n  var line = [];\n  var segment = [0, 0, 0, 0, 0];\n  var j = 0;\n\n  for (var i = 0, shift = 0, value = 0; i < mappings.length; i++) {\n    var c = mappings.charCodeAt(i);\n\n    if (c === 44) {\n      // \",\"\n      segmentify(line, segment, j);\n      j = 0;\n    } else if (c === 59) {\n      // \";\"\n      segmentify(line, segment, j);\n      j = 0;\n      decoded.push(line);\n      line = [];\n      segment[0] = 0;\n    } else {\n      var integer = charToInteger[c];\n\n      if (integer === undefined) {\n        throw new Error('Invalid character (' + String.fromCharCode(c) + ')');\n      }\n\n      var hasContinuationBit = integer & 32;\n      integer &= 31;\n      value += integer << shift;\n\n      if (hasContinuationBit) {\n        shift += 5;\n      } else {\n        var shouldNegate = value & 1;\n        value >>>= 1;\n\n        if (shouldNegate) {\n          value = value === 0 ? -0x80000000 : -value;\n        }\n\n        segment[j] += value;\n        j++;\n        value = shift = 0; // reset\n      }\n    }\n  }\n\n  segmentify(line, segment, j);\n  decoded.push(line);\n  return decoded;\n}\n\nfunction segmentify(line, segment, j) {\n  // This looks ugly, but we're creating specialized arrays with a specific\n  // length. This is much faster than creating a new array (which v8 expands to\n  // a capacity of 17 after pushing the first item), or slicing out a subarray\n  // (which is slow). Length 4 is assumed to be the most frequent, followed by\n  // length 5 (since not everything will have an associated name), followed by\n  // length 1 (it's probably rare for a source substring to not have an\n  // associated segment data).\n  if (j === 4) line.push([segment[0], segment[1], segment[2], segment[3]]);else if (j === 5) line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);else if (j === 1) line.push([segment[0]]);\n}\n\nfunction encode(decoded) {\n  var sourceFileIndex = 0; // second field\n\n  var sourceCodeLine = 0; // third field\n\n  var sourceCodeColumn = 0; // fourth field\n\n  var nameIndex = 0; // fifth field\n\n  var mappings = '';\n\n  for (var i = 0; i < decoded.length; i++) {\n    var line = decoded[i];\n    if (i > 0) mappings += ';';\n    if (line.length === 0) continue;\n    var generatedCodeColumn = 0; // first field\n\n    var lineMappings = [];\n\n    for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {\n      var segment = line_1[_i];\n      var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);\n      generatedCodeColumn = segment[0];\n\n      if (segment.length > 1) {\n        segmentMappings += encodeInteger(segment[1] - sourceFileIndex) + encodeInteger(segment[2] - sourceCodeLine) + encodeInteger(segment[3] - sourceCodeColumn);\n        sourceFileIndex = segment[1];\n        sourceCodeLine = segment[2];\n        sourceCodeColumn = segment[3];\n      }\n\n      if (segment.length === 5) {\n        segmentMappings += encodeInteger(segment[4] - nameIndex);\n        nameIndex = segment[4];\n      }\n\n      lineMappings.push(segmentMappings);\n    }\n\n    mappings += lineMappings.join(',');\n  }\n\n  return mappings;\n}\n\nfunction encodeInteger(num) {\n  var result = '';\n  num = num < 0 ? -num << 1 | 1 : num << 1;\n\n  do {\n    var clamped = num & 31;\n    num >>>= 5;\n\n    if (num > 0) {\n      clamped |= 32;\n    }\n\n    result += chars[clamped];\n  } while (num > 0);\n\n  return result;\n}\n\nexport { decode, encode };","map":{"version":3,"names":["charToInteger","chars","i","length","charCodeAt","decode","mappings","decoded","line","segment","j","shift","value","c","segmentify","push","integer","undefined","Error","String","fromCharCode","hasContinuationBit","shouldNegate","encode","sourceFileIndex","sourceCodeLine","sourceCodeColumn","nameIndex","generatedCodeColumn","lineMappings","_i","line_1","segmentMappings","encodeInteger","join","num","result","clamped"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/sourcemap-codec/dist/sourcemap-codec.es.js"],"sourcesContent":["var charToInteger = {};\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nfor (var i = 0; i < chars.length; i++) {\n    charToInteger[chars.charCodeAt(i)] = i;\n}\nfunction decode(mappings) {\n    var decoded = [];\n    var line = [];\n    var segment = [\n        0,\n        0,\n        0,\n        0,\n        0,\n    ];\n    var j = 0;\n    for (var i = 0, shift = 0, value = 0; i < mappings.length; i++) {\n        var c = mappings.charCodeAt(i);\n        if (c === 44) { // \",\"\n            segmentify(line, segment, j);\n            j = 0;\n        }\n        else if (c === 59) { // \";\"\n            segmentify(line, segment, j);\n            j = 0;\n            decoded.push(line);\n            line = [];\n            segment[0] = 0;\n        }\n        else {\n            var integer = charToInteger[c];\n            if (integer === undefined) {\n                throw new Error('Invalid character (' + String.fromCharCode(c) + ')');\n            }\n            var hasContinuationBit = integer & 32;\n            integer &= 31;\n            value += integer << shift;\n            if (hasContinuationBit) {\n                shift += 5;\n            }\n            else {\n                var shouldNegate = value & 1;\n                value >>>= 1;\n                if (shouldNegate) {\n                    value = value === 0 ? -0x80000000 : -value;\n                }\n                segment[j] += value;\n                j++;\n                value = shift = 0; // reset\n            }\n        }\n    }\n    segmentify(line, segment, j);\n    decoded.push(line);\n    return decoded;\n}\nfunction segmentify(line, segment, j) {\n    // This looks ugly, but we're creating specialized arrays with a specific\n    // length. This is much faster than creating a new array (which v8 expands to\n    // a capacity of 17 after pushing the first item), or slicing out a subarray\n    // (which is slow). Length 4 is assumed to be the most frequent, followed by\n    // length 5 (since not everything will have an associated name), followed by\n    // length 1 (it's probably rare for a source substring to not have an\n    // associated segment data).\n    if (j === 4)\n        line.push([segment[0], segment[1], segment[2], segment[3]]);\n    else if (j === 5)\n        line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);\n    else if (j === 1)\n        line.push([segment[0]]);\n}\nfunction encode(decoded) {\n    var sourceFileIndex = 0; // second field\n    var sourceCodeLine = 0; // third field\n    var sourceCodeColumn = 0; // fourth field\n    var nameIndex = 0; // fifth field\n    var mappings = '';\n    for (var i = 0; i < decoded.length; i++) {\n        var line = decoded[i];\n        if (i > 0)\n            mappings += ';';\n        if (line.length === 0)\n            continue;\n        var generatedCodeColumn = 0; // first field\n        var lineMappings = [];\n        for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {\n            var segment = line_1[_i];\n            var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);\n            generatedCodeColumn = segment[0];\n            if (segment.length > 1) {\n                segmentMappings +=\n                    encodeInteger(segment[1] - sourceFileIndex) +\n                        encodeInteger(segment[2] - sourceCodeLine) +\n                        encodeInteger(segment[3] - sourceCodeColumn);\n                sourceFileIndex = segment[1];\n                sourceCodeLine = segment[2];\n                sourceCodeColumn = segment[3];\n            }\n            if (segment.length === 5) {\n                segmentMappings += encodeInteger(segment[4] - nameIndex);\n                nameIndex = segment[4];\n            }\n            lineMappings.push(segmentMappings);\n        }\n        mappings += lineMappings.join(',');\n    }\n    return mappings;\n}\nfunction encodeInteger(num) {\n    var result = '';\n    num = num < 0 ? (-num << 1) | 1 : num << 1;\n    do {\n        var clamped = num & 31;\n        num >>>= 5;\n        if (num > 0) {\n            clamped |= 32;\n        }\n        result += chars[clamped];\n    } while (num > 0);\n    return result;\n}\n\nexport { decode, encode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}