{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchematicsCommandModule = exports.DEFAULT_SCHEMATICS_COLLECTION = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst schematics_1 = require(\"@angular-devkit/schematics\");\n\nconst tools_1 = require(\"@angular-devkit/schematics/tools\");\n\nconst path_1 = require(\"path\");\n\nconst config_1 = require(\"../utilities/config\");\n\nconst error_1 = require(\"../utilities/error\");\n\nconst memoize_1 = require(\"../utilities/memoize\");\n\nconst tty_1 = require(\"../utilities/tty\");\n\nconst command_module_1 = require(\"./command-module\");\n\nconst json_schema_1 = require(\"./utilities/json-schema\");\n\nconst schematic_engine_host_1 = require(\"./utilities/schematic-engine-host\");\n\nconst schematic_workflow_1 = require(\"./utilities/schematic-workflow\");\n\nexports.DEFAULT_SCHEMATICS_COLLECTION = '@schematics/angular';\n\nclass SchematicsCommandModule extends command_module_1.CommandModule {\n  constructor() {\n    super(...arguments);\n    this.scope = command_module_1.CommandScope.In;\n    this.allowPrivateSchematics = false;\n    this.shouldReportAnalytics = false;\n    this.defaultProjectDeprecationWarningShown = false;\n  }\n\n  builder(argv) {\n    return _asyncToGenerator(function* () {\n      return argv.option('interactive', {\n        describe: 'Enable interactive input prompts.',\n        type: 'boolean',\n        default: true\n      }).option('dry-run', {\n        describe: 'Run through and reports activity without writing out results.',\n        type: 'boolean',\n        default: false\n      }).option('defaults', {\n        describe: 'Disable interactive input prompts for options with a default.',\n        type: 'boolean',\n        default: false\n      }).option('force', {\n        describe: 'Force overwriting of existing files.',\n        type: 'boolean',\n        default: false\n      }).strict();\n    })();\n  }\n  /** Get schematic schema options.*/\n\n\n  getSchematicOptions(collection, schematicName, workflow) {\n    return _asyncToGenerator(function* () {\n      const schematic = collection.createSchematic(schematicName, true);\n      const {\n        schemaJson\n      } = schematic.description;\n\n      if (!schemaJson) {\n        return [];\n      }\n\n      return (0, json_schema_1.parseJsonSchemaToOptions)(workflow.registry, schemaJson);\n    })();\n  }\n\n  getOrCreateWorkflowForBuilder(collectionName) {\n    return new tools_1.NodeWorkflow(this.context.root, {\n      resolvePaths: this.getResolvePaths(collectionName),\n      engineHostCreator: options => new schematic_engine_host_1.SchematicEngineHost(options.resolvePaths)\n    });\n  }\n\n  getOrCreateWorkflowForExecution(collectionName, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        logger,\n        root,\n        packageManager\n      } = _this.context;\n      const {\n        force,\n        dryRun,\n        packageRegistry\n      } = options;\n      const workflow = new tools_1.NodeWorkflow(root, {\n        force,\n        dryRun,\n        packageManager: packageManager.name,\n        // A schema registry is required to allow customizing addUndefinedDefaults\n        registry: new core_1.schema.CoreSchemaRegistry(schematics_1.formats.standardFormats),\n        packageRegistry,\n        resolvePaths: _this.getResolvePaths(collectionName),\n        schemaValidation: true,\n        optionTransforms: [\n        /*#__PURE__*/\n        // Add configuration file defaults\n        function () {\n          var _ref = _asyncToGenerator(function* (schematic, current) {\n            const projectName = typeof (current === null || current === void 0 ? void 0 : current.project) === 'string' ? current.project : _this.getProjectName();\n            return { ...(yield (0, config_1.getSchematicDefaults)(schematic.collection.name, schematic.name, projectName)),\n              ...current\n            };\n          });\n\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }()],\n        engineHostCreator: options => new schematic_engine_host_1.SchematicEngineHost(options.resolvePaths)\n      });\n      workflow.registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);\n      workflow.registry.useXDeprecatedProvider(msg => logger.warn(msg));\n      workflow.registry.addSmartDefaultProvider('projectName', () => _this.getProjectName());\n      const workingDir = (0, core_1.normalize)((0, path_1.relative)(_this.context.root, process.cwd()));\n      workflow.registry.addSmartDefaultProvider('workingDirectory', () => workingDir === '' ? undefined : workingDir);\n      let shouldReportAnalytics = true;\n      workflow.engineHost.registerOptionsTransform( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (schematic, options) {\n          if (shouldReportAnalytics) {\n            shouldReportAnalytics = false;\n            yield _this.reportAnalytics(options, undefined\n            /** paths */\n            , undefined\n            /** dimensions */\n            , schematic.collection.name + ':' + schematic.name);\n          } // TODO: The below should be removed in version 15 when we change 1P schematics to use the `workingDirectory smart default`.\n          // Handle `\"format\": \"path\"` options.\n\n\n          const schema = schematic === null || schematic === void 0 ? void 0 : schematic.schemaJson;\n\n          if (!options || !schema || !(0, core_1.isJsonObject)(schema)) {\n            return options;\n          }\n\n          if (!('path' in options && options['path'] === undefined)) {\n            return options;\n          }\n\n          const properties = schema === null || schema === void 0 ? void 0 : schema['properties'];\n\n          if (!properties || !(0, core_1.isJsonObject)(properties)) {\n            return options;\n          }\n\n          const property = properties['path'];\n\n          if (!property || !(0, core_1.isJsonObject)(property)) {\n            return options;\n          }\n\n          if (property['format'] === 'path' && !property['$default']) {\n            options['path'] = workingDir || undefined;\n\n            _this.context.logger.warn(`The 'path' option in '${schematic === null || schematic === void 0 ? void 0 : schematic.schema}' is using deprecated behaviour. ` + `'workingDirectory' smart default provider should be used instead.`);\n          }\n\n          return options;\n        });\n\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n\n      if (options.interactive !== false && (0, tty_1.isTTY)()) {\n        workflow.registry.usePromptProvider( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (definitions) {\n            const questions = definitions.filter(definition => !options.defaults || definition.default === undefined).map(definition => {\n              var _a;\n\n              const question = {\n                name: definition.id,\n                message: definition.message,\n                default: definition.default\n              };\n              const validator = definition.validator;\n\n              if (validator) {\n                question.validate = input => validator(input); // Filter allows transformation of the value prior to validation\n\n\n                question.filter = /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator(function* (input) {\n                    for (const type of definition.propertyTypes) {\n                      let value;\n\n                      switch (type) {\n                        case 'string':\n                          value = String(input);\n                          break;\n\n                        case 'integer':\n                        case 'number':\n                          value = Number(input);\n                          break;\n\n                        default:\n                          value = input;\n                          break;\n                      } // Can be a string if validation fails\n\n\n                      const isValid = (yield validator(value)) === true;\n\n                      if (isValid) {\n                        return value;\n                      }\n                    }\n\n                    return input;\n                  });\n\n                  return function (_x6) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }();\n              }\n\n              switch (definition.type) {\n                case 'confirmation':\n                  question.type = 'confirm';\n                  break;\n\n                case 'list':\n                  question.type = definition.multiselect ? 'checkbox' : 'list';\n                  question.choices = (_a = definition.items) === null || _a === void 0 ? void 0 : _a.map(item => {\n                    return typeof item == 'string' ? item : {\n                      name: item.label,\n                      value: item.value\n                    };\n                  });\n                  break;\n\n                default:\n                  question.type = definition.type;\n                  break;\n              }\n\n              return question;\n            });\n\n            if (questions.length) {\n              const {\n                prompt\n              } = yield Promise.resolve().then(() => __importStar(require('inquirer')));\n              return prompt(questions);\n            } else {\n              return {};\n            }\n          });\n\n          return function (_x5) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      }\n\n      return workflow;\n    })();\n  }\n\n  getSchematicCollections() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a; // Resolve relative collections from the location of `angular.json`\n\n\n      const resolveRelativeCollection = collectionName => collectionName.charAt(0) === '.' ? (0, path_1.resolve)(_this2.context.root, collectionName) : collectionName;\n\n      const getSchematicCollections = configSection => {\n        if (!configSection) {\n          return undefined;\n        }\n\n        const {\n          schematicCollections,\n          defaultCollection\n        } = configSection;\n\n        if (Array.isArray(schematicCollections)) {\n          return new Set(schematicCollections.map(c => resolveRelativeCollection(c)));\n        } else if (typeof defaultCollection === 'string') {\n          return new Set([resolveRelativeCollection(defaultCollection)]);\n        }\n\n        return undefined;\n      };\n\n      const {\n        workspace,\n        globalConfiguration\n      } = _this2.context;\n\n      if (workspace) {\n        const project = (0, config_1.getProjectByCwd)(workspace);\n\n        if (project) {\n          const value = getSchematicCollections(workspace.getProjectCli(project));\n\n          if (value) {\n            return value;\n          }\n        }\n      }\n\n      const value = (_a = getSchematicCollections(workspace === null || workspace === void 0 ? void 0 : workspace.getCli())) !== null && _a !== void 0 ? _a : getSchematicCollections(globalConfiguration.getCli());\n\n      if (value) {\n        return value;\n      }\n\n      return new Set([exports.DEFAULT_SCHEMATICS_COLLECTION]);\n    })();\n  }\n\n  parseSchematicInfo(schematic) {\n    if (schematic === null || schematic === void 0 ? void 0 : schematic.includes(':')) {\n      const [collectionName, schematicName] = schematic.split(':', 2);\n      return [collectionName, schematicName];\n    }\n\n    return [undefined, schematic];\n  }\n\n  runSchematic(options) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        logger\n      } = _this3.context;\n      const {\n        schematicOptions,\n        executionOptions,\n        collectionName,\n        schematicName\n      } = options;\n      const workflow = yield _this3.getOrCreateWorkflowForExecution(collectionName, executionOptions);\n\n      if (!schematicName) {\n        throw new Error('schematicName cannot be undefined.');\n      }\n\n      const {\n        unsubscribe,\n        files\n      } = (0, schematic_workflow_1.subscribeToWorkflow)(workflow, logger);\n\n      try {\n        yield workflow.execute({\n          collection: collectionName,\n          schematic: schematicName,\n          options: schematicOptions,\n          logger,\n          allowPrivate: _this3.allowPrivateSchematics\n        }).toPromise();\n\n        if (!files.size) {\n          logger.info('Nothing to be done.');\n        }\n\n        if (executionOptions.dryRun) {\n          logger.warn(`\\nNOTE: The \"--dry-run\" option means no changes were made.`);\n        }\n      } catch (err) {\n        // In case the workflow was not successful, show an appropriate error message.\n        if (err instanceof schematics_1.UnsuccessfulWorkflowExecution) {\n          // \"See above\" because we already printed the error.\n          logger.fatal('The Schematic workflow failed. See above.');\n        } else {\n          (0, error_1.assertIsError)(err);\n          logger.fatal(err.message);\n        }\n\n        return 1;\n      } finally {\n        unsubscribe();\n      }\n\n      return 0;\n    })();\n  }\n\n  getProjectName() {\n    const {\n      workspace,\n      logger\n    } = this.context;\n\n    if (!workspace) {\n      return undefined;\n    }\n\n    const projectName = (0, config_1.getProjectByCwd)(workspace);\n\n    if (projectName) {\n      return projectName;\n    }\n\n    const defaultProjectName = workspace.extensions['defaultProject'];\n\n    if (typeof defaultProjectName === 'string' && defaultProjectName) {\n      if (!this.defaultProjectDeprecationWarningShown) {\n        logger.warn(core_1.tags.oneLine`\n             DEPRECATED: The 'defaultProject' workspace option has been deprecated.\n             The project to use will be determined from the current working directory.\n           `);\n        this.defaultProjectDeprecationWarningShown = true;\n      }\n\n      return defaultProjectName;\n    }\n\n    return undefined;\n  }\n\n  getResolvePaths(collectionName) {\n    const {\n      workspace,\n      root\n    } = this.context;\n    return workspace ? // Workspace\n    collectionName === exports.DEFAULT_SCHEMATICS_COLLECTION ? // Favor __dirname for @schematics/angular to use the build-in version\n    [__dirname, process.cwd(), root] : [process.cwd(), root, __dirname] : // Global\n    [__dirname, process.cwd()];\n  }\n\n}\n\n__decorate([memoize_1.memoize], SchematicsCommandModule.prototype, \"getOrCreateWorkflowForBuilder\", null);\n\n__decorate([memoize_1.memoize], SchematicsCommandModule.prototype, \"getOrCreateWorkflowForExecution\", null);\n\n__decorate([memoize_1.memoize], SchematicsCommandModule.prototype, \"getSchematicCollections\", null);\n\nexports.SchematicsCommandModule = SchematicsCommandModule;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__decorate","decorators","target","key","c","arguments","length","r","d","Reflect","decorate","i","__importStar","mod","result","prototype","hasOwnProperty","call","exports","SchematicsCommandModule","DEFAULT_SCHEMATICS_COLLECTION","core_1","require","schematics_1","tools_1","path_1","config_1","error_1","memoize_1","tty_1","command_module_1","json_schema_1","schematic_engine_host_1","schematic_workflow_1","CommandModule","constructor","scope","CommandScope","In","allowPrivateSchematics","shouldReportAnalytics","defaultProjectDeprecationWarningShown","builder","argv","option","describe","type","default","strict","getSchematicOptions","collection","schematicName","workflow","schematic","createSchematic","schemaJson","description","parseJsonSchemaToOptions","registry","getOrCreateWorkflowForBuilder","collectionName","NodeWorkflow","context","root","resolvePaths","getResolvePaths","engineHostCreator","options","SchematicEngineHost","getOrCreateWorkflowForExecution","logger","packageManager","force","dryRun","packageRegistry","name","schema","CoreSchemaRegistry","formats","standardFormats","schemaValidation","optionTransforms","current","projectName","project","getProjectName","getSchematicDefaults","addPostTransform","transforms","addUndefinedDefaults","useXDeprecatedProvider","msg","warn","addSmartDefaultProvider","workingDir","normalize","relative","process","cwd","engineHost","registerOptionsTransform","reportAnalytics","isJsonObject","properties","property","interactive","isTTY","usePromptProvider","definitions","questions","filter","definition","defaults","map","_a","question","id","message","validator","validate","input","propertyTypes","String","Number","isValid","multiselect","choices","items","item","label","prompt","Promise","resolve","then","getSchematicCollections","resolveRelativeCollection","charAt","configSection","schematicCollections","defaultCollection","Array","isArray","Set","workspace","globalConfiguration","getProjectByCwd","getProjectCli","getCli","parseSchematicInfo","includes","split","runSchematic","schematicOptions","executionOptions","Error","unsubscribe","files","subscribeToWorkflow","execute","allowPrivate","toPromise","size","info","err","UnsuccessfulWorkflowExecution","fatal","assertIsError","defaultProjectName","extensions","tags","oneLine","__dirname","memoize"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/command-builder/schematics-command-module.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchematicsCommandModule = exports.DEFAULT_SCHEMATICS_COLLECTION = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst tools_1 = require(\"@angular-devkit/schematics/tools\");\nconst path_1 = require(\"path\");\nconst config_1 = require(\"../utilities/config\");\nconst error_1 = require(\"../utilities/error\");\nconst memoize_1 = require(\"../utilities/memoize\");\nconst tty_1 = require(\"../utilities/tty\");\nconst command_module_1 = require(\"./command-module\");\nconst json_schema_1 = require(\"./utilities/json-schema\");\nconst schematic_engine_host_1 = require(\"./utilities/schematic-engine-host\");\nconst schematic_workflow_1 = require(\"./utilities/schematic-workflow\");\nexports.DEFAULT_SCHEMATICS_COLLECTION = '@schematics/angular';\nclass SchematicsCommandModule extends command_module_1.CommandModule {\n    constructor() {\n        super(...arguments);\n        this.scope = command_module_1.CommandScope.In;\n        this.allowPrivateSchematics = false;\n        this.shouldReportAnalytics = false;\n        this.defaultProjectDeprecationWarningShown = false;\n    }\n    async builder(argv) {\n        return argv\n            .option('interactive', {\n            describe: 'Enable interactive input prompts.',\n            type: 'boolean',\n            default: true,\n        })\n            .option('dry-run', {\n            describe: 'Run through and reports activity without writing out results.',\n            type: 'boolean',\n            default: false,\n        })\n            .option('defaults', {\n            describe: 'Disable interactive input prompts for options with a default.',\n            type: 'boolean',\n            default: false,\n        })\n            .option('force', {\n            describe: 'Force overwriting of existing files.',\n            type: 'boolean',\n            default: false,\n        })\n            .strict();\n    }\n    /** Get schematic schema options.*/\n    async getSchematicOptions(collection, schematicName, workflow) {\n        const schematic = collection.createSchematic(schematicName, true);\n        const { schemaJson } = schematic.description;\n        if (!schemaJson) {\n            return [];\n        }\n        return (0, json_schema_1.parseJsonSchemaToOptions)(workflow.registry, schemaJson);\n    }\n    getOrCreateWorkflowForBuilder(collectionName) {\n        return new tools_1.NodeWorkflow(this.context.root, {\n            resolvePaths: this.getResolvePaths(collectionName),\n            engineHostCreator: (options) => new schematic_engine_host_1.SchematicEngineHost(options.resolvePaths),\n        });\n    }\n    async getOrCreateWorkflowForExecution(collectionName, options) {\n        const { logger, root, packageManager } = this.context;\n        const { force, dryRun, packageRegistry } = options;\n        const workflow = new tools_1.NodeWorkflow(root, {\n            force,\n            dryRun,\n            packageManager: packageManager.name,\n            // A schema registry is required to allow customizing addUndefinedDefaults\n            registry: new core_1.schema.CoreSchemaRegistry(schematics_1.formats.standardFormats),\n            packageRegistry,\n            resolvePaths: this.getResolvePaths(collectionName),\n            schemaValidation: true,\n            optionTransforms: [\n                // Add configuration file defaults\n                async (schematic, current) => {\n                    const projectName = typeof (current === null || current === void 0 ? void 0 : current.project) === 'string' ? current.project : this.getProjectName();\n                    return {\n                        ...(await (0, config_1.getSchematicDefaults)(schematic.collection.name, schematic.name, projectName)),\n                        ...current,\n                    };\n                },\n            ],\n            engineHostCreator: (options) => new schematic_engine_host_1.SchematicEngineHost(options.resolvePaths),\n        });\n        workflow.registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);\n        workflow.registry.useXDeprecatedProvider((msg) => logger.warn(msg));\n        workflow.registry.addSmartDefaultProvider('projectName', () => this.getProjectName());\n        const workingDir = (0, core_1.normalize)((0, path_1.relative)(this.context.root, process.cwd()));\n        workflow.registry.addSmartDefaultProvider('workingDirectory', () => workingDir === '' ? undefined : workingDir);\n        let shouldReportAnalytics = true;\n        workflow.engineHost.registerOptionsTransform(async (schematic, options) => {\n            if (shouldReportAnalytics) {\n                shouldReportAnalytics = false;\n                await this.reportAnalytics(options, undefined /** paths */, undefined /** dimensions */, schematic.collection.name + ':' + schematic.name);\n            }\n            // TODO: The below should be removed in version 15 when we change 1P schematics to use the `workingDirectory smart default`.\n            // Handle `\"format\": \"path\"` options.\n            const schema = schematic === null || schematic === void 0 ? void 0 : schematic.schemaJson;\n            if (!options || !schema || !(0, core_1.isJsonObject)(schema)) {\n                return options;\n            }\n            if (!('path' in options && options['path'] === undefined)) {\n                return options;\n            }\n            const properties = schema === null || schema === void 0 ? void 0 : schema['properties'];\n            if (!properties || !(0, core_1.isJsonObject)(properties)) {\n                return options;\n            }\n            const property = properties['path'];\n            if (!property || !(0, core_1.isJsonObject)(property)) {\n                return options;\n            }\n            if (property['format'] === 'path' && !property['$default']) {\n                options['path'] = workingDir || undefined;\n                this.context.logger.warn(`The 'path' option in '${schematic === null || schematic === void 0 ? void 0 : schematic.schema}' is using deprecated behaviour. ` +\n                    `'workingDirectory' smart default provider should be used instead.`);\n            }\n            return options;\n        });\n        if (options.interactive !== false && (0, tty_1.isTTY)()) {\n            workflow.registry.usePromptProvider(async (definitions) => {\n                const questions = definitions\n                    .filter((definition) => !options.defaults || definition.default === undefined)\n                    .map((definition) => {\n                    var _a;\n                    const question = {\n                        name: definition.id,\n                        message: definition.message,\n                        default: definition.default,\n                    };\n                    const validator = definition.validator;\n                    if (validator) {\n                        question.validate = (input) => validator(input);\n                        // Filter allows transformation of the value prior to validation\n                        question.filter = async (input) => {\n                            for (const type of definition.propertyTypes) {\n                                let value;\n                                switch (type) {\n                                    case 'string':\n                                        value = String(input);\n                                        break;\n                                    case 'integer':\n                                    case 'number':\n                                        value = Number(input);\n                                        break;\n                                    default:\n                                        value = input;\n                                        break;\n                                }\n                                // Can be a string if validation fails\n                                const isValid = (await validator(value)) === true;\n                                if (isValid) {\n                                    return value;\n                                }\n                            }\n                            return input;\n                        };\n                    }\n                    switch (definition.type) {\n                        case 'confirmation':\n                            question.type = 'confirm';\n                            break;\n                        case 'list':\n                            question.type = definition.multiselect ? 'checkbox' : 'list';\n                            question.choices = (_a = definition.items) === null || _a === void 0 ? void 0 : _a.map((item) => {\n                                return typeof item == 'string'\n                                    ? item\n                                    : {\n                                        name: item.label,\n                                        value: item.value,\n                                    };\n                            });\n                            break;\n                        default:\n                            question.type = definition.type;\n                            break;\n                    }\n                    return question;\n                });\n                if (questions.length) {\n                    const { prompt } = await Promise.resolve().then(() => __importStar(require('inquirer')));\n                    return prompt(questions);\n                }\n                else {\n                    return {};\n                }\n            });\n        }\n        return workflow;\n    }\n    async getSchematicCollections() {\n        var _a;\n        // Resolve relative collections from the location of `angular.json`\n        const resolveRelativeCollection = (collectionName) => collectionName.charAt(0) === '.'\n            ? (0, path_1.resolve)(this.context.root, collectionName)\n            : collectionName;\n        const getSchematicCollections = (configSection) => {\n            if (!configSection) {\n                return undefined;\n            }\n            const { schematicCollections, defaultCollection } = configSection;\n            if (Array.isArray(schematicCollections)) {\n                return new Set(schematicCollections.map((c) => resolveRelativeCollection(c)));\n            }\n            else if (typeof defaultCollection === 'string') {\n                return new Set([resolveRelativeCollection(defaultCollection)]);\n            }\n            return undefined;\n        };\n        const { workspace, globalConfiguration } = this.context;\n        if (workspace) {\n            const project = (0, config_1.getProjectByCwd)(workspace);\n            if (project) {\n                const value = getSchematicCollections(workspace.getProjectCli(project));\n                if (value) {\n                    return value;\n                }\n            }\n        }\n        const value = (_a = getSchematicCollections(workspace === null || workspace === void 0 ? void 0 : workspace.getCli())) !== null && _a !== void 0 ? _a : getSchematicCollections(globalConfiguration.getCli());\n        if (value) {\n            return value;\n        }\n        return new Set([exports.DEFAULT_SCHEMATICS_COLLECTION]);\n    }\n    parseSchematicInfo(schematic) {\n        if (schematic === null || schematic === void 0 ? void 0 : schematic.includes(':')) {\n            const [collectionName, schematicName] = schematic.split(':', 2);\n            return [collectionName, schematicName];\n        }\n        return [undefined, schematic];\n    }\n    async runSchematic(options) {\n        const { logger } = this.context;\n        const { schematicOptions, executionOptions, collectionName, schematicName } = options;\n        const workflow = await this.getOrCreateWorkflowForExecution(collectionName, executionOptions);\n        if (!schematicName) {\n            throw new Error('schematicName cannot be undefined.');\n        }\n        const { unsubscribe, files } = (0, schematic_workflow_1.subscribeToWorkflow)(workflow, logger);\n        try {\n            await workflow\n                .execute({\n                collection: collectionName,\n                schematic: schematicName,\n                options: schematicOptions,\n                logger,\n                allowPrivate: this.allowPrivateSchematics,\n            })\n                .toPromise();\n            if (!files.size) {\n                logger.info('Nothing to be done.');\n            }\n            if (executionOptions.dryRun) {\n                logger.warn(`\\nNOTE: The \"--dry-run\" option means no changes were made.`);\n            }\n        }\n        catch (err) {\n            // In case the workflow was not successful, show an appropriate error message.\n            if (err instanceof schematics_1.UnsuccessfulWorkflowExecution) {\n                // \"See above\" because we already printed the error.\n                logger.fatal('The Schematic workflow failed. See above.');\n            }\n            else {\n                (0, error_1.assertIsError)(err);\n                logger.fatal(err.message);\n            }\n            return 1;\n        }\n        finally {\n            unsubscribe();\n        }\n        return 0;\n    }\n    getProjectName() {\n        const { workspace, logger } = this.context;\n        if (!workspace) {\n            return undefined;\n        }\n        const projectName = (0, config_1.getProjectByCwd)(workspace);\n        if (projectName) {\n            return projectName;\n        }\n        const defaultProjectName = workspace.extensions['defaultProject'];\n        if (typeof defaultProjectName === 'string' && defaultProjectName) {\n            if (!this.defaultProjectDeprecationWarningShown) {\n                logger.warn(core_1.tags.oneLine `\n             DEPRECATED: The 'defaultProject' workspace option has been deprecated.\n             The project to use will be determined from the current working directory.\n           `);\n                this.defaultProjectDeprecationWarningShown = true;\n            }\n            return defaultProjectName;\n        }\n        return undefined;\n    }\n    getResolvePaths(collectionName) {\n        const { workspace, root } = this.context;\n        return workspace\n            ? // Workspace\n                collectionName === exports.DEFAULT_SCHEMATICS_COLLECTION\n                    ? // Favor __dirname for @schematics/angular to use the build-in version\n                        [__dirname, process.cwd(), root]\n                    : [process.cwd(), root, __dirname]\n            : // Global\n                [__dirname, process.cwd()];\n    }\n}\n__decorate([\n    memoize_1.memoize\n], SchematicsCommandModule.prototype, \"getOrCreateWorkflowForBuilder\", null);\n__decorate([\n    memoize_1.memoize\n], SchematicsCommandModule.prototype, \"getOrCreateWorkflowForExecution\", null);\n__decorate([\n    memoize_1.memoize\n], SchematicsCommandModule.prototype, \"getSchematicCollections\", null);\nexports.SchematicsCommandModule = SchematicsCommandModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}