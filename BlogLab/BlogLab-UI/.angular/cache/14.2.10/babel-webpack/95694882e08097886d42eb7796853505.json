{"ast":null,"code":"'use strict';\n/**\n * `list` type prompt\n */\n\nconst chalk = require('chalk');\n\nconst figures = require('figures');\n\nconst cliCursor = require('cli-cursor');\n\nconst runAsync = require('run-async');\n\nconst {\n  flatMap,\n  map,\n  take,\n  takeUntil\n} = require('rxjs/operators');\n\nconst Base = require('./base');\n\nconst observe = require('../utils/events');\n\nconst Paginator = require('../utils/paginator');\n\nconst incrementListIndex = require('../utils/incrementListIndex');\n\nclass ListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.firstRender = true;\n    this.selected = 0;\n    const def = this.opt.default; // If def is a Number, then use as index. Otherwise, check for value.\n\n    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n    } else if (typeof def !== 'number' && def != null) {\n      const index = this.opt.choices.realChoices.findIndex(({\n        value\n      }) => value === def);\n      this.selected = Math.max(index, 0);\n    } // Make sure no default is set (so it won't be printed)\n\n\n    this.opt.default = null;\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(this.screen, {\n      isInfinite: shouldLoop\n    });\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb;\n    const self = this;\n    const events = observe(this.rl);\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey.pipe(takeUntil(events.line)).forEach(this.onDownKey.bind(this));\n    events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));\n    events.line.pipe(take(1), map(this.getCurrentValue.bind(this)), flatMap(value => runAsync(self.opt.filter)(value, self.answers).catch(err => err))).forEach(this.onSubmit.bind(this)); // Init the prompt\n\n    cliCursor.hide();\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {ListPrompt} self\n   */\n\n\n  render() {\n    // Render question\n    let message = this.getQuestion();\n\n    if (this.firstRender) {\n      message += chalk.dim('(Use arrow keys)');\n    } // Render choices or answer depending on the state\n\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      const choicesStr = listRender(this.opt.choices, this.selected);\n      const indexPosition = this.opt.choices.indexOf(this.opt.choices.getChoice(this.selected));\n      const realIndexPosition = this.opt.choices.reduce((acc, value, i) => {\n        // Dont count lines past the choice we are looking at\n        if (i > indexPosition) {\n          return acc;\n        } // Add line if it's a separator\n\n\n        if (value.type === 'separator') {\n          return acc + 1;\n        }\n\n        let l = value.name; // Non-strings take up one line\n\n        if (typeof l !== 'string') {\n          return acc + 1;\n        } // Calculate lines taken up by string\n\n\n        l = l.split('\\n');\n        return acc + l.length;\n      }, 0) - 1;\n      message += '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n    }\n\n    this.firstRender = false;\n    this.screen.render(message);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  onSubmit(value) {\n    this.status = 'answered'; // Rerender prompt\n\n    this.render();\n    this.screen.done();\n    cliCursor.show();\n    this.done(value);\n  }\n\n  getCurrentValue() {\n    return this.opt.choices.getChoice(this.selected).value;\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onUpKey() {\n    this.selected = incrementListIndex(this.selected, 'up', this.opt);\n    this.render();\n  }\n\n  onDownKey() {\n    this.selected = incrementListIndex(this.selected, 'down', this.opt);\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.selected = input - 1;\n    }\n\n    this.render();\n  }\n\n}\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\n\nfunction listRender(choices, pointer) {\n  let output = '';\n  let separatorOffset = 0;\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += '  - ' + choice.name;\n      output += ` (${typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'})`;\n      output += '\\n';\n      return;\n    }\n\n    const isSelected = i - separatorOffset === pointer;\n    let line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n\n    output += line + ' \\n';\n  });\n  return output.replace(/\\n$/, '');\n}\n\nmodule.exports = ListPrompt;","map":{"version":3,"names":["chalk","require","figures","cliCursor","runAsync","flatMap","map","take","takeUntil","Base","observe","Paginator","incrementListIndex","ListPrompt","constructor","questions","rl","answers","opt","choices","throwParamError","firstRender","selected","def","default","realLength","index","realChoices","findIndex","value","Math","max","shouldLoop","loop","undefined","paginator","screen","isInfinite","_run","cb","done","self","events","normalizedUpKey","pipe","line","forEach","onUpKey","bind","normalizedDownKey","onDownKey","numberKey","onNumberKey","getCurrentValue","filter","catch","err","onSubmit","hide","render","message","getQuestion","dim","status","cyan","getChoice","short","choicesStr","listRender","indexPosition","indexOf","realIndexPosition","reduce","acc","i","type","l","name","split","length","paginate","pageSize","show","input","pointer","output","separatorOffset","choice","disabled","isSelected","replace","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/inquirer/lib/prompts/list.js"],"sourcesContent":["'use strict';\n/**\n * `list` type prompt\n */\n\nconst chalk = require('chalk');\nconst figures = require('figures');\nconst cliCursor = require('cli-cursor');\nconst runAsync = require('run-async');\nconst { flatMap, map, take, takeUntil } = require('rxjs/operators');\nconst Base = require('./base');\nconst observe = require('../utils/events');\nconst Paginator = require('../utils/paginator');\nconst incrementListIndex = require('../utils/incrementListIndex');\n\nclass ListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.firstRender = true;\n    this.selected = 0;\n\n    const def = this.opt.default;\n\n    // If def is a Number, then use as index. Otherwise, check for value.\n    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n    } else if (typeof def !== 'number' && def != null) {\n      const index = this.opt.choices.realChoices.findIndex(({ value }) => value === def);\n      this.selected = Math.max(index, 0);\n    }\n\n    // Make sure no default is set (so it won't be printed)\n    this.opt.default = null;\n\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    const self = this;\n\n    const events = observe(this.rl);\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey\n      .pipe(takeUntil(events.line))\n      .forEach(this.onDownKey.bind(this));\n    events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));\n    events.line\n      .pipe(\n        take(1),\n        map(this.getCurrentValue.bind(this)),\n        flatMap((value) =>\n          runAsync(self.opt.filter)(value, self.answers).catch((err) => err)\n        )\n      )\n      .forEach(this.onSubmit.bind(this));\n\n    // Init the prompt\n    cliCursor.hide();\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ListPrompt} self\n   */\n\n  render() {\n    // Render question\n    let message = this.getQuestion();\n\n    if (this.firstRender) {\n      message += chalk.dim('(Use arrow keys)');\n    }\n\n    // Render choices or answer depending on the state\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      const choicesStr = listRender(this.opt.choices, this.selected);\n      const indexPosition = this.opt.choices.indexOf(\n        this.opt.choices.getChoice(this.selected)\n      );\n      const realIndexPosition =\n        this.opt.choices.reduce((acc, value, i) => {\n          // Dont count lines past the choice we are looking at\n          if (i > indexPosition) {\n            return acc;\n          }\n          // Add line if it's a separator\n          if (value.type === 'separator') {\n            return acc + 1;\n          }\n\n          let l = value.name;\n          // Non-strings take up one line\n          if (typeof l !== 'string') {\n            return acc + 1;\n          }\n\n          // Calculate lines taken up by string\n          l = l.split('\\n');\n          return acc + l.length;\n        }, 0) - 1;\n      message +=\n        '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n    }\n\n    this.firstRender = false;\n\n    this.screen.render(message);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onSubmit(value) {\n    this.status = 'answered';\n\n    // Rerender prompt\n    this.render();\n\n    this.screen.done();\n    cliCursor.show();\n    this.done(value);\n  }\n\n  getCurrentValue() {\n    return this.opt.choices.getChoice(this.selected).value;\n  }\n\n  /**\n   * When user press a key\n   */\n  onUpKey() {\n    this.selected = incrementListIndex(this.selected, 'up', this.opt);\n    this.render();\n  }\n\n  onDownKey() {\n    this.selected = incrementListIndex(this.selected, 'down', this.opt);\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.selected = input - 1;\n    }\n\n    this.render();\n  }\n}\n\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\nfunction listRender(choices, pointer) {\n  let output = '';\n  let separatorOffset = 0;\n\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += '  - ' + choice.name;\n      output += ` (${\n        typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'\n      })`;\n      output += '\\n';\n      return;\n    }\n\n    const isSelected = i - separatorOffset === pointer;\n    let line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n\n    output += line + ' \\n';\n  });\n\n  return output.replace(/\\n$/, '');\n}\n\nmodule.exports = ListPrompt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}