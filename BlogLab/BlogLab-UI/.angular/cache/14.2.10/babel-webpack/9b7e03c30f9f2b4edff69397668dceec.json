{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchematicEngineHost = void 0;\n\nconst schematics_1 = require(\"@angular-devkit/schematics\");\n\nconst tools_1 = require(\"@angular-devkit/schematics/tools\");\n\nconst fs_1 = require(\"fs\");\n\nconst jsonc_parser_1 = require(\"jsonc-parser\");\n\nconst module_1 = __importDefault(require(\"module\"));\n\nconst path_1 = require(\"path\");\n\nconst vm_1 = require(\"vm\");\n\nconst error_1 = require(\"../../utilities/error\");\n/**\n * Environment variable to control schematic package redirection\n */\n\n\nconst schematicRedirectVariable = (_a = process.env['NG_SCHEMATIC_REDIRECT']) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n\nfunction shouldWrapSchematic(schematicFile, schematicEncapsulation) {\n  // Check environment variable if present\n  switch (schematicRedirectVariable) {\n    case '0':\n    case 'false':\n    case 'off':\n    case 'none':\n      return false;\n\n    case 'all':\n      return true;\n  }\n\n  const normalizedSchematicFile = schematicFile.replace(/\\\\/g, '/'); // Never wrap the internal update schematic when executed directly\n  // It communicates with the update command via `global`\n  // But we still want to redirect schematics located in `@angular/cli/node_modules`.\n\n  if (normalizedSchematicFile.includes('node_modules/@angular/cli/') && !normalizedSchematicFile.includes('node_modules/@angular/cli/node_modules/')) {\n    return false;\n  } // Check for first-party Angular schematic packages\n  // Angular schematics are safe to use in the wrapped VM context\n\n\n  if (/\\/node_modules\\/@(?:angular|schematics|nguniversal)\\//.test(normalizedSchematicFile)) {\n    return true;\n  } // Otherwise use the value of the schematic collection's encapsulation option (current default of false)\n\n\n  return schematicEncapsulation;\n}\n\nclass SchematicEngineHost extends tools_1.NodeModulesEngineHost {\n  _resolveReferenceString(refString, parentPath, collectionDescription) {\n    const [path, name] = refString.split('#', 2); // Mimic behavior of ExportStringRef class used in default behavior\n\n    const fullPath = path[0] === '.' ? (0, path_1.resolve)(parentPath !== null && parentPath !== void 0 ? parentPath : process.cwd(), path) : path;\n\n    const schematicFile = require.resolve(fullPath, {\n      paths: [parentPath]\n    });\n\n    if (shouldWrapSchematic(schematicFile, !!(collectionDescription === null || collectionDescription === void 0 ? void 0 : collectionDescription.encapsulation))) {\n      const schematicPath = (0, path_1.dirname)(schematicFile);\n      const moduleCache = new Map();\n      const factoryInitializer = wrap(schematicFile, schematicPath, moduleCache, name || 'default');\n      const factory = factoryInitializer();\n\n      if (!factory || typeof factory !== 'function') {\n        return null;\n      }\n\n      return {\n        ref: factory,\n        path: schematicPath\n      };\n    } // All other schematics use default behavior\n\n\n    return super._resolveReferenceString(refString, parentPath, collectionDescription);\n  }\n\n}\n\nexports.SchematicEngineHost = SchematicEngineHost;\n/**\n * Minimal shim modules for legacy deep imports of `@schematics/angular`\n */\n\nconst legacyModules = {\n  '@schematics/angular/utility/config': {\n    getWorkspace(host) {\n      const path = '/.angular.json';\n      const data = host.read(path);\n\n      if (!data) {\n        throw new schematics_1.SchematicsException(`Could not find (${path})`);\n      }\n\n      return (0, jsonc_parser_1.parse)(data.toString(), [], {\n        allowTrailingComma: true\n      });\n    }\n\n  },\n  '@schematics/angular/utility/project': {\n    buildDefaultPath(project) {\n      const root = project.sourceRoot ? `/${project.sourceRoot}/` : `/${project.root}/src/`;\n      return `${root}${project.projectType === 'application' ? 'app' : 'lib'}`;\n    }\n\n  }\n};\n/**\n * Wrap a JavaScript file in a VM context to allow specific Angular dependencies to be redirected.\n * This VM setup is ONLY intended to redirect dependencies.\n *\n * @param schematicFile A JavaScript schematic file path that should be wrapped.\n * @param schematicDirectory A directory that will be used as the location of the JavaScript file.\n * @param moduleCache A map to use for caching repeat module usage and proper `instanceof` support.\n * @param exportName An optional name of a specific export to return. Otherwise, return all exports.\n */\n\nfunction wrap(schematicFile, schematicDirectory, moduleCache, exportName) {\n  const hostRequire = module_1.default.createRequire(__filename);\n  const schematicRequire = module_1.default.createRequire(schematicFile);\n\n  const customRequire = function (id) {\n    if (legacyModules[id]) {\n      // Provide compatibility modules for older versions of @angular/cdk\n      return legacyModules[id];\n    } else if (id.startsWith('schematics:')) {\n      // Schematics built-in modules use the `schematics` scheme (similar to the Node.js `node` scheme)\n      const builtinId = id.slice(11);\n      const builtinModule = loadBuiltinModule(builtinId);\n\n      if (!builtinModule) {\n        throw new Error(`Unknown schematics built-in module '${id}' requested from schematic '${schematicFile}'`);\n      }\n\n      return builtinModule;\n    } else if (id.startsWith('@angular-devkit/') || id.startsWith('@schematics/')) {\n      // Files should not redirect `@angular/core` and instead use the direct\n      // dependency if available. This allows old major version migrations to continue to function\n      // even though the latest major version may have breaking changes in `@angular/core`.\n      if (id.startsWith('@angular-devkit/core')) {\n        try {\n          return schematicRequire(id);\n        } catch (e) {\n          (0, error_1.assertIsError)(e);\n\n          if (e.code !== 'MODULE_NOT_FOUND') {\n            throw e;\n          }\n        }\n      } // Resolve from inside the `@angular/cli` project\n\n\n      return hostRequire(id);\n    } else if (id.startsWith('.') || id.startsWith('@angular/cdk')) {\n      // Wrap relative files inside the schematic collection\n      // Also wrap `@angular/cdk`, it contains helper utilities that import core schematic packages\n      // Resolve from the original file\n      const modulePath = schematicRequire.resolve(id); // Use cached module if available\n\n      const cachedModule = moduleCache.get(modulePath);\n\n      if (cachedModule) {\n        return cachedModule;\n      } // Do not wrap vendored third-party packages or JSON files\n\n\n      if (!/[/\\\\]node_modules[/\\\\]@schematics[/\\\\]angular[/\\\\]third_party[/\\\\]/.test(modulePath) && !modulePath.endsWith('.json')) {\n        // Wrap module and save in cache\n        const wrappedModule = wrap(modulePath, (0, path_1.dirname)(modulePath), moduleCache)();\n        moduleCache.set(modulePath, wrappedModule);\n        return wrappedModule;\n      }\n    } // All others are required directly from the original file\n\n\n    return schematicRequire(id);\n  }; // Setup a wrapper function to capture the module's exports\n\n\n  const schematicCode = (0, fs_1.readFileSync)(schematicFile, 'utf8'); // `module` is required due to @angular/localize ng-add being in UMD format\n\n  const headerCode = '(function() {\\nvar exports = {};\\nvar module = { exports };\\n';\n  const footerCode = exportName ? `\\nreturn module.exports['${exportName}'];});` : '\\nreturn module.exports;});';\n  const script = new vm_1.Script(headerCode + schematicCode + footerCode, {\n    filename: schematicFile,\n    lineOffset: 3\n  });\n  const context = {\n    __dirname: schematicDirectory,\n    __filename: schematicFile,\n    Buffer,\n    console,\n    process,\n\n    get global() {\n      return this;\n    },\n\n    require: customRequire\n  };\n  const exportsFactory = script.runInNewContext(context);\n  return exportsFactory;\n}\n\nfunction loadBuiltinModule(id) {\n  return undefined;\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","_a","Object","defineProperty","exports","value","SchematicEngineHost","schematics_1","require","tools_1","fs_1","jsonc_parser_1","module_1","path_1","vm_1","error_1","schematicRedirectVariable","process","env","toLowerCase","shouldWrapSchematic","schematicFile","schematicEncapsulation","normalizedSchematicFile","replace","includes","test","NodeModulesEngineHost","_resolveReferenceString","refString","parentPath","collectionDescription","path","name","split","fullPath","resolve","cwd","paths","encapsulation","schematicPath","dirname","moduleCache","Map","factoryInitializer","wrap","factory","ref","legacyModules","getWorkspace","host","data","read","SchematicsException","parse","toString","allowTrailingComma","buildDefaultPath","project","root","sourceRoot","projectType","schematicDirectory","exportName","hostRequire","default","createRequire","__filename","schematicRequire","customRequire","id","startsWith","builtinId","slice","builtinModule","loadBuiltinModule","Error","e","assertIsError","code","modulePath","cachedModule","get","endsWith","wrappedModule","set","schematicCode","readFileSync","headerCode","footerCode","script","Script","filename","lineOffset","context","__dirname","Buffer","console","global","exportsFactory","runInNewContext","undefined"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/command-builder/utilities/schematic-engine-host.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchematicEngineHost = void 0;\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst tools_1 = require(\"@angular-devkit/schematics/tools\");\nconst fs_1 = require(\"fs\");\nconst jsonc_parser_1 = require(\"jsonc-parser\");\nconst module_1 = __importDefault(require(\"module\"));\nconst path_1 = require(\"path\");\nconst vm_1 = require(\"vm\");\nconst error_1 = require(\"../../utilities/error\");\n/**\n * Environment variable to control schematic package redirection\n */\nconst schematicRedirectVariable = (_a = process.env['NG_SCHEMATIC_REDIRECT']) === null || _a === void 0 ? void 0 : _a.toLowerCase();\nfunction shouldWrapSchematic(schematicFile, schematicEncapsulation) {\n    // Check environment variable if present\n    switch (schematicRedirectVariable) {\n        case '0':\n        case 'false':\n        case 'off':\n        case 'none':\n            return false;\n        case 'all':\n            return true;\n    }\n    const normalizedSchematicFile = schematicFile.replace(/\\\\/g, '/');\n    // Never wrap the internal update schematic when executed directly\n    // It communicates with the update command via `global`\n    // But we still want to redirect schematics located in `@angular/cli/node_modules`.\n    if (normalizedSchematicFile.includes('node_modules/@angular/cli/') &&\n        !normalizedSchematicFile.includes('node_modules/@angular/cli/node_modules/')) {\n        return false;\n    }\n    // Check for first-party Angular schematic packages\n    // Angular schematics are safe to use in the wrapped VM context\n    if (/\\/node_modules\\/@(?:angular|schematics|nguniversal)\\//.test(normalizedSchematicFile)) {\n        return true;\n    }\n    // Otherwise use the value of the schematic collection's encapsulation option (current default of false)\n    return schematicEncapsulation;\n}\nclass SchematicEngineHost extends tools_1.NodeModulesEngineHost {\n    _resolveReferenceString(refString, parentPath, collectionDescription) {\n        const [path, name] = refString.split('#', 2);\n        // Mimic behavior of ExportStringRef class used in default behavior\n        const fullPath = path[0] === '.' ? (0, path_1.resolve)(parentPath !== null && parentPath !== void 0 ? parentPath : process.cwd(), path) : path;\n        const schematicFile = require.resolve(fullPath, { paths: [parentPath] });\n        if (shouldWrapSchematic(schematicFile, !!(collectionDescription === null || collectionDescription === void 0 ? void 0 : collectionDescription.encapsulation))) {\n            const schematicPath = (0, path_1.dirname)(schematicFile);\n            const moduleCache = new Map();\n            const factoryInitializer = wrap(schematicFile, schematicPath, moduleCache, name || 'default');\n            const factory = factoryInitializer();\n            if (!factory || typeof factory !== 'function') {\n                return null;\n            }\n            return { ref: factory, path: schematicPath };\n        }\n        // All other schematics use default behavior\n        return super._resolveReferenceString(refString, parentPath, collectionDescription);\n    }\n}\nexports.SchematicEngineHost = SchematicEngineHost;\n/**\n * Minimal shim modules for legacy deep imports of `@schematics/angular`\n */\nconst legacyModules = {\n    '@schematics/angular/utility/config': {\n        getWorkspace(host) {\n            const path = '/.angular.json';\n            const data = host.read(path);\n            if (!data) {\n                throw new schematics_1.SchematicsException(`Could not find (${path})`);\n            }\n            return (0, jsonc_parser_1.parse)(data.toString(), [], { allowTrailingComma: true });\n        },\n    },\n    '@schematics/angular/utility/project': {\n        buildDefaultPath(project) {\n            const root = project.sourceRoot ? `/${project.sourceRoot}/` : `/${project.root}/src/`;\n            return `${root}${project.projectType === 'application' ? 'app' : 'lib'}`;\n        },\n    },\n};\n/**\n * Wrap a JavaScript file in a VM context to allow specific Angular dependencies to be redirected.\n * This VM setup is ONLY intended to redirect dependencies.\n *\n * @param schematicFile A JavaScript schematic file path that should be wrapped.\n * @param schematicDirectory A directory that will be used as the location of the JavaScript file.\n * @param moduleCache A map to use for caching repeat module usage and proper `instanceof` support.\n * @param exportName An optional name of a specific export to return. Otherwise, return all exports.\n */\nfunction wrap(schematicFile, schematicDirectory, moduleCache, exportName) {\n    const hostRequire = module_1.default.createRequire(__filename);\n    const schematicRequire = module_1.default.createRequire(schematicFile);\n    const customRequire = function (id) {\n        if (legacyModules[id]) {\n            // Provide compatibility modules for older versions of @angular/cdk\n            return legacyModules[id];\n        }\n        else if (id.startsWith('schematics:')) {\n            // Schematics built-in modules use the `schematics` scheme (similar to the Node.js `node` scheme)\n            const builtinId = id.slice(11);\n            const builtinModule = loadBuiltinModule(builtinId);\n            if (!builtinModule) {\n                throw new Error(`Unknown schematics built-in module '${id}' requested from schematic '${schematicFile}'`);\n            }\n            return builtinModule;\n        }\n        else if (id.startsWith('@angular-devkit/') || id.startsWith('@schematics/')) {\n            // Files should not redirect `@angular/core` and instead use the direct\n            // dependency if available. This allows old major version migrations to continue to function\n            // even though the latest major version may have breaking changes in `@angular/core`.\n            if (id.startsWith('@angular-devkit/core')) {\n                try {\n                    return schematicRequire(id);\n                }\n                catch (e) {\n                    (0, error_1.assertIsError)(e);\n                    if (e.code !== 'MODULE_NOT_FOUND') {\n                        throw e;\n                    }\n                }\n            }\n            // Resolve from inside the `@angular/cli` project\n            return hostRequire(id);\n        }\n        else if (id.startsWith('.') || id.startsWith('@angular/cdk')) {\n            // Wrap relative files inside the schematic collection\n            // Also wrap `@angular/cdk`, it contains helper utilities that import core schematic packages\n            // Resolve from the original file\n            const modulePath = schematicRequire.resolve(id);\n            // Use cached module if available\n            const cachedModule = moduleCache.get(modulePath);\n            if (cachedModule) {\n                return cachedModule;\n            }\n            // Do not wrap vendored third-party packages or JSON files\n            if (!/[/\\\\]node_modules[/\\\\]@schematics[/\\\\]angular[/\\\\]third_party[/\\\\]/.test(modulePath) &&\n                !modulePath.endsWith('.json')) {\n                // Wrap module and save in cache\n                const wrappedModule = wrap(modulePath, (0, path_1.dirname)(modulePath), moduleCache)();\n                moduleCache.set(modulePath, wrappedModule);\n                return wrappedModule;\n            }\n        }\n        // All others are required directly from the original file\n        return schematicRequire(id);\n    };\n    // Setup a wrapper function to capture the module's exports\n    const schematicCode = (0, fs_1.readFileSync)(schematicFile, 'utf8');\n    // `module` is required due to @angular/localize ng-add being in UMD format\n    const headerCode = '(function() {\\nvar exports = {};\\nvar module = { exports };\\n';\n    const footerCode = exportName\n        ? `\\nreturn module.exports['${exportName}'];});`\n        : '\\nreturn module.exports;});';\n    const script = new vm_1.Script(headerCode + schematicCode + footerCode, {\n        filename: schematicFile,\n        lineOffset: 3,\n    });\n    const context = {\n        __dirname: schematicDirectory,\n        __filename: schematicFile,\n        Buffer,\n        console,\n        process,\n        get global() {\n            return this;\n        },\n        require: customRequire,\n    };\n    const exportsFactory = script.runInNewContext(context);\n    return exportsFactory;\n}\nfunction loadBuiltinModule(id) {\n    return undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}