{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoggingAnalytics = void 0;\n/**\n * Analytics implementation that logs analytics events to a logger. This should be used for\n * debugging mainly.\n */\n\nclass LoggingAnalytics {\n  constructor(_logger) {\n    this._logger = _logger;\n  }\n\n  event(category, action, options) {\n    this._logger.info('event ' + JSON.stringify({\n      category,\n      action,\n      ...options\n    }));\n  }\n\n  screenview(screenName, appName, options) {\n    this._logger.info('screenview ' + JSON.stringify({\n      screenName,\n      appName,\n      ...options\n    }));\n  }\n\n  pageview(path, options) {\n    this._logger.info('pageview ' + JSON.stringify({\n      path,\n      ...options\n    }));\n  }\n\n  timing(category, variable, time, options) {\n    this._logger.info('timing ' + JSON.stringify({\n      category,\n      variable,\n      time,\n      ...options\n    }));\n  }\n\n  flush() {\n    return Promise.resolve();\n  }\n\n}\n\nexports.LoggingAnalytics = LoggingAnalytics;","map":{"version":3,"names":["Object","defineProperty","exports","value","LoggingAnalytics","constructor","_logger","event","category","action","options","info","JSON","stringify","screenview","screenName","appName","pageview","path","timing","variable","time","flush","Promise","resolve"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/src/analytics/logging.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggingAnalytics = void 0;\n/**\n * Analytics implementation that logs analytics events to a logger. This should be used for\n * debugging mainly.\n */\nclass LoggingAnalytics {\n    constructor(_logger) {\n        this._logger = _logger;\n    }\n    event(category, action, options) {\n        this._logger.info('event ' + JSON.stringify({ category, action, ...options }));\n    }\n    screenview(screenName, appName, options) {\n        this._logger.info('screenview ' + JSON.stringify({ screenName, appName, ...options }));\n    }\n    pageview(path, options) {\n        this._logger.info('pageview ' + JSON.stringify({ path, ...options }));\n    }\n    timing(category, variable, time, options) {\n        this._logger.info('timing ' + JSON.stringify({ category, variable, time, ...options }));\n    }\n    flush() {\n        return Promise.resolve();\n    }\n}\nexports.LoggingAnalytics = LoggingAnalytics;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;AACA;AACA;AACA;AACA;;AACA,MAAMA,gBAAN,CAAuB;EACnBC,WAAW,CAACC,OAAD,EAAU;IACjB,KAAKA,OAAL,GAAeA,OAAf;EACH;;EACDC,KAAK,CAACC,QAAD,EAAWC,MAAX,EAAmBC,OAAnB,EAA4B;IAC7B,KAAKJ,OAAL,CAAaK,IAAb,CAAkB,WAAWC,IAAI,CAACC,SAAL,CAAe;MAAEL,QAAF;MAAYC,MAAZ;MAAoB,GAAGC;IAAvB,CAAf,CAA7B;EACH;;EACDI,UAAU,CAACC,UAAD,EAAaC,OAAb,EAAsBN,OAAtB,EAA+B;IACrC,KAAKJ,OAAL,CAAaK,IAAb,CAAkB,gBAAgBC,IAAI,CAACC,SAAL,CAAe;MAAEE,UAAF;MAAcC,OAAd;MAAuB,GAAGN;IAA1B,CAAf,CAAlC;EACH;;EACDO,QAAQ,CAACC,IAAD,EAAOR,OAAP,EAAgB;IACpB,KAAKJ,OAAL,CAAaK,IAAb,CAAkB,cAAcC,IAAI,CAACC,SAAL,CAAe;MAAEK,IAAF;MAAQ,GAAGR;IAAX,CAAf,CAAhC;EACH;;EACDS,MAAM,CAACX,QAAD,EAAWY,QAAX,EAAqBC,IAArB,EAA2BX,OAA3B,EAAoC;IACtC,KAAKJ,OAAL,CAAaK,IAAb,CAAkB,YAAYC,IAAI,CAACC,SAAL,CAAe;MAAEL,QAAF;MAAYY,QAAZ;MAAsBC,IAAtB;MAA4B,GAAGX;IAA/B,CAAf,CAA9B;EACH;;EACDY,KAAK,GAAG;IACJ,OAAOC,OAAO,CAACC,OAAR,EAAP;EACH;;AAlBkB;;AAoBvBtB,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B"},"metadata":{},"sourceType":"script"}