{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuilder = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst api_1 = require(\"./api\");\n\nconst internal_1 = require(\"./internal\");\n\nconst schedule_by_name_1 = require(\"./schedule-by-name\"); // eslint-disable-next-line max-lines-per-function\n\n\nfunction createBuilder(fn) {\n  const cjh = core_1.experimental.jobs.createJobHandler; // eslint-disable-next-line max-lines-per-function\n\n  const handler = cjh((options, context) => {\n    const scheduler = context.scheduler;\n    const progressChannel = context.createChannel('progress');\n    const logChannel = context.createChannel('log');\n    const analyticsChannel = context.createChannel('analytics');\n    let currentState = api_1.BuilderProgressState.Stopped;\n    const teardownLogics = [];\n    let tearingDown = false;\n    let current = 0;\n    let status = '';\n    let total = 1;\n\n    function log(entry) {\n      logChannel.next(entry);\n    }\n\n    function progress(progress, context) {\n      currentState = progress.state;\n\n      if (progress.state === api_1.BuilderProgressState.Running) {\n        current = progress.current;\n        total = progress.total !== undefined ? progress.total : total;\n\n        if (progress.status === undefined) {\n          progress.status = status;\n        } else {\n          status = progress.status;\n        }\n      }\n\n      progressChannel.next({ ...progress,\n        ...(context.target && {\n          target: context.target\n        }),\n        ...(context.builder && {\n          builder: context.builder\n        }),\n        id: context.id\n      });\n    }\n\n    return new rxjs_1.Observable(observer => {\n      const subscriptions = [];\n      const inputSubscription = context.inboundBus.subscribe(i => {\n        switch (i.kind) {\n          case core_1.experimental.jobs.JobInboundMessageKind.Stop:\n            // Run teardown logic then complete.\n            tearingDown = true;\n            Promise.all(teardownLogics.map(fn => fn() || Promise.resolve())).then(() => observer.complete(), err => observer.error(err));\n            break;\n\n          case core_1.experimental.jobs.JobInboundMessageKind.Input:\n            if (!tearingDown) {\n              onInput(i.value);\n            }\n\n            break;\n        }\n      });\n\n      function onInput(i) {\n        const builder = i.info;\n        const loggerName = i.target ? (0, api_1.targetStringFromTarget)(i.target) : builder.builderName;\n        const logger = new core_1.logging.Logger(loggerName);\n        subscriptions.push(logger.subscribe(entry => log(entry)));\n        const context = {\n          builder,\n          workspaceRoot: i.workspaceRoot,\n          currentDirectory: i.currentDirectory,\n          target: i.target,\n          logger: logger,\n          id: i.id,\n\n          scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n            return _asyncToGenerator(function* () {\n              const run = yield (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n                scheduler,\n                logger: scheduleOptions.logger || logger.createChild(''),\n                workspaceRoot: i.workspaceRoot,\n                currentDirectory: i.currentDirectory\n              }); // We don't want to subscribe errors and complete.\n\n              subscriptions.push(run.progress.subscribe(event => progressChannel.next(event)));\n              return run;\n            })();\n          },\n\n          scheduleBuilder(builderName, options = {}, scheduleOptions = {}) {\n            return _asyncToGenerator(function* () {\n              const run = yield (0, schedule_by_name_1.scheduleByName)(builderName, options, {\n                scheduler,\n                target: scheduleOptions.target,\n                logger: scheduleOptions.logger || logger.createChild(''),\n                workspaceRoot: i.workspaceRoot,\n                currentDirectory: i.currentDirectory\n              }); // We don't want to subscribe errors and complete.\n\n              subscriptions.push(run.progress.subscribe(event => progressChannel.next(event)));\n              return run;\n            })();\n          },\n\n          getTargetOptions(target) {\n            return _asyncToGenerator(function* () {\n              return scheduler.schedule('..getTargetOptions', target).output.toPromise();\n            })();\n          },\n\n          getProjectMetadata(target) {\n            return _asyncToGenerator(function* () {\n              return scheduler.schedule('..getProjectMetadata', target).output.toPromise();\n            })();\n          },\n\n          getBuilderNameForTarget(target) {\n            return _asyncToGenerator(function* () {\n              return scheduler.schedule('..getBuilderNameForTarget', target).output.toPromise();\n            })();\n          },\n\n          validateOptions(options, builderName) {\n            return _asyncToGenerator(function* () {\n              return scheduler.schedule('..validateOptions', [builderName, options]).output.toPromise();\n            })();\n          },\n\n          reportRunning() {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Waiting:\n              case api_1.BuilderProgressState.Stopped:\n                progress({\n                  state: api_1.BuilderProgressState.Running,\n                  current: 0,\n                  total\n                }, context);\n                break;\n            }\n          },\n\n          reportStatus(status) {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Running:\n                progress({\n                  state: currentState,\n                  status,\n                  current,\n                  total\n                }, context);\n                break;\n\n              case api_1.BuilderProgressState.Waiting:\n                progress({\n                  state: currentState,\n                  status\n                }, context);\n                break;\n            }\n          },\n\n          reportProgress(current, total, status) {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Running:\n                progress({\n                  state: currentState,\n                  current,\n                  total,\n                  status\n                }, context);\n            }\n          },\n\n          analytics: new core_1.analytics.ForwardingAnalytics(report => analyticsChannel.next(report)),\n\n          addTeardown(teardown) {\n            teardownLogics.push(teardown);\n          }\n\n        };\n        context.reportRunning();\n        let result;\n\n        try {\n          result = fn(i.options, context);\n\n          if ((0, api_1.isBuilderOutput)(result)) {\n            result = (0, rxjs_1.of)(result);\n          } else if (!(0, rxjs_1.isObservable)(result) && isAsyncIterable(result)) {\n            result = (0, api_1.fromAsyncIterable)(result);\n          } else {\n            result = (0, rxjs_1.from)(result);\n          }\n        } catch (e) {\n          result = (0, rxjs_1.throwError)(e);\n        } // Manage some state automatically.\n\n\n        progress({\n          state: api_1.BuilderProgressState.Running,\n          current: 0,\n          total: 1\n        }, context);\n        subscriptions.push(result.pipe((0, operators_1.defaultIfEmpty)({\n          success: false\n        }), (0, operators_1.tap)(() => {\n          progress({\n            state: api_1.BuilderProgressState.Running,\n            current: total\n          }, context);\n          progress({\n            state: api_1.BuilderProgressState.Stopped\n          }, context);\n        }), (0, operators_1.mergeMap)( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (value) {\n            // Allow the log queue to flush\n            yield new Promise(setImmediate);\n            return value;\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }())).subscribe(message => observer.next(message), error => observer.error(error), () => observer.complete()));\n      }\n\n      return () => {\n        subscriptions.forEach(x => x.unsubscribe());\n        inputSubscription.unsubscribe();\n      };\n    });\n  });\n  return {\n    handler,\n    [internal_1.BuilderSymbol]: true,\n    [internal_1.BuilderVersionSymbol]: require('../package.json').version\n  };\n}\n\nexports.createBuilder = createBuilder;\n\nfunction isAsyncIterable(obj) {\n  return !!obj && typeof obj[Symbol.asyncIterator] === 'function';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createBuilder","core_1","require","rxjs_1","operators_1","api_1","internal_1","schedule_by_name_1","fn","cjh","experimental","jobs","createJobHandler","handler","options","context","scheduler","progressChannel","createChannel","logChannel","analyticsChannel","currentState","BuilderProgressState","Stopped","teardownLogics","tearingDown","current","status","total","log","entry","next","progress","state","Running","undefined","target","builder","id","Observable","observer","subscriptions","inputSubscription","inboundBus","subscribe","i","kind","JobInboundMessageKind","Stop","Promise","all","map","resolve","then","complete","err","error","Input","onInput","info","loggerName","targetStringFromTarget","builderName","logger","logging","Logger","push","workspaceRoot","currentDirectory","scheduleTarget","overrides","scheduleOptions","run","scheduleByTarget","createChild","event","scheduleBuilder","scheduleByName","getTargetOptions","schedule","output","toPromise","getProjectMetadata","getBuilderNameForTarget","validateOptions","reportRunning","Waiting","reportStatus","reportProgress","analytics","ForwardingAnalytics","report","addTeardown","teardown","result","isBuilderOutput","of","isObservable","isAsyncIterable","fromAsyncIterable","from","e","throwError","pipe","defaultIfEmpty","success","tap","mergeMap","setImmediate","message","forEach","x","unsubscribe","BuilderSymbol","BuilderVersionSymbol","version","obj","Symbol","asyncIterator"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/architect/src/create-builder.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBuilder = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst api_1 = require(\"./api\");\nconst internal_1 = require(\"./internal\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\n// eslint-disable-next-line max-lines-per-function\nfunction createBuilder(fn) {\n    const cjh = core_1.experimental.jobs.createJobHandler;\n    // eslint-disable-next-line max-lines-per-function\n    const handler = cjh((options, context) => {\n        const scheduler = context.scheduler;\n        const progressChannel = context.createChannel('progress');\n        const logChannel = context.createChannel('log');\n        const analyticsChannel = context.createChannel('analytics');\n        let currentState = api_1.BuilderProgressState.Stopped;\n        const teardownLogics = [];\n        let tearingDown = false;\n        let current = 0;\n        let status = '';\n        let total = 1;\n        function log(entry) {\n            logChannel.next(entry);\n        }\n        function progress(progress, context) {\n            currentState = progress.state;\n            if (progress.state === api_1.BuilderProgressState.Running) {\n                current = progress.current;\n                total = progress.total !== undefined ? progress.total : total;\n                if (progress.status === undefined) {\n                    progress.status = status;\n                }\n                else {\n                    status = progress.status;\n                }\n            }\n            progressChannel.next({\n                ...progress,\n                ...(context.target && { target: context.target }),\n                ...(context.builder && { builder: context.builder }),\n                id: context.id,\n            });\n        }\n        return new rxjs_1.Observable((observer) => {\n            const subscriptions = [];\n            const inputSubscription = context.inboundBus.subscribe((i) => {\n                switch (i.kind) {\n                    case core_1.experimental.jobs.JobInboundMessageKind.Stop:\n                        // Run teardown logic then complete.\n                        tearingDown = true;\n                        Promise.all(teardownLogics.map((fn) => fn() || Promise.resolve())).then(() => observer.complete(), (err) => observer.error(err));\n                        break;\n                    case core_1.experimental.jobs.JobInboundMessageKind.Input:\n                        if (!tearingDown) {\n                            onInput(i.value);\n                        }\n                        break;\n                }\n            });\n            function onInput(i) {\n                const builder = i.info;\n                const loggerName = i.target\n                    ? (0, api_1.targetStringFromTarget)(i.target)\n                    : builder.builderName;\n                const logger = new core_1.logging.Logger(loggerName);\n                subscriptions.push(logger.subscribe((entry) => log(entry)));\n                const context = {\n                    builder,\n                    workspaceRoot: i.workspaceRoot,\n                    currentDirectory: i.currentDirectory,\n                    target: i.target,\n                    logger: logger,\n                    id: i.id,\n                    async scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n                        const run = await (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n                            scheduler,\n                            logger: scheduleOptions.logger || logger.createChild(''),\n                            workspaceRoot: i.workspaceRoot,\n                            currentDirectory: i.currentDirectory,\n                        });\n                        // We don't want to subscribe errors and complete.\n                        subscriptions.push(run.progress.subscribe((event) => progressChannel.next(event)));\n                        return run;\n                    },\n                    async scheduleBuilder(builderName, options = {}, scheduleOptions = {}) {\n                        const run = await (0, schedule_by_name_1.scheduleByName)(builderName, options, {\n                            scheduler,\n                            target: scheduleOptions.target,\n                            logger: scheduleOptions.logger || logger.createChild(''),\n                            workspaceRoot: i.workspaceRoot,\n                            currentDirectory: i.currentDirectory,\n                        });\n                        // We don't want to subscribe errors and complete.\n                        subscriptions.push(run.progress.subscribe((event) => progressChannel.next(event)));\n                        return run;\n                    },\n                    async getTargetOptions(target) {\n                        return scheduler\n                            .schedule('..getTargetOptions', target)\n                            .output.toPromise();\n                    },\n                    async getProjectMetadata(target) {\n                        return scheduler\n                            .schedule('..getProjectMetadata', target)\n                            .output.toPromise();\n                    },\n                    async getBuilderNameForTarget(target) {\n                        return scheduler\n                            .schedule('..getBuilderNameForTarget', target)\n                            .output.toPromise();\n                    },\n                    async validateOptions(options, builderName) {\n                        return scheduler\n                            .schedule('..validateOptions', [\n                            builderName,\n                            options,\n                        ])\n                            .output.toPromise();\n                    },\n                    reportRunning() {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Waiting:\n                            case api_1.BuilderProgressState.Stopped:\n                                progress({ state: api_1.BuilderProgressState.Running, current: 0, total }, context);\n                                break;\n                        }\n                    },\n                    reportStatus(status) {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Running:\n                                progress({ state: currentState, status, current, total }, context);\n                                break;\n                            case api_1.BuilderProgressState.Waiting:\n                                progress({ state: currentState, status }, context);\n                                break;\n                        }\n                    },\n                    reportProgress(current, total, status) {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Running:\n                                progress({ state: currentState, current, total, status }, context);\n                        }\n                    },\n                    analytics: new core_1.analytics.ForwardingAnalytics((report) => analyticsChannel.next(report)),\n                    addTeardown(teardown) {\n                        teardownLogics.push(teardown);\n                    },\n                };\n                context.reportRunning();\n                let result;\n                try {\n                    result = fn(i.options, context);\n                    if ((0, api_1.isBuilderOutput)(result)) {\n                        result = (0, rxjs_1.of)(result);\n                    }\n                    else if (!(0, rxjs_1.isObservable)(result) && isAsyncIterable(result)) {\n                        result = (0, api_1.fromAsyncIterable)(result);\n                    }\n                    else {\n                        result = (0, rxjs_1.from)(result);\n                    }\n                }\n                catch (e) {\n                    result = (0, rxjs_1.throwError)(e);\n                }\n                // Manage some state automatically.\n                progress({ state: api_1.BuilderProgressState.Running, current: 0, total: 1 }, context);\n                subscriptions.push(result\n                    .pipe((0, operators_1.defaultIfEmpty)({ success: false }), (0, operators_1.tap)(() => {\n                    progress({ state: api_1.BuilderProgressState.Running, current: total }, context);\n                    progress({ state: api_1.BuilderProgressState.Stopped }, context);\n                }), (0, operators_1.mergeMap)(async (value) => {\n                    // Allow the log queue to flush\n                    await new Promise(setImmediate);\n                    return value;\n                }))\n                    .subscribe((message) => observer.next(message), (error) => observer.error(error), () => observer.complete()));\n            }\n            return () => {\n                subscriptions.forEach((x) => x.unsubscribe());\n                inputSubscription.unsubscribe();\n            };\n        });\n    });\n    return {\n        handler,\n        [internal_1.BuilderSymbol]: true,\n        [internal_1.BuilderVersionSymbol]: require('../package.json').version,\n    };\n}\nexports.createBuilder = createBuilder;\nfunction isAsyncIterable(obj) {\n    return !!obj && typeof obj[Symbol.asyncIterator] === 'function';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}