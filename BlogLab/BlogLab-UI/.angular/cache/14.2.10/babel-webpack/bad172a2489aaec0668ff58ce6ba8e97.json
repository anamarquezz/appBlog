{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoreSchemaRegistry = exports.SchemaValidationException = void 0;\n\nconst ajv_1 = __importDefault(require(\"ajv\"));\n\nconst ajv_formats_1 = __importDefault(require(\"ajv-formats\"));\n\nconst http = __importStar(require(\"http\"));\n\nconst https = __importStar(require(\"https\"));\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst Url = __importStar(require(\"url\"));\n\nconst exception_1 = require(\"../../exception\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst utils_2 = require(\"../utils\");\n\nconst utility_1 = require(\"./utility\");\n\nconst visitor_1 = require(\"./visitor\");\n\nclass SchemaValidationException extends exception_1.BaseException {\n  constructor(errors, baseMessage = 'Schema validation failed with the following errors:') {\n    if (!errors || errors.length === 0) {\n      super('Schema validation failed.');\n      this.errors = [];\n      return;\n    }\n\n    const messages = SchemaValidationException.createMessages(errors);\n    super(`${baseMessage}\\n  ${messages.join('\\n  ')}`);\n    this.errors = errors;\n  }\n\n  static createMessages(errors) {\n    if (!errors || errors.length === 0) {\n      return [];\n    }\n\n    const messages = errors.map(err => {\n      var _a;\n\n      let message = `Data path ${JSON.stringify(err.instancePath)} ${err.message}`;\n\n      if (err.params) {\n        switch (err.keyword) {\n          case 'additionalProperties':\n            message += `(${err.params.additionalProperty})`;\n            break;\n\n          case 'enum':\n            message += `. Allowed values are: ${(_a = err.params.allowedValues) === null || _a === void 0 ? void 0 : _a.map(v => `\"${v}\"`).join(', ')}`;\n            break;\n        }\n      }\n\n      return message + '.';\n    });\n    return messages;\n  }\n\n}\n\nexports.SchemaValidationException = SchemaValidationException;\n\nclass CoreSchemaRegistry {\n  constructor(formats = []) {\n    this._uriCache = new Map();\n    this._uriHandlers = new Set();\n    this._pre = new utils_1.PartiallyOrderedSet();\n    this._post = new utils_1.PartiallyOrderedSet();\n    this._smartDefaultKeyword = false;\n    this._sourceMap = new Map();\n    this._ajv = new ajv_1.default({\n      strict: false,\n      loadSchema: uri => this._fetch(uri),\n      passContext: true\n    });\n    (0, ajv_formats_1.default)(this._ajv);\n\n    for (const format of formats) {\n      this.addFormat(format);\n    }\n  }\n\n  _fetch(uri) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const maybeSchema = _this._uriCache.get(uri);\n\n      if (maybeSchema) {\n        return maybeSchema;\n      } // Try all handlers, one after the other.\n\n\n      for (const handler of _this._uriHandlers) {\n        let handlerResult = handler(uri);\n\n        if (handlerResult === null || handlerResult === undefined) {\n          continue;\n        }\n\n        if ((0, rxjs_1.isObservable)(handlerResult)) {\n          handlerResult = handlerResult.toPromise();\n        }\n\n        const value = yield handlerResult;\n\n        _this._uriCache.set(uri, value);\n\n        return value;\n      } // If none are found, handle using http client.\n\n\n      return new Promise((resolve, reject) => {\n        const url = new Url.URL(uri);\n        const client = url.protocol === 'https:' ? https : http;\n        client.get(url, res => {\n          if (!res.statusCode || res.statusCode >= 300) {\n            // Consume the rest of the data to free memory.\n            res.resume();\n            reject(new Error(`Request failed. Status Code: ${res.statusCode}`));\n          } else {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', chunk => {\n              data += chunk;\n            });\n            res.on('end', () => {\n              try {\n                const json = JSON.parse(data);\n\n                _this._uriCache.set(uri, json);\n\n                resolve(json);\n              } catch (err) {\n                reject(err);\n              }\n            });\n          }\n        });\n      });\n    })();\n  }\n  /**\n   * Add a transformation step before the validation of any Json.\n   * @param {JsonVisitor} visitor The visitor to transform every value.\n   * @param {JsonVisitor[]} deps A list of other visitors to run before.\n   */\n\n\n  addPreTransform(visitor, deps) {\n    this._pre.add(visitor, deps);\n  }\n  /**\n   * Add a transformation step after the validation of any Json. The JSON will not be validated\n   * after the POST, so if transformations are not compatible with the Schema it will not result\n   * in an error.\n   * @param {JsonVisitor} visitor The visitor to transform every value.\n   * @param {JsonVisitor[]} deps A list of other visitors to run before.\n   */\n\n\n  addPostTransform(visitor, deps) {\n    this._post.add(visitor, deps);\n  }\n\n  _resolver(ref, validate) {\n    if (!validate || !ref) {\n      return {};\n    }\n\n    const schema = validate.schemaEnv.root.schema;\n    const id = typeof schema === 'object' ? schema.$id : null;\n    let fullReference = ref;\n\n    if (typeof id === 'string') {\n      fullReference = Url.resolve(id, ref);\n\n      if (ref.startsWith('#')) {\n        fullReference = id + fullReference;\n      }\n    }\n\n    const resolvedSchema = this._ajv.getSchema(fullReference);\n\n    return {\n      context: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schemaEnv.validate,\n      schema: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schema\n    };\n  }\n  /**\n   * Flatten the Schema, resolving and replacing all the refs. Makes it into a synchronous schema\n   * that is also easier to traverse. Does not cache the result.\n   *\n   * @param schema The schema or URI to flatten.\n   * @returns An Observable of the flattened schema object.\n   * @deprecated since 11.2 without replacement.\n   * Producing a flatten schema document does not in all cases produce a schema with identical behavior to the original.\n   * See: https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.B.2\n   */\n\n\n  flatten(schema) {\n    return (0, rxjs_1.from)(this._flatten(schema));\n  }\n\n  _flatten(schema) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2._ajv.removeSchema(schema);\n\n      _this2._currentCompilationSchemaInfo = undefined;\n      const validate = yield _this2._ajv.compileAsync(schema); // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = _this2;\n\n      function visitor(current, pointer, parentSchema, index) {\n        if (current && parentSchema && index && (0, utils_2.isJsonObject)(current) && Object.prototype.hasOwnProperty.call(current, '$ref') && typeof current['$ref'] == 'string') {\n          const resolved = self._resolver(current['$ref'], validate);\n\n          if (resolved.schema) {\n            parentSchema[index] = resolved.schema;\n          }\n        }\n      }\n\n      const schemaCopy = (0, utils_1.deepCopy)(validate.schema);\n      (0, visitor_1.visitJsonSchema)(schemaCopy, visitor);\n      return schemaCopy;\n    })();\n  }\n  /**\n   * Compile and return a validation function for the Schema.\n   *\n   * @param schema The schema to validate. If a string, will fetch the schema before compiling it\n   * (using schema as a URI).\n   * @returns An Observable of the Validation function.\n   */\n\n\n  compile(schema) {\n    return (0, rxjs_1.from)(this._compile(schema)).pipe((0, operators_1.map)(validate => (value, options) => (0, rxjs_1.from)(validate(value, options))));\n  }\n\n  _compile(schema) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof schema === 'boolean') {\n        return /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (data) {\n            return {\n              success: schema,\n              data\n            };\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n\n      const schemaInfo = {\n        smartDefaultRecord: new Map(),\n        promptDefinitions: []\n      };\n\n      _this3._ajv.removeSchema(schema);\n\n      let validator;\n\n      try {\n        _this3._currentCompilationSchemaInfo = schemaInfo;\n        validator = _this3._ajv.compile(schema);\n      } catch (e) {\n        // This should eventually be refactored so that we we handle race condition where the same schema is validated at the same time.\n        if (!(e instanceof ajv_1.default.MissingRefError)) {\n          throw e;\n        }\n\n        validator = yield _this3._ajv.compileAsync(schema);\n      } finally {\n        _this3._currentCompilationSchemaInfo = undefined;\n      }\n\n      return /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (data, options) {\n          var _a;\n\n          const validationOptions = {\n            withPrompts: true,\n            applyPostTransforms: true,\n            applyPreTransforms: true,\n            ...options\n          };\n          const validationContext = {\n            promptFieldsWithValue: new Set()\n          }; // Apply pre-validation transforms\n\n          if (validationOptions.applyPreTransforms) {\n            for (const visitor of _this3._pre.values()) {\n              data = yield (0, visitor_1.visitJson)(data, visitor, schema, _this3._resolver.bind(_this3), validator).toPromise();\n            }\n          } // Apply smart defaults\n\n\n          yield _this3._applySmartDefaults(data, schemaInfo.smartDefaultRecord); // Apply prompts\n\n          if (validationOptions.withPrompts) {\n            const visitor = (value, pointer) => {\n              if (value !== undefined) {\n                validationContext.promptFieldsWithValue.add(pointer);\n              }\n\n              return value;\n            };\n\n            if (typeof schema === 'object') {\n              yield (0, visitor_1.visitJson)(data, visitor, schema, _this3._resolver.bind(_this3), validator).toPromise();\n            }\n\n            const definitions = schemaInfo.promptDefinitions.filter(def => !validationContext.promptFieldsWithValue.has(def.id));\n\n            if (definitions.length > 0) {\n              yield _this3._applyPrompts(data, definitions);\n            }\n          } // Validate using ajv\n\n\n          try {\n            const success = yield validator.call(validationContext, data);\n\n            if (!success) {\n              return {\n                data,\n                success,\n                errors: (_a = validator.errors) !== null && _a !== void 0 ? _a : []\n              };\n            }\n          } catch (error) {\n            if (error instanceof ajv_1.default.ValidationError) {\n              return {\n                data,\n                success: false,\n                errors: error.errors\n              };\n            }\n\n            throw error;\n          } // Apply post-validation transforms\n\n\n          if (validationOptions.applyPostTransforms) {\n            for (const visitor of _this3._post.values()) {\n              data = yield (0, visitor_1.visitJson)(data, visitor, schema, _this3._resolver.bind(_this3), validator).toPromise();\n            }\n          }\n\n          return {\n            data,\n            success: true\n          };\n        });\n\n        return function (_x2, _x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n    })();\n  }\n\n  addFormat(format) {\n    this._ajv.addFormat(format.name, format.formatter);\n  }\n\n  addSmartDefaultProvider(source, provider) {\n    if (this._sourceMap.has(source)) {\n      throw new Error(source);\n    }\n\n    this._sourceMap.set(source, provider);\n\n    if (!this._smartDefaultKeyword) {\n      this._smartDefaultKeyword = true;\n\n      this._ajv.addKeyword({\n        keyword: '$default',\n        errors: false,\n        valid: true,\n        compile: (schema, _parentSchema, it) => {\n          const compilationSchemInfo = this._currentCompilationSchemaInfo;\n\n          if (compilationSchemInfo === undefined) {\n            return () => true;\n          } // We cheat, heavily.\n\n\n          const pathArray = this.normalizeDataPathArr(it);\n          compilationSchemInfo.smartDefaultRecord.set(JSON.stringify(pathArray), schema);\n          return () => true;\n        },\n        metaSchema: {\n          type: 'object',\n          properties: {\n            '$source': {\n              type: 'string'\n            }\n          },\n          additionalProperties: true,\n          required: ['$source']\n        }\n      });\n    }\n  }\n\n  registerUriHandler(handler) {\n    this._uriHandlers.add(handler);\n  }\n\n  usePromptProvider(provider) {\n    const isSetup = !!this._promptProvider;\n    this._promptProvider = provider;\n\n    if (isSetup) {\n      return;\n    }\n\n    this._ajv.addKeyword({\n      keyword: 'x-prompt',\n      errors: false,\n      valid: true,\n      compile: (schema, parentSchema, it) => {\n        const compilationSchemInfo = this._currentCompilationSchemaInfo;\n\n        if (!compilationSchemInfo) {\n          return () => true;\n        }\n\n        const path = '/' + this.normalizeDataPathArr(it).join('/');\n        let type;\n        let items;\n        let message;\n\n        if (typeof schema == 'string') {\n          message = schema;\n        } else {\n          message = schema.message;\n          type = schema.type;\n          items = schema.items;\n        }\n\n        const propertyTypes = (0, utility_1.getTypesOfSchema)(parentSchema);\n\n        if (!type) {\n          if (propertyTypes.size === 1 && propertyTypes.has('boolean')) {\n            type = 'confirmation';\n          } else if (Array.isArray(parentSchema.enum)) {\n            type = 'list';\n          } else if (propertyTypes.size === 1 && propertyTypes.has('array') && parentSchema.items && Array.isArray(parentSchema.items.enum)) {\n            type = 'list';\n          } else {\n            type = 'input';\n          }\n        }\n\n        let multiselect;\n\n        if (type === 'list') {\n          multiselect = schema.multiselect === undefined ? propertyTypes.size === 1 && propertyTypes.has('array') : schema.multiselect;\n          const enumValues = multiselect ? parentSchema.items && parentSchema.items.enum : parentSchema.enum;\n\n          if (!items && Array.isArray(enumValues)) {\n            items = [];\n\n            for (const value of enumValues) {\n              if (typeof value == 'string') {\n                items.push(value);\n              } else if (typeof value == 'object') {// Invalid\n              } else {\n                items.push({\n                  label: value.toString(),\n                  value\n                });\n              }\n            }\n          }\n        }\n\n        const definition = {\n          id: path,\n          type,\n          message,\n          raw: schema,\n          items,\n          multiselect,\n          propertyTypes,\n          default: typeof parentSchema.default == 'object' && parentSchema.default !== null && !Array.isArray(parentSchema.default) ? undefined : parentSchema.default,\n\n          validator(data) {\n            return _asyncToGenerator(function* () {\n              var _a;\n\n              try {\n                const result = yield it.self.validate(parentSchema, data); // If the schema is sync then false will be returned on validation failure\n\n                if (result) {\n                  return result;\n                } else if ((_a = it.self.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                  // Validation errors will be present on the Ajv instance when sync\n                  return it.self.errors[0].message;\n                }\n              } catch (e) {\n                const validationError = e; // If the schema is async then an error will be thrown on validation failure\n\n                if (Array.isArray(validationError.errors) && validationError.errors.length) {\n                  return validationError.errors[0].message;\n                }\n              }\n\n              return false;\n            })();\n          }\n\n        };\n        compilationSchemInfo.promptDefinitions.push(definition);\n        return function () {\n          // If 'this' is undefined in the call, then it defaults to the global\n          // 'this'.\n          if (this && this.promptFieldsWithValue) {\n            this.promptFieldsWithValue.add(path);\n          }\n\n          return true;\n        };\n      },\n      metaSchema: {\n        oneOf: [{\n          type: 'string'\n        }, {\n          type: 'object',\n          properties: {\n            'type': {\n              type: 'string'\n            },\n            'message': {\n              type: 'string'\n            }\n          },\n          additionalProperties: true,\n          required: ['message']\n        }]\n      }\n    });\n  }\n\n  _applyPrompts(data, prompts) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const provider = _this4._promptProvider;\n\n      if (!provider) {\n        return;\n      }\n\n      const answers = yield (0, rxjs_1.from)(provider(prompts)).toPromise();\n\n      for (const path in answers) {\n        const pathFragments = path.split('/').slice(1);\n\n        CoreSchemaRegistry._set(data, pathFragments, answers[path], null, undefined, true);\n      }\n    })();\n  }\n\n  static _set( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data, fragments, value, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  parent = null, parentProperty, force) {\n    for (let index = 0; index < fragments.length; index++) {\n      const fragment = fragments[index];\n\n      if (/^i\\d+$/.test(fragment)) {\n        if (!Array.isArray(data)) {\n          return;\n        }\n\n        for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {\n          CoreSchemaRegistry._set(data[dataIndex], fragments.slice(index + 1), value, data, `${dataIndex}`);\n        }\n\n        return;\n      }\n\n      if (!data && parent !== null && parentProperty) {\n        data = parent[parentProperty] = {};\n      }\n\n      parent = data;\n      parentProperty = fragment;\n      data = data[fragment];\n    }\n\n    if (parent && parentProperty && (force || parent[parentProperty] === undefined)) {\n      parent[parentProperty] = value;\n    }\n  }\n\n  _applySmartDefaults(data, smartDefaults) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      for (const [pointer, schema] of smartDefaults.entries()) {\n        const fragments = JSON.parse(pointer);\n\n        const source = _this5._sourceMap.get(schema.$source);\n\n        if (!source) {\n          continue;\n        }\n\n        let value = source(schema);\n\n        if ((0, rxjs_1.isObservable)(value)) {\n          value = yield value.toPromise();\n        }\n\n        CoreSchemaRegistry._set(data, fragments, value);\n      }\n    })();\n  }\n\n  useXDeprecatedProvider(onUsage) {\n    this._ajv.addKeyword({\n      keyword: 'x-deprecated',\n      validate: (schema, _data, _parentSchema, dataCxt) => {\n        if (schema) {\n          onUsage(`Option \"${dataCxt === null || dataCxt === void 0 ? void 0 : dataCxt.parentDataProperty}\" is deprecated${typeof schema == 'string' ? ': ' + schema : '.'}`);\n        }\n\n        return true;\n      },\n      errors: false\n    });\n  }\n\n  normalizeDataPathArr(it) {\n    return it.dataPathArr.slice(1, it.dataLevel + 1).map(p => typeof p === 'number' ? p : p.str.replace(/\"/g, ''));\n  }\n\n}\n\nexports.CoreSchemaRegistry = CoreSchemaRegistry;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","CoreSchemaRegistry","SchemaValidationException","ajv_1","require","ajv_formats_1","http","https","rxjs_1","operators_1","Url","exception_1","utils_1","utils_2","utility_1","visitor_1","BaseException","constructor","errors","baseMessage","length","messages","createMessages","join","map","err","_a","message","JSON","stringify","instancePath","params","keyword","additionalProperty","allowedValues","formats","_uriCache","Map","_uriHandlers","Set","_pre","PartiallyOrderedSet","_post","_smartDefaultKeyword","_sourceMap","_ajv","default","strict","loadSchema","uri","_fetch","passContext","format","addFormat","maybeSchema","handler","handlerResult","isObservable","toPromise","set","Promise","resolve","reject","url","URL","client","protocol","res","statusCode","resume","Error","setEncoding","data","on","chunk","json","parse","addPreTransform","visitor","deps","add","addPostTransform","_resolver","ref","validate","schema","schemaEnv","root","id","$id","fullReference","startsWith","resolvedSchema","getSchema","context","flatten","from","_flatten","removeSchema","_currentCompilationSchemaInfo","compileAsync","self","current","pointer","parentSchema","index","isJsonObject","resolved","schemaCopy","deepCopy","visitJsonSchema","compile","_compile","pipe","options","success","schemaInfo","smartDefaultRecord","promptDefinitions","validator","e","MissingRefError","validationOptions","withPrompts","applyPostTransforms","applyPreTransforms","validationContext","promptFieldsWithValue","values","visitJson","bind","_applySmartDefaults","definitions","filter","def","has","_applyPrompts","error","ValidationError","name","formatter","addSmartDefaultProvider","source","provider","addKeyword","valid","_parentSchema","it","compilationSchemInfo","pathArray","normalizeDataPathArr","metaSchema","type","properties","additionalProperties","required","registerUriHandler","usePromptProvider","isSetup","_promptProvider","path","items","propertyTypes","getTypesOfSchema","size","Array","isArray","enum","multiselect","enumValues","push","label","toString","definition","raw","validationError","oneOf","prompts","answers","pathFragments","split","slice","_set","fragments","parent","parentProperty","force","fragment","test","dataIndex","smartDefaults","entries","$source","useXDeprecatedProvider","onUsage","_data","dataCxt","parentDataProperty","dataPathArr","dataLevel","p","str","replace"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/src/json/schema/registry.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoreSchemaRegistry = exports.SchemaValidationException = void 0;\nconst ajv_1 = __importDefault(require(\"ajv\"));\nconst ajv_formats_1 = __importDefault(require(\"ajv-formats\"));\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst Url = __importStar(require(\"url\"));\nconst exception_1 = require(\"../../exception\");\nconst utils_1 = require(\"../../utils\");\nconst utils_2 = require(\"../utils\");\nconst utility_1 = require(\"./utility\");\nconst visitor_1 = require(\"./visitor\");\nclass SchemaValidationException extends exception_1.BaseException {\n    constructor(errors, baseMessage = 'Schema validation failed with the following errors:') {\n        if (!errors || errors.length === 0) {\n            super('Schema validation failed.');\n            this.errors = [];\n            return;\n        }\n        const messages = SchemaValidationException.createMessages(errors);\n        super(`${baseMessage}\\n  ${messages.join('\\n  ')}`);\n        this.errors = errors;\n    }\n    static createMessages(errors) {\n        if (!errors || errors.length === 0) {\n            return [];\n        }\n        const messages = errors.map((err) => {\n            var _a;\n            let message = `Data path ${JSON.stringify(err.instancePath)} ${err.message}`;\n            if (err.params) {\n                switch (err.keyword) {\n                    case 'additionalProperties':\n                        message += `(${err.params.additionalProperty})`;\n                        break;\n                    case 'enum':\n                        message += `. Allowed values are: ${(_a = err.params.allowedValues) === null || _a === void 0 ? void 0 : _a.map((v) => `\"${v}\"`).join(', ')}`;\n                        break;\n                }\n            }\n            return message + '.';\n        });\n        return messages;\n    }\n}\nexports.SchemaValidationException = SchemaValidationException;\nclass CoreSchemaRegistry {\n    constructor(formats = []) {\n        this._uriCache = new Map();\n        this._uriHandlers = new Set();\n        this._pre = new utils_1.PartiallyOrderedSet();\n        this._post = new utils_1.PartiallyOrderedSet();\n        this._smartDefaultKeyword = false;\n        this._sourceMap = new Map();\n        this._ajv = new ajv_1.default({\n            strict: false,\n            loadSchema: (uri) => this._fetch(uri),\n            passContext: true,\n        });\n        (0, ajv_formats_1.default)(this._ajv);\n        for (const format of formats) {\n            this.addFormat(format);\n        }\n    }\n    async _fetch(uri) {\n        const maybeSchema = this._uriCache.get(uri);\n        if (maybeSchema) {\n            return maybeSchema;\n        }\n        // Try all handlers, one after the other.\n        for (const handler of this._uriHandlers) {\n            let handlerResult = handler(uri);\n            if (handlerResult === null || handlerResult === undefined) {\n                continue;\n            }\n            if ((0, rxjs_1.isObservable)(handlerResult)) {\n                handlerResult = handlerResult.toPromise();\n            }\n            const value = await handlerResult;\n            this._uriCache.set(uri, value);\n            return value;\n        }\n        // If none are found, handle using http client.\n        return new Promise((resolve, reject) => {\n            const url = new Url.URL(uri);\n            const client = url.protocol === 'https:' ? https : http;\n            client.get(url, (res) => {\n                if (!res.statusCode || res.statusCode >= 300) {\n                    // Consume the rest of the data to free memory.\n                    res.resume();\n                    reject(new Error(`Request failed. Status Code: ${res.statusCode}`));\n                }\n                else {\n                    res.setEncoding('utf8');\n                    let data = '';\n                    res.on('data', (chunk) => {\n                        data += chunk;\n                    });\n                    res.on('end', () => {\n                        try {\n                            const json = JSON.parse(data);\n                            this._uriCache.set(uri, json);\n                            resolve(json);\n                        }\n                        catch (err) {\n                            reject(err);\n                        }\n                    });\n                }\n            });\n        });\n    }\n    /**\n     * Add a transformation step before the validation of any Json.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n    addPreTransform(visitor, deps) {\n        this._pre.add(visitor, deps);\n    }\n    /**\n     * Add a transformation step after the validation of any Json. The JSON will not be validated\n     * after the POST, so if transformations are not compatible with the Schema it will not result\n     * in an error.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n    addPostTransform(visitor, deps) {\n        this._post.add(visitor, deps);\n    }\n    _resolver(ref, validate) {\n        if (!validate || !ref) {\n            return {};\n        }\n        const schema = validate.schemaEnv.root.schema;\n        const id = typeof schema === 'object' ? schema.$id : null;\n        let fullReference = ref;\n        if (typeof id === 'string') {\n            fullReference = Url.resolve(id, ref);\n            if (ref.startsWith('#')) {\n                fullReference = id + fullReference;\n            }\n        }\n        const resolvedSchema = this._ajv.getSchema(fullReference);\n        return {\n            context: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schemaEnv.validate,\n            schema: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schema,\n        };\n    }\n    /**\n     * Flatten the Schema, resolving and replacing all the refs. Makes it into a synchronous schema\n     * that is also easier to traverse. Does not cache the result.\n     *\n     * @param schema The schema or URI to flatten.\n     * @returns An Observable of the flattened schema object.\n     * @deprecated since 11.2 without replacement.\n     * Producing a flatten schema document does not in all cases produce a schema with identical behavior to the original.\n     * See: https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.B.2\n     */\n    flatten(schema) {\n        return (0, rxjs_1.from)(this._flatten(schema));\n    }\n    async _flatten(schema) {\n        this._ajv.removeSchema(schema);\n        this._currentCompilationSchemaInfo = undefined;\n        const validate = await this._ajv.compileAsync(schema);\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        function visitor(current, pointer, parentSchema, index) {\n            if (current &&\n                parentSchema &&\n                index &&\n                (0, utils_2.isJsonObject)(current) &&\n                Object.prototype.hasOwnProperty.call(current, '$ref') &&\n                typeof current['$ref'] == 'string') {\n                const resolved = self._resolver(current['$ref'], validate);\n                if (resolved.schema) {\n                    parentSchema[index] = resolved.schema;\n                }\n            }\n        }\n        const schemaCopy = (0, utils_1.deepCopy)(validate.schema);\n        (0, visitor_1.visitJsonSchema)(schemaCopy, visitor);\n        return schemaCopy;\n    }\n    /**\n     * Compile and return a validation function for the Schema.\n     *\n     * @param schema The schema to validate. If a string, will fetch the schema before compiling it\n     * (using schema as a URI).\n     * @returns An Observable of the Validation function.\n     */\n    compile(schema) {\n        return (0, rxjs_1.from)(this._compile(schema)).pipe((0, operators_1.map)((validate) => (value, options) => (0, rxjs_1.from)(validate(value, options))));\n    }\n    async _compile(schema) {\n        if (typeof schema === 'boolean') {\n            return async (data) => ({ success: schema, data });\n        }\n        const schemaInfo = {\n            smartDefaultRecord: new Map(),\n            promptDefinitions: [],\n        };\n        this._ajv.removeSchema(schema);\n        let validator;\n        try {\n            this._currentCompilationSchemaInfo = schemaInfo;\n            validator = this._ajv.compile(schema);\n        }\n        catch (e) {\n            // This should eventually be refactored so that we we handle race condition where the same schema is validated at the same time.\n            if (!(e instanceof ajv_1.default.MissingRefError)) {\n                throw e;\n            }\n            validator = await this._ajv.compileAsync(schema);\n        }\n        finally {\n            this._currentCompilationSchemaInfo = undefined;\n        }\n        return async (data, options) => {\n            var _a;\n            const validationOptions = {\n                withPrompts: true,\n                applyPostTransforms: true,\n                applyPreTransforms: true,\n                ...options,\n            };\n            const validationContext = {\n                promptFieldsWithValue: new Set(),\n            };\n            // Apply pre-validation transforms\n            if (validationOptions.applyPreTransforms) {\n                for (const visitor of this._pre.values()) {\n                    data = await (0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator).toPromise();\n                }\n            }\n            // Apply smart defaults\n            await this._applySmartDefaults(data, schemaInfo.smartDefaultRecord);\n            // Apply prompts\n            if (validationOptions.withPrompts) {\n                const visitor = (value, pointer) => {\n                    if (value !== undefined) {\n                        validationContext.promptFieldsWithValue.add(pointer);\n                    }\n                    return value;\n                };\n                if (typeof schema === 'object') {\n                    await (0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator).toPromise();\n                }\n                const definitions = schemaInfo.promptDefinitions.filter((def) => !validationContext.promptFieldsWithValue.has(def.id));\n                if (definitions.length > 0) {\n                    await this._applyPrompts(data, definitions);\n                }\n            }\n            // Validate using ajv\n            try {\n                const success = await validator.call(validationContext, data);\n                if (!success) {\n                    return { data, success, errors: (_a = validator.errors) !== null && _a !== void 0 ? _a : [] };\n                }\n            }\n            catch (error) {\n                if (error instanceof ajv_1.default.ValidationError) {\n                    return { data, success: false, errors: error.errors };\n                }\n                throw error;\n            }\n            // Apply post-validation transforms\n            if (validationOptions.applyPostTransforms) {\n                for (const visitor of this._post.values()) {\n                    data = await (0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator).toPromise();\n                }\n            }\n            return { data, success: true };\n        };\n    }\n    addFormat(format) {\n        this._ajv.addFormat(format.name, format.formatter);\n    }\n    addSmartDefaultProvider(source, provider) {\n        if (this._sourceMap.has(source)) {\n            throw new Error(source);\n        }\n        this._sourceMap.set(source, provider);\n        if (!this._smartDefaultKeyword) {\n            this._smartDefaultKeyword = true;\n            this._ajv.addKeyword({\n                keyword: '$default',\n                errors: false,\n                valid: true,\n                compile: (schema, _parentSchema, it) => {\n                    const compilationSchemInfo = this._currentCompilationSchemaInfo;\n                    if (compilationSchemInfo === undefined) {\n                        return () => true;\n                    }\n                    // We cheat, heavily.\n                    const pathArray = this.normalizeDataPathArr(it);\n                    compilationSchemInfo.smartDefaultRecord.set(JSON.stringify(pathArray), schema);\n                    return () => true;\n                },\n                metaSchema: {\n                    type: 'object',\n                    properties: {\n                        '$source': { type: 'string' },\n                    },\n                    additionalProperties: true,\n                    required: ['$source'],\n                },\n            });\n        }\n    }\n    registerUriHandler(handler) {\n        this._uriHandlers.add(handler);\n    }\n    usePromptProvider(provider) {\n        const isSetup = !!this._promptProvider;\n        this._promptProvider = provider;\n        if (isSetup) {\n            return;\n        }\n        this._ajv.addKeyword({\n            keyword: 'x-prompt',\n            errors: false,\n            valid: true,\n            compile: (schema, parentSchema, it) => {\n                const compilationSchemInfo = this._currentCompilationSchemaInfo;\n                if (!compilationSchemInfo) {\n                    return () => true;\n                }\n                const path = '/' + this.normalizeDataPathArr(it).join('/');\n                let type;\n                let items;\n                let message;\n                if (typeof schema == 'string') {\n                    message = schema;\n                }\n                else {\n                    message = schema.message;\n                    type = schema.type;\n                    items = schema.items;\n                }\n                const propertyTypes = (0, utility_1.getTypesOfSchema)(parentSchema);\n                if (!type) {\n                    if (propertyTypes.size === 1 && propertyTypes.has('boolean')) {\n                        type = 'confirmation';\n                    }\n                    else if (Array.isArray(parentSchema.enum)) {\n                        type = 'list';\n                    }\n                    else if (propertyTypes.size === 1 &&\n                        propertyTypes.has('array') &&\n                        parentSchema.items &&\n                        Array.isArray(parentSchema.items.enum)) {\n                        type = 'list';\n                    }\n                    else {\n                        type = 'input';\n                    }\n                }\n                let multiselect;\n                if (type === 'list') {\n                    multiselect =\n                        schema.multiselect === undefined\n                            ? propertyTypes.size === 1 && propertyTypes.has('array')\n                            : schema.multiselect;\n                    const enumValues = multiselect\n                        ? parentSchema.items &&\n                            parentSchema.items.enum\n                        : parentSchema.enum;\n                    if (!items && Array.isArray(enumValues)) {\n                        items = [];\n                        for (const value of enumValues) {\n                            if (typeof value == 'string') {\n                                items.push(value);\n                            }\n                            else if (typeof value == 'object') {\n                                // Invalid\n                            }\n                            else {\n                                items.push({ label: value.toString(), value });\n                            }\n                        }\n                    }\n                }\n                const definition = {\n                    id: path,\n                    type,\n                    message,\n                    raw: schema,\n                    items,\n                    multiselect,\n                    propertyTypes,\n                    default: typeof parentSchema.default == 'object' &&\n                        parentSchema.default !== null &&\n                        !Array.isArray(parentSchema.default)\n                        ? undefined\n                        : parentSchema.default,\n                    async validator(data) {\n                        var _a;\n                        try {\n                            const result = await it.self.validate(parentSchema, data);\n                            // If the schema is sync then false will be returned on validation failure\n                            if (result) {\n                                return result;\n                            }\n                            else if ((_a = it.self.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                                // Validation errors will be present on the Ajv instance when sync\n                                return it.self.errors[0].message;\n                            }\n                        }\n                        catch (e) {\n                            const validationError = e;\n                            // If the schema is async then an error will be thrown on validation failure\n                            if (Array.isArray(validationError.errors) && validationError.errors.length) {\n                                return validationError.errors[0].message;\n                            }\n                        }\n                        return false;\n                    },\n                };\n                compilationSchemInfo.promptDefinitions.push(definition);\n                return function () {\n                    // If 'this' is undefined in the call, then it defaults to the global\n                    // 'this'.\n                    if (this && this.promptFieldsWithValue) {\n                        this.promptFieldsWithValue.add(path);\n                    }\n                    return true;\n                };\n            },\n            metaSchema: {\n                oneOf: [\n                    { type: 'string' },\n                    {\n                        type: 'object',\n                        properties: {\n                            'type': { type: 'string' },\n                            'message': { type: 'string' },\n                        },\n                        additionalProperties: true,\n                        required: ['message'],\n                    },\n                ],\n            },\n        });\n    }\n    async _applyPrompts(data, prompts) {\n        const provider = this._promptProvider;\n        if (!provider) {\n            return;\n        }\n        const answers = await (0, rxjs_1.from)(provider(prompts)).toPromise();\n        for (const path in answers) {\n            const pathFragments = path.split('/').slice(1);\n            CoreSchemaRegistry._set(data, pathFragments, answers[path], null, undefined, true);\n        }\n    }\n    static _set(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, fragments, value, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parent = null, parentProperty, force) {\n        for (let index = 0; index < fragments.length; index++) {\n            const fragment = fragments[index];\n            if (/^i\\d+$/.test(fragment)) {\n                if (!Array.isArray(data)) {\n                    return;\n                }\n                for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                    CoreSchemaRegistry._set(data[dataIndex], fragments.slice(index + 1), value, data, `${dataIndex}`);\n                }\n                return;\n            }\n            if (!data && parent !== null && parentProperty) {\n                data = parent[parentProperty] = {};\n            }\n            parent = data;\n            parentProperty = fragment;\n            data = data[fragment];\n        }\n        if (parent && parentProperty && (force || parent[parentProperty] === undefined)) {\n            parent[parentProperty] = value;\n        }\n    }\n    async _applySmartDefaults(data, smartDefaults) {\n        for (const [pointer, schema] of smartDefaults.entries()) {\n            const fragments = JSON.parse(pointer);\n            const source = this._sourceMap.get(schema.$source);\n            if (!source) {\n                continue;\n            }\n            let value = source(schema);\n            if ((0, rxjs_1.isObservable)(value)) {\n                value = await value.toPromise();\n            }\n            CoreSchemaRegistry._set(data, fragments, value);\n        }\n    }\n    useXDeprecatedProvider(onUsage) {\n        this._ajv.addKeyword({\n            keyword: 'x-deprecated',\n            validate: (schema, _data, _parentSchema, dataCxt) => {\n                if (schema) {\n                    onUsage(`Option \"${dataCxt === null || dataCxt === void 0 ? void 0 : dataCxt.parentDataProperty}\" is deprecated${typeof schema == 'string' ? ': ' + schema : '.'}`);\n                }\n                return true;\n            },\n            errors: false,\n        });\n    }\n    normalizeDataPathArr(it) {\n        return it.dataPathArr\n            .slice(1, it.dataLevel + 1)\n            .map((p) => (typeof p === 'number' ? p : p.str.replace(/\"/g, '')));\n    }\n}\nexports.CoreSchemaRegistry = CoreSchemaRegistry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}