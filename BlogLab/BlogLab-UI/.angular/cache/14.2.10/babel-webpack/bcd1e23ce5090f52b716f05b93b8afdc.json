{"ast":null,"code":"'use strict';\n/**\n * `rawlist` type prompt\n */\n\nconst chalk = require('chalk');\n\nconst {\n  map,\n  takeUntil\n} = require('rxjs/operators');\n\nconst Base = require('./base');\n\nconst Separator = require('../objects/separator');\n\nconst observe = require('../utils/events');\n\nconst Paginator = require('../utils/paginator');\n\nclass ExpandPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.validateChoices(this.opt.choices); // Add the default `help` (/expand) option\n\n    this.opt.choices.push({\n      key: 'h',\n      name: 'Help, list all options',\n      value: 'help'\n    });\n\n    this.opt.validate = choice => {\n      if (choice == null) {\n        return 'Please enter a valid command';\n      }\n\n      return choice !== 'help';\n    }; // Setup the default string (capitalize the default key)\n\n\n    this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);\n    this.paginator = new Paginator(this.screen);\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb; // Save user answer and update prompt to show selected option.\n\n    const events = observe(this.rl);\n    const validation = this.handleSubmitEvents(events.line.pipe(map(this.getCurrentValue.bind(this))));\n    validation.success.forEach(this.onSubmit.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    this.keypressObs = events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this)); // Init the prompt\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {ExpandPrompt} self\n   */\n\n\n  render(error, hint) {\n    let message = this.getQuestion();\n    let bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.answer);\n    } else if (this.status === 'expanded') {\n      const choicesStr = renderChoices(this.opt.choices, this.selectedKey);\n      message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);\n      message += '\\n  Answer: ';\n    }\n\n    message += this.rl.line;\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    if (hint) {\n      bottomContent = chalk.cyan('>> ') + hint;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  getCurrentValue(input) {\n    if (!input) {\n      input = this.rawDefault;\n    }\n\n    const selected = this.opt.choices.where({\n      key: input.toLowerCase().trim()\n    })[0];\n\n    if (!selected) {\n      return null;\n    }\n\n    return selected.value;\n  }\n  /**\n   * Generate the prompt choices string\n   * @return {String}  Choices string\n   */\n\n\n  getChoices() {\n    let output = '';\n    this.opt.choices.forEach(choice => {\n      output += '\\n  ';\n\n      if (choice.type === 'separator') {\n        output += ' ' + choice;\n        return;\n      }\n\n      let choiceStr = choice.key + ') ' + choice.name;\n\n      if (this.selectedKey === choice.key) {\n        choiceStr = chalk.cyan(choiceStr);\n      }\n\n      output += choiceStr;\n    });\n    return output;\n  }\n\n  onError(state) {\n    if (state.value === 'help') {\n      this.selectedKey = '';\n      this.status = 'expanded';\n      this.render();\n      return;\n    }\n\n    this.render(state.isValid);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  onSubmit(state) {\n    this.status = 'answered';\n    const choice = this.opt.choices.where({\n      value: state.value\n    })[0];\n    this.answer = choice.short || choice.name; // Re-render prompt\n\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onKeypress() {\n    this.selectedKey = this.rl.line.toLowerCase();\n    const selected = this.opt.choices.where({\n      key: this.selectedKey\n    })[0];\n\n    if (this.status === 'expanded') {\n      this.render();\n    } else {\n      this.render(null, selected ? selected.name : null);\n    }\n  }\n  /**\n   * Validate the choices\n   * @param {Array} choices\n   */\n\n\n  validateChoices(choices) {\n    let formatError;\n    const errors = [];\n    const keymap = {};\n    choices.filter(Separator.exclude).forEach(choice => {\n      if (!choice.key || choice.key.length !== 1) {\n        formatError = true;\n      }\n\n      choice.key = String(choice.key).toLowerCase();\n\n      if (keymap[choice.key]) {\n        errors.push(choice.key);\n      }\n\n      keymap[choice.key] = true;\n    });\n\n    if (formatError) {\n      throw new Error('Format error: `key` param must be a single letter and is required.');\n    }\n\n    if (keymap.h) {\n      throw new Error('Reserved key error: `key` param cannot be `h` - this value is reserved.');\n    }\n\n    if (errors.length) {\n      throw new Error('Duplicate key error: `key` param must be unique. Duplicates: ' + [...new Set(errors)].join(','));\n    }\n  }\n  /**\n   * Generate a string out of the choices keys\n   * @param  {Array}  choices\n   * @param  {Number|String} default - the choice index or name to capitalize\n   * @return {String} The rendered choices key string\n   */\n\n\n  generateChoicesString(choices, defaultChoice) {\n    let defIndex = choices.realLength - 1;\n\n    if (typeof defaultChoice === 'number' && this.opt.choices.getChoice(defaultChoice)) {\n      defIndex = defaultChoice;\n    } else if (typeof defaultChoice === 'string') {\n      const index = choices.realChoices.findIndex(({\n        value\n      }) => value === defaultChoice);\n      defIndex = index === -1 ? defIndex : index;\n    }\n\n    const defStr = this.opt.choices.pluck('key');\n    this.rawDefault = defStr[defIndex];\n    defStr[defIndex] = String(defStr[defIndex]).toUpperCase();\n    return defStr.join('');\n  }\n\n}\n/**\n * Function for rendering checkbox choices\n * @param  {String} pointer Selected key\n * @return {String}         Rendered content\n */\n\n\nfunction renderChoices(choices, pointer) {\n  let output = '';\n  choices.forEach(choice => {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      output += ' ' + choice;\n      return;\n    }\n\n    let choiceStr = choice.key + ') ' + choice.name;\n\n    if (pointer === choice.key) {\n      choiceStr = chalk.cyan(choiceStr);\n    }\n\n    output += choiceStr;\n  });\n  return output;\n}\n\nmodule.exports = ExpandPrompt;","map":{"version":3,"names":["chalk","require","map","takeUntil","Base","Separator","observe","Paginator","ExpandPrompt","constructor","questions","rl","answers","opt","choices","throwParamError","validateChoices","push","key","name","value","validate","choice","default","generateChoicesString","paginator","screen","_run","cb","done","events","validation","handleSubmitEvents","line","pipe","getCurrentValue","bind","success","forEach","onSubmit","error","onError","keypressObs","keypress","onKeypress","render","hint","message","getQuestion","bottomContent","status","cyan","answer","choicesStr","renderChoices","selectedKey","paginate","pageSize","red","input","rawDefault","selected","where","toLowerCase","trim","getChoices","output","type","choiceStr","state","isValid","short","formatError","errors","keymap","filter","exclude","length","String","Error","h","Set","join","defaultChoice","defIndex","realLength","getChoice","index","realChoices","findIndex","defStr","pluck","toUpperCase","pointer","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/inquirer/lib/prompts/expand.js"],"sourcesContent":["'use strict';\n/**\n * `rawlist` type prompt\n */\n\nconst chalk = require('chalk');\nconst { map, takeUntil } = require('rxjs/operators');\nconst Base = require('./base');\nconst Separator = require('../objects/separator');\nconst observe = require('../utils/events');\nconst Paginator = require('../utils/paginator');\n\nclass ExpandPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.validateChoices(this.opt.choices);\n\n    // Add the default `help` (/expand) option\n    this.opt.choices.push({\n      key: 'h',\n      name: 'Help, list all options',\n      value: 'help',\n    });\n\n    this.opt.validate = (choice) => {\n      if (choice == null) {\n        return 'Please enter a valid command';\n      }\n\n      return choice !== 'help';\n    };\n\n    // Setup the default string (capitalize the default key)\n    this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);\n\n    this.paginator = new Paginator(this.screen);\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Save user answer and update prompt to show selected option.\n    const events = observe(this.rl);\n    const validation = this.handleSubmitEvents(\n      events.line.pipe(map(this.getCurrentValue.bind(this)))\n    );\n    validation.success.forEach(this.onSubmit.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    this.keypressObs = events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n\n    // Init the prompt\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ExpandPrompt} self\n   */\n\n  render(error, hint) {\n    let message = this.getQuestion();\n    let bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.answer);\n    } else if (this.status === 'expanded') {\n      const choicesStr = renderChoices(this.opt.choices, this.selectedKey);\n      message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);\n      message += '\\n  Answer: ';\n    }\n\n    message += this.rl.line;\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    if (hint) {\n      bottomContent = chalk.cyan('>> ') + hint;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  getCurrentValue(input) {\n    if (!input) {\n      input = this.rawDefault;\n    }\n\n    const selected = this.opt.choices.where({ key: input.toLowerCase().trim() })[0];\n    if (!selected) {\n      return null;\n    }\n\n    return selected.value;\n  }\n\n  /**\n   * Generate the prompt choices string\n   * @return {String}  Choices string\n   */\n\n  getChoices() {\n    let output = '';\n\n    this.opt.choices.forEach((choice) => {\n      output += '\\n  ';\n\n      if (choice.type === 'separator') {\n        output += ' ' + choice;\n        return;\n      }\n\n      let choiceStr = choice.key + ') ' + choice.name;\n      if (this.selectedKey === choice.key) {\n        choiceStr = chalk.cyan(choiceStr);\n      }\n\n      output += choiceStr;\n    });\n\n    return output;\n  }\n\n  onError(state) {\n    if (state.value === 'help') {\n      this.selectedKey = '';\n      this.status = 'expanded';\n      this.render();\n      return;\n    }\n\n    this.render(state.isValid);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onSubmit(state) {\n    this.status = 'answered';\n    const choice = this.opt.choices.where({ value: state.value })[0];\n    this.answer = choice.short || choice.name;\n\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    this.selectedKey = this.rl.line.toLowerCase();\n    const selected = this.opt.choices.where({ key: this.selectedKey })[0];\n    if (this.status === 'expanded') {\n      this.render();\n    } else {\n      this.render(null, selected ? selected.name : null);\n    }\n  }\n\n  /**\n   * Validate the choices\n   * @param {Array} choices\n   */\n\n  validateChoices(choices) {\n    let formatError;\n    const errors = [];\n    const keymap = {};\n    choices.filter(Separator.exclude).forEach((choice) => {\n      if (!choice.key || choice.key.length !== 1) {\n        formatError = true;\n      }\n\n      choice.key = String(choice.key).toLowerCase();\n\n      if (keymap[choice.key]) {\n        errors.push(choice.key);\n      }\n\n      keymap[choice.key] = true;\n    });\n\n    if (formatError) {\n      throw new Error(\n        'Format error: `key` param must be a single letter and is required.'\n      );\n    }\n\n    if (keymap.h) {\n      throw new Error(\n        'Reserved key error: `key` param cannot be `h` - this value is reserved.'\n      );\n    }\n\n    if (errors.length) {\n      throw new Error(\n        'Duplicate key error: `key` param must be unique. Duplicates: ' +\n          [...new Set(errors)].join(',')\n      );\n    }\n  }\n\n  /**\n   * Generate a string out of the choices keys\n   * @param  {Array}  choices\n   * @param  {Number|String} default - the choice index or name to capitalize\n   * @return {String} The rendered choices key string\n   */\n  generateChoicesString(choices, defaultChoice) {\n    let defIndex = choices.realLength - 1;\n    if (typeof defaultChoice === 'number' && this.opt.choices.getChoice(defaultChoice)) {\n      defIndex = defaultChoice;\n    } else if (typeof defaultChoice === 'string') {\n      const index = choices.realChoices.findIndex(({ value }) => value === defaultChoice);\n      defIndex = index === -1 ? defIndex : index;\n    }\n\n    const defStr = this.opt.choices.pluck('key');\n    this.rawDefault = defStr[defIndex];\n    defStr[defIndex] = String(defStr[defIndex]).toUpperCase();\n    return defStr.join('');\n  }\n}\n\n/**\n * Function for rendering checkbox choices\n * @param  {String} pointer Selected key\n * @return {String}         Rendered content\n */\n\nfunction renderChoices(choices, pointer) {\n  let output = '';\n\n  choices.forEach((choice) => {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      output += ' ' + choice;\n      return;\n    }\n\n    let choiceStr = choice.key + ') ' + choice.name;\n    if (pointer === choice.key) {\n      choiceStr = chalk.cyan(choiceStr);\n    }\n\n    output += choiceStr;\n  });\n\n  return output;\n}\n\nmodule.exports = ExpandPrompt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}