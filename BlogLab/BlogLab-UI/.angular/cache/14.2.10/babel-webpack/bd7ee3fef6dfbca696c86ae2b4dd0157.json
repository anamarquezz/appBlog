{"ast":null,"code":"'use strict';\n/**\n * `password` type prompt\n */\n\nconst chalk = require('chalk');\n\nconst {\n  map,\n  takeUntil\n} = require('rxjs/operators');\n\nconst Base = require('./base');\n\nconst observe = require('../utils/events');\n\nfunction mask(input, maskChar) {\n  input = String(input);\n  maskChar = typeof maskChar === 'string' ? maskChar : '*';\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  return new Array(input.length + 1).join(maskChar);\n}\n\nclass PasswordPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n  _run(cb) {\n    this.done = cb;\n    const events = observe(this.rl); // Once user confirm (enter key)\n\n    const submit = events.line.pipe(map(this.filterInput.bind(this)));\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this)); // Init\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {PasswordPrompt} self\n   */\n\n\n  render(error) {\n    let message = this.getQuestion();\n    let bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += this.getMaskedValue(this.answer);\n    } else {\n      message += this.getMaskedValue(this.rl.line || '');\n    }\n\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  getMaskedValue(value) {\n    if (this.status === 'answered') {\n      return this.opt.mask ? chalk.cyan(mask(value, this.opt.mask)) : chalk.italic.dim('[hidden]');\n    }\n\n    return this.opt.mask ? mask(value, this.opt.mask) : chalk.italic.dim('[input is hidden] ');\n  }\n  /**\n   * Mask value during async filter/validation.\n   */\n\n\n  getSpinningValue(value) {\n    return this.getMaskedValue(value);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n\n    return input;\n  }\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value; // Re-render prompt\n\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n  onKeypress() {\n    // If user press a key, just clear the default value\n    if (this.opt.default) {\n      this.opt.default = undefined;\n    }\n\n    this.render();\n  }\n\n}\n\nmodule.exports = PasswordPrompt;","map":{"version":3,"names":["chalk","require","map","takeUntil","Base","observe","mask","input","maskChar","String","length","Array","join","PasswordPrompt","_run","cb","done","events","rl","submit","line","pipe","filterInput","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","keypress","onKeypress","render","message","getQuestion","bottomContent","status","getMaskedValue","answer","red","screen","value","opt","cyan","italic","dim","getSpinningValue","default","state","isValid","undefined","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/inquirer/lib/prompts/password.js"],"sourcesContent":["'use strict';\n/**\n * `password` type prompt\n */\n\nconst chalk = require('chalk');\nconst { map, takeUntil } = require('rxjs/operators');\nconst Base = require('./base');\nconst observe = require('../utils/events');\n\nfunction mask(input, maskChar) {\n  input = String(input);\n  maskChar = typeof maskChar === 'string' ? maskChar : '*';\n  if (input.length === 0) {\n    return '';\n  }\n\n  return new Array(input.length + 1).join(maskChar);\n}\n\nclass PasswordPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    const events = observe(this.rl);\n\n    // Once user confirm (enter key)\n    const submit = events.line.pipe(map(this.filterInput.bind(this)));\n\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {PasswordPrompt} self\n   */\n\n  render(error) {\n    let message = this.getQuestion();\n    let bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += this.getMaskedValue(this.answer);\n    } else {\n      message += this.getMaskedValue(this.rl.line || '');\n    }\n\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  getMaskedValue(value) {\n    if (this.status === 'answered') {\n      return this.opt.mask\n        ? chalk.cyan(mask(value, this.opt.mask))\n        : chalk.italic.dim('[hidden]');\n    }\n    return this.opt.mask\n      ? mask(value, this.opt.mask)\n      : chalk.italic.dim('[input is hidden] ');\n  }\n\n  /**\n   * Mask value during async filter/validation.\n   */\n  getSpinningValue(value) {\n    return this.getMaskedValue(value);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n\n    return input;\n  }\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value;\n\n    // Re-render prompt\n    this.render();\n\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n  onKeypress() {\n    // If user press a key, just clear the default value\n    if (this.opt.default) {\n      this.opt.default = undefined;\n    }\n\n    this.render();\n  }\n}\n\nmodule.exports = PasswordPrompt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}