{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst buffer_1 = require(\"buffer\");\n/**\n * Error strings\n */\n\n\nconst ERRORS = {\n  INVALID_ENCODING: 'Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.',\n  INVALID_SMARTBUFFER_SIZE: 'Invalid size provided. Size must be a valid integer greater than zero.',\n  INVALID_SMARTBUFFER_BUFFER: 'Invalid Buffer provided in SmartBufferOptions.',\n  INVALID_SMARTBUFFER_OBJECT: 'Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.',\n  INVALID_OFFSET: 'An invalid offset value was provided.',\n  INVALID_OFFSET_NON_NUMBER: 'An invalid offset value was provided. A numeric value is required.',\n  INVALID_LENGTH: 'An invalid length value was provided.',\n  INVALID_LENGTH_NON_NUMBER: 'An invalid length value was provived. A numeric value is required.',\n  INVALID_TARGET_OFFSET: 'Target offset is beyond the bounds of the internal SmartBuffer data.',\n  INVALID_TARGET_LENGTH: 'Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.',\n  INVALID_READ_BEYOND_BOUNDS: 'Attempted to read beyond the bounds of the managed data.',\n  INVALID_WRITE_BEYOND_BOUNDS: 'Attempted to write beyond the bounds of the managed data.'\n};\nexports.ERRORS = ERRORS;\n/**\n * Checks if a given encoding is a valid Buffer encoding. (Throws an exception if check fails)\n *\n * @param { String } encoding The encoding string to check.\n */\n\nfunction checkEncoding(encoding) {\n  if (!buffer_1.Buffer.isEncoding(encoding)) {\n    throw new Error(ERRORS.INVALID_ENCODING);\n  }\n}\n\nexports.checkEncoding = checkEncoding;\n/**\n * Checks if a given number is a finite integer. (Throws an exception if check fails)\n *\n * @param { Number } value The number value to check.\n */\n\nfunction isFiniteInteger(value) {\n  return typeof value === 'number' && isFinite(value) && isInteger(value);\n}\n\nexports.isFiniteInteger = isFiniteInteger;\n/**\n * Checks if an offset/length value is valid. (Throws an exception if check fails)\n *\n * @param value The value to check.\n * @param offset True if checking an offset, false if checking a length.\n */\n\nfunction checkOffsetOrLengthValue(value, offset) {\n  if (typeof value === 'number') {\n    // Check for non finite/non integers\n    if (!isFiniteInteger(value) || value < 0) {\n      throw new Error(offset ? ERRORS.INVALID_OFFSET : ERRORS.INVALID_LENGTH);\n    }\n  } else {\n    throw new Error(offset ? ERRORS.INVALID_OFFSET_NON_NUMBER : ERRORS.INVALID_LENGTH_NON_NUMBER);\n  }\n}\n/**\n * Checks if a length value is valid. (Throws an exception if check fails)\n *\n * @param { Number } length The value to check.\n */\n\n\nfunction checkLengthValue(length) {\n  checkOffsetOrLengthValue(length, false);\n}\n\nexports.checkLengthValue = checkLengthValue;\n/**\n * Checks if a offset value is valid. (Throws an exception if check fails)\n *\n * @param { Number } offset The value to check.\n */\n\nfunction checkOffsetValue(offset) {\n  checkOffsetOrLengthValue(offset, true);\n}\n\nexports.checkOffsetValue = checkOffsetValue;\n/**\n * Checks if a target offset value is out of bounds. (Throws an exception if check fails)\n *\n * @param { Number } offset The offset value to check.\n * @param { SmartBuffer } buff The SmartBuffer instance to check against.\n */\n\nfunction checkTargetOffset(offset, buff) {\n  if (offset < 0 || offset > buff.length) {\n    throw new Error(ERRORS.INVALID_TARGET_OFFSET);\n  }\n}\n\nexports.checkTargetOffset = checkTargetOffset;\n/**\n * Determines whether a given number is a integer.\n * @param value The number to check.\n */\n\nfunction isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n/**\n * Throws if Node.js version is too low to support bigint\n */\n\n\nfunction bigIntAndBufferInt64Check(bufferMethod) {\n  if (typeof BigInt === 'undefined') {\n    throw new Error('Platform does not support JS BigInt type.');\n  }\n\n  if (typeof buffer_1.Buffer.prototype[bufferMethod] === 'undefined') {\n    throw new Error(`Platform does not support Buffer.prototype.${bufferMethod}.`);\n  }\n}\n\nexports.bigIntAndBufferInt64Check = bigIntAndBufferInt64Check;","map":{"version":3,"names":["Object","defineProperty","exports","value","buffer_1","require","ERRORS","INVALID_ENCODING","INVALID_SMARTBUFFER_SIZE","INVALID_SMARTBUFFER_BUFFER","INVALID_SMARTBUFFER_OBJECT","INVALID_OFFSET","INVALID_OFFSET_NON_NUMBER","INVALID_LENGTH","INVALID_LENGTH_NON_NUMBER","INVALID_TARGET_OFFSET","INVALID_TARGET_LENGTH","INVALID_READ_BEYOND_BOUNDS","INVALID_WRITE_BEYOND_BOUNDS","checkEncoding","encoding","Buffer","isEncoding","Error","isFiniteInteger","isFinite","isInteger","checkOffsetOrLengthValue","offset","checkLengthValue","length","checkOffsetValue","checkTargetOffset","buff","Math","floor","bigIntAndBufferInt64Check","bufferMethod","BigInt","prototype"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/smart-buffer/build/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = require(\"buffer\");\n/**\n * Error strings\n */\nconst ERRORS = {\n    INVALID_ENCODING: 'Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.',\n    INVALID_SMARTBUFFER_SIZE: 'Invalid size provided. Size must be a valid integer greater than zero.',\n    INVALID_SMARTBUFFER_BUFFER: 'Invalid Buffer provided in SmartBufferOptions.',\n    INVALID_SMARTBUFFER_OBJECT: 'Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.',\n    INVALID_OFFSET: 'An invalid offset value was provided.',\n    INVALID_OFFSET_NON_NUMBER: 'An invalid offset value was provided. A numeric value is required.',\n    INVALID_LENGTH: 'An invalid length value was provided.',\n    INVALID_LENGTH_NON_NUMBER: 'An invalid length value was provived. A numeric value is required.',\n    INVALID_TARGET_OFFSET: 'Target offset is beyond the bounds of the internal SmartBuffer data.',\n    INVALID_TARGET_LENGTH: 'Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.',\n    INVALID_READ_BEYOND_BOUNDS: 'Attempted to read beyond the bounds of the managed data.',\n    INVALID_WRITE_BEYOND_BOUNDS: 'Attempted to write beyond the bounds of the managed data.'\n};\nexports.ERRORS = ERRORS;\n/**\n * Checks if a given encoding is a valid Buffer encoding. (Throws an exception if check fails)\n *\n * @param { String } encoding The encoding string to check.\n */\nfunction checkEncoding(encoding) {\n    if (!buffer_1.Buffer.isEncoding(encoding)) {\n        throw new Error(ERRORS.INVALID_ENCODING);\n    }\n}\nexports.checkEncoding = checkEncoding;\n/**\n * Checks if a given number is a finite integer. (Throws an exception if check fails)\n *\n * @param { Number } value The number value to check.\n */\nfunction isFiniteInteger(value) {\n    return typeof value === 'number' && isFinite(value) && isInteger(value);\n}\nexports.isFiniteInteger = isFiniteInteger;\n/**\n * Checks if an offset/length value is valid. (Throws an exception if check fails)\n *\n * @param value The value to check.\n * @param offset True if checking an offset, false if checking a length.\n */\nfunction checkOffsetOrLengthValue(value, offset) {\n    if (typeof value === 'number') {\n        // Check for non finite/non integers\n        if (!isFiniteInteger(value) || value < 0) {\n            throw new Error(offset ? ERRORS.INVALID_OFFSET : ERRORS.INVALID_LENGTH);\n        }\n    }\n    else {\n        throw new Error(offset ? ERRORS.INVALID_OFFSET_NON_NUMBER : ERRORS.INVALID_LENGTH_NON_NUMBER);\n    }\n}\n/**\n * Checks if a length value is valid. (Throws an exception if check fails)\n *\n * @param { Number } length The value to check.\n */\nfunction checkLengthValue(length) {\n    checkOffsetOrLengthValue(length, false);\n}\nexports.checkLengthValue = checkLengthValue;\n/**\n * Checks if a offset value is valid. (Throws an exception if check fails)\n *\n * @param { Number } offset The value to check.\n */\nfunction checkOffsetValue(offset) {\n    checkOffsetOrLengthValue(offset, true);\n}\nexports.checkOffsetValue = checkOffsetValue;\n/**\n * Checks if a target offset value is out of bounds. (Throws an exception if check fails)\n *\n * @param { Number } offset The offset value to check.\n * @param { SmartBuffer } buff The SmartBuffer instance to check against.\n */\nfunction checkTargetOffset(offset, buff) {\n    if (offset < 0 || offset > buff.length) {\n        throw new Error(ERRORS.INVALID_TARGET_OFFSET);\n    }\n}\nexports.checkTargetOffset = checkTargetOffset;\n/**\n * Determines whether a given number is a integer.\n * @param value The number to check.\n */\nfunction isInteger(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n/**\n * Throws if Node.js version is too low to support bigint\n */\nfunction bigIntAndBufferInt64Check(bufferMethod) {\n    if (typeof BigInt === 'undefined') {\n        throw new Error('Platform does not support JS BigInt type.');\n    }\n    if (typeof buffer_1.Buffer.prototype[bufferMethod] === 'undefined') {\n        throw new Error(`Platform does not support Buffer.prototype.${bufferMethod}.`);\n    }\n}\nexports.bigIntAndBufferInt64Check = bigIntAndBufferInt64Check;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}