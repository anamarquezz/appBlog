{"ast":null,"code":"'use strict';\n/**\n * `editor` type prompt\n */\n\nconst chalk = require('chalk');\n\nconst {\n  editAsync\n} = require('external-editor');\n\nconst Base = require('./base');\n\nconst observe = require('../utils/events');\n\nconst {\n  Subject\n} = require('rxjs');\n\nclass EditorPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n  _run(cb) {\n    this.done = cb;\n    this.editorResult = new Subject(); // Open Editor on \"line\" (Enter Key)\n\n    const events = observe(this.rl);\n    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this)); // Trigger Validation when editor closes\n\n    const validation = this.handleSubmitEvents(this.editorResult);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this)); // Prevents default from being printed on screen (can look weird with multiple lines)\n\n    this.currentText = this.opt.default;\n    this.opt.default = null; // Init\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {EditorPrompt} self\n   */\n\n\n  render(error) {\n    let bottomContent = '';\n    let message = this.getQuestion();\n\n    if (this.status === 'answered') {\n      message += chalk.dim('Received');\n    } else {\n      message += chalk.dim('Press <enter> to launch your preferred editor.');\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n  /**\n   * Launch $EDITOR on user press enter\n   */\n\n\n  startExternalEditor() {\n    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing\n    this.rl.pause();\n    editAsync(this.currentText, this.endExternalEditor.bind(this));\n  }\n\n  endExternalEditor(error, result) {\n    this.rl.resume();\n\n    if (error) {\n      this.editorResult.error(error);\n    } else {\n      this.editorResult.next(result);\n    }\n  }\n\n  onEnd(state) {\n    this.editorResult.unsubscribe();\n    this.lineSubscription.unsubscribe();\n    this.answer = state.value;\n    this.status = 'answered'; // Re-render prompt\n\n    this.render();\n    this.screen.done();\n    this.done(this.answer);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n}\n\nmodule.exports = EditorPrompt;","map":{"version":3,"names":["chalk","require","editAsync","Base","observe","Subject","EditorPrompt","_run","cb","done","editorResult","events","rl","lineSubscription","line","subscribe","startExternalEditor","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","currentText","opt","default","render","bottomContent","message","getQuestion","status","dim","red","screen","pause","endExternalEditor","result","resume","next","state","unsubscribe","answer","value","isValid","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/inquirer/lib/prompts/editor.js"],"sourcesContent":["'use strict';\n/**\n * `editor` type prompt\n */\n\nconst chalk = require('chalk');\nconst { editAsync } = require('external-editor');\nconst Base = require('./base');\nconst observe = require('../utils/events');\nconst { Subject } = require('rxjs');\n\nclass EditorPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    this.editorResult = new Subject();\n\n    // Open Editor on \"line\" (Enter Key)\n    const events = observe(this.rl);\n    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));\n\n    // Trigger Validation when editor closes\n    const validation = this.handleSubmitEvents(this.editorResult);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    // Prevents default from being printed on screen (can look weird with multiple lines)\n    this.currentText = this.opt.default;\n    this.opt.default = null;\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {EditorPrompt} self\n   */\n\n  render(error) {\n    let bottomContent = '';\n    let message = this.getQuestion();\n\n    if (this.status === 'answered') {\n      message += chalk.dim('Received');\n    } else {\n      message += chalk.dim('Press <enter> to launch your preferred editor.');\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * Launch $EDITOR on user press enter\n   */\n\n  startExternalEditor() {\n    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing\n    this.rl.pause();\n    editAsync(this.currentText, this.endExternalEditor.bind(this));\n  }\n\n  endExternalEditor(error, result) {\n    this.rl.resume();\n    if (error) {\n      this.editorResult.error(error);\n    } else {\n      this.editorResult.next(result);\n    }\n  }\n\n  onEnd(state) {\n    this.editorResult.unsubscribe();\n    this.lineSubscription.unsubscribe();\n    this.answer = state.value;\n    this.status = 'answered';\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(this.answer);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n}\n\nmodule.exports = EditorPrompt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}