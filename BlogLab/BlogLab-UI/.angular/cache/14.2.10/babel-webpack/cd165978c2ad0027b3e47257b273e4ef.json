{"ast":null,"code":"'use strict';\n\nvar licenses = [].concat(require('spdx-license-ids')).concat(require('spdx-license-ids/deprecated'));\n\nvar exceptions = require('spdx-exceptions');\n\nmodule.exports = function (source) {\n  var index = 0;\n\n  function hasMore() {\n    return index < source.length;\n  } // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n\n\n  function read(value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index);\n      var match = chars.match(value);\n\n      if (match) {\n        index += match[0].length;\n        return match[0];\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length;\n        return value;\n      }\n    }\n  }\n\n  function skipWhitespace() {\n    read(/[ ]*/);\n  }\n\n  function operator() {\n    var string;\n    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+'];\n\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i]);\n\n      if (string) {\n        break;\n      }\n    }\n\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`');\n    }\n\n    return string && {\n      type: 'OPERATOR',\n      string: string\n    };\n  }\n\n  function idstring() {\n    return read(/[A-Za-z0-9-.]+/);\n  }\n\n  function expectIdstring() {\n    var string = idstring();\n\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index);\n    }\n\n    return string;\n  }\n\n  function documentRef() {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring();\n      return {\n        type: 'DOCUMENTREF',\n        string: string\n      };\n    }\n  }\n\n  function licenseRef() {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring();\n      return {\n        type: 'LICENSEREF',\n        string: string\n      };\n    }\n  }\n\n  function identifier() {\n    var begin = index;\n    var string = idstring();\n\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      };\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      };\n    }\n\n    index = begin;\n  } // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n\n\n  function parseToken() {\n    // Ordering matters\n    return operator() || documentRef() || licenseRef() || identifier();\n  }\n\n  var tokens = [];\n\n  while (hasMore()) {\n    skipWhitespace();\n\n    if (!hasMore()) {\n      break;\n    }\n\n    var token = parseToken();\n\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] + '` at offset ' + index);\n    }\n\n    tokens.push(token);\n  }\n\n  return tokens;\n};","map":{"version":3,"names":["licenses","concat","require","exceptions","module","exports","source","index","hasMore","length","read","value","RegExp","chars","slice","match","indexOf","skipWhitespace","operator","string","possibilities","i","Error","type","idstring","expectIdstring","documentRef","licenseRef","identifier","begin","parseToken","tokens","token","push"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/spdx-expression-parse/scan.js"],"sourcesContent":["'use strict'\n\nvar licenses = []\n  .concat(require('spdx-license-ids'))\n  .concat(require('spdx-license-ids/deprecated'))\nvar exceptions = require('spdx-exceptions')\n\nmodule.exports = function (source) {\n  var index = 0\n\n  function hasMore () {\n    return index < source.length\n  }\n\n  // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n  function read (value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index)\n      var match = chars.match(value)\n      if (match) {\n        index += match[0].length\n        return match[0]\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length\n        return value\n      }\n    }\n  }\n\n  function skipWhitespace () {\n    read(/[ ]*/)\n  }\n\n  function operator () {\n    var string\n    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+']\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i])\n      if (string) {\n        break\n      }\n    }\n\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`')\n    }\n\n    return string && {\n      type: 'OPERATOR',\n      string: string\n    }\n  }\n\n  function idstring () {\n    return read(/[A-Za-z0-9-.]+/)\n  }\n\n  function expectIdstring () {\n    var string = idstring()\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index)\n    }\n    return string\n  }\n\n  function documentRef () {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring()\n      return { type: 'DOCUMENTREF', string: string }\n    }\n  }\n\n  function licenseRef () {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring()\n      return { type: 'LICENSEREF', string: string }\n    }\n  }\n\n  function identifier () {\n    var begin = index\n    var string = idstring()\n\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      }\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      }\n    }\n\n    index = begin\n  }\n\n  // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n  function parseToken () {\n    // Ordering matters\n    return (\n      operator() ||\n      documentRef() ||\n      licenseRef() ||\n      identifier()\n    )\n  }\n\n  var tokens = []\n  while (hasMore()) {\n    skipWhitespace()\n    if (!hasMore()) {\n      break\n    }\n\n    var token = parseToken()\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] +\n                      '` at offset ' + index)\n    }\n\n    tokens.push(token)\n  }\n  return tokens\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}