{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fileBufferToString = exports.fileBuffer = exports.stringToFileBuffer = void 0;\n\nfunction stringToFileBuffer(str) {\n  // If we're in Node...\n  if (typeof Buffer !== 'undefined' && typeof Buffer.from === 'function') {\n    const buf = Buffer.from(str);\n    const ab = new ArrayBuffer(buf.length);\n    const view = new Uint8Array(ab);\n\n    for (let i = 0; i < buf.length; ++i) {\n      view[i] = buf[i];\n    }\n\n    return ab;\n  } else if (typeof TextEncoder !== 'undefined') {\n    // Modern browsers implement TextEncode.\n    return new TextEncoder('utf-8').encode(str).buffer;\n  } else {\n    // Slowest method but sure to be compatible with every platform.\n    const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n\n    const bufView = new Uint16Array(buf);\n\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n      bufView[i] = str.charCodeAt(i);\n    }\n\n    return buf;\n  }\n}\n\nexports.stringToFileBuffer = stringToFileBuffer;\n\nconst fileBuffer = (strings, ...values) => {\n  return stringToFileBuffer(String.raw(strings, ...values));\n};\n\nexports.fileBuffer = fileBuffer;\n\nfunction fileBufferToString(fileBuffer) {\n  if (fileBuffer.toString.length == 1) {\n    return fileBuffer.toString('utf-8');\n  } else if (typeof Buffer !== 'undefined') {\n    return Buffer.from(fileBuffer).toString('utf-8');\n  } else if (typeof TextDecoder !== 'undefined') {\n    // Modern browsers implement TextEncode.\n    return new TextDecoder('utf-8').decode(new Uint8Array(fileBuffer));\n  } else {\n    // Slowest method but sure to be compatible with every platform.\n    const bufView = new Uint8Array(fileBuffer);\n    const bufLength = bufView.length;\n    let result = '';\n    let chunkLength = Math.pow(2, 16) - 1; // We have to chunk it because String.fromCharCode.apply will throw\n    // `Maximum call stack size exceeded` on big inputs.\n\n    for (let i = 0; i < bufLength; i += chunkLength) {\n      if (i + chunkLength > bufLength) {\n        chunkLength = bufLength - i;\n      }\n\n      result += String.fromCharCode.apply(null, [...bufView.subarray(i, i + chunkLength)]);\n    }\n\n    return result;\n  }\n}\n\nexports.fileBufferToString = fileBufferToString;","map":{"version":3,"names":["Object","defineProperty","exports","value","fileBufferToString","fileBuffer","stringToFileBuffer","str","Buffer","from","buf","ab","ArrayBuffer","length","view","Uint8Array","i","TextEncoder","encode","buffer","bufView","Uint16Array","strLen","charCodeAt","strings","values","String","raw","toString","TextDecoder","decode","bufLength","result","chunkLength","Math","pow","fromCharCode","apply","subarray"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/src/virtual-fs/host/buffer.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fileBufferToString = exports.fileBuffer = exports.stringToFileBuffer = void 0;\nfunction stringToFileBuffer(str) {\n    // If we're in Node...\n    if (typeof Buffer !== 'undefined' && typeof Buffer.from === 'function') {\n        const buf = Buffer.from(str);\n        const ab = new ArrayBuffer(buf.length);\n        const view = new Uint8Array(ab);\n        for (let i = 0; i < buf.length; ++i) {\n            view[i] = buf[i];\n        }\n        return ab;\n    }\n    else if (typeof TextEncoder !== 'undefined') {\n        // Modern browsers implement TextEncode.\n        return new TextEncoder('utf-8').encode(str).buffer;\n    }\n    else {\n        // Slowest method but sure to be compatible with every platform.\n        const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        const bufView = new Uint16Array(buf);\n        for (let i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    }\n}\nexports.stringToFileBuffer = stringToFileBuffer;\nconst fileBuffer = (strings, ...values) => {\n    return stringToFileBuffer(String.raw(strings, ...values));\n};\nexports.fileBuffer = fileBuffer;\nfunction fileBufferToString(fileBuffer) {\n    if (fileBuffer.toString.length == 1) {\n        return fileBuffer.toString('utf-8');\n    }\n    else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(fileBuffer).toString('utf-8');\n    }\n    else if (typeof TextDecoder !== 'undefined') {\n        // Modern browsers implement TextEncode.\n        return new TextDecoder('utf-8').decode(new Uint8Array(fileBuffer));\n    }\n    else {\n        // Slowest method but sure to be compatible with every platform.\n        const bufView = new Uint8Array(fileBuffer);\n        const bufLength = bufView.length;\n        let result = '';\n        let chunkLength = Math.pow(2, 16) - 1;\n        // We have to chunk it because String.fromCharCode.apply will throw\n        // `Maximum call stack size exceeded` on big inputs.\n        for (let i = 0; i < bufLength; i += chunkLength) {\n            if (i + chunkLength > bufLength) {\n                chunkLength = bufLength - i;\n            }\n            result += String.fromCharCode.apply(null, [...bufView.subarray(i, i + chunkLength)]);\n        }\n        return result;\n    }\n}\nexports.fileBufferToString = fileBufferToString;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}