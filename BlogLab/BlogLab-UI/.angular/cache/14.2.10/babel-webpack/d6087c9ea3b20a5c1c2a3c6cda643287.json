{"ast":null,"code":"/* eslint-disable max-len */\n'use strict';\n\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : '';\n\nconst maybeEncode = arg => arg ? encodeURIComponent(arg) : '';\n\nconst defaults = {\n  sshtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    editpath,\n    path\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', editpath, '/', maybeEncode(committish || 'master'), '/', path)}`,\n  browsetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({\n    domain,\n    user,\n    project,\n    treepath,\n    committish\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({\n    type,\n    user,\n    project,\n    committish\n  }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    user,\n    project,\n    committish\n  }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    user,\n    project\n  }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n};\nconst gitHosts = {};\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  editpath: 'edit',\n  filetemplate: ({\n    auth,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5);\n\n    if (type && type !== 'tree') {\n      return;\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1);\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish\n    };\n  }\n});\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  editpath: '?mode=edit',\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    editpath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish || 'master'), '/', path, editpath)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    if (['get'].includes(aux)) {\n      return;\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  editpath: '-/edit',\n  httpstemplate: ({\n    auth,\n    domain,\n    user,\n    project,\n    committish\n  }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    const path = url.pathname.slice(1);\n\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return;\n    }\n\n    const segments = path.split('/');\n    let project = segments.pop();\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    const user = segments.join('/');\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  editpath: 'edit',\n  sshtemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    editpath\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', maybeEncode(committish))}/${editpath}`,\n  browsetemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({\n    domain,\n    project,\n    committish,\n    path,\n    hashformat\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({\n    user,\n    project,\n    committish,\n    path\n  }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({\n    type,\n    project,\n    committish\n  }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({\n    project,\n    committish\n  }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({\n    domain,\n    project\n  }) => `https://${domain}/${project}`,\n  gittemplate: ({\n    domain,\n    project,\n    committish\n  }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    project,\n    committish\n  }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    if (aux === 'raw') {\n      return;\n    }\n\n    if (!project) {\n      if (!user) {\n        return;\n      }\n\n      project = user;\n      user = null;\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment);\n  }\n});\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    treepath,\n    path,\n    fragment,\n    hashformat\n  }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  filetemplate: ({\n    domain,\n    user,\n    project,\n    committish,\n    path\n  }) => `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`,\n  httpstemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({\n    domain,\n    user,\n    project,\n    committish\n  }) => `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`,\n  bugstemplate: ({\n    domain,\n    user,\n    project\n  }) => `https://todo.sr.ht/${user}/${project}`,\n  docstemplate: ({\n    domain,\n    user,\n    project,\n    treepath,\n    committish\n  }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4); // tarball url\n\n    if (['archive'].includes(aux)) {\n      return;\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\nconst names = Object.keys(gitHosts);\ngitHosts.byShortcut = {};\ngitHosts.byDomain = {};\n\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name;\n  gitHosts.byDomain[gitHosts[name].domain] = name;\n}\n\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}\n\nmodule.exports = gitHosts;","map":{"version":3,"names":["maybeJoin","args","every","arg","join","maybeEncode","encodeURIComponent","defaults","sshtemplate","domain","user","project","committish","sshurltemplate","edittemplate","editpath","path","browsetemplate","treepath","browsefiletemplate","fragment","hashformat","docstemplate","httpstemplate","auth","filetemplate","shortcuttemplate","type","pathtemplate","bugstemplate","formatHashFragment","gitHosts","github","Object","assign","protocols","gittemplate","tarballtemplate","extract","url","pathname","split","hash","slice","endsWith","bitbucket","aux","includes","gitlab","segments","pop","gist","sourcehut","names","keys","byShortcut","byDomain","name","toLowerCase","replace","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/hosted-git-info/lib/git-host-info.js"],"sourcesContent":["/* eslint-disable max-len */\n'use strict'\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({ domain, user, project, committish, editpath, path }) => `https://${domain}/${user}/${project}${maybeJoin('/', editpath, '/', maybeEncode(committish || 'master'), '/', path)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment,\n}\n\nconst gitHosts = {}\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  editpath: 'edit',\n  filetemplate: ({ auth, user, project, committish, path }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  },\n})\n\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  editpath: '?mode=edit',\n  edittemplate: ({ domain, user, project, committish, treepath, path, editpath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish || 'master'), '/', path, editpath)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n})\n\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  editpath: '-/edit',\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n})\n\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  editpath: 'edit',\n  sshtemplate: ({ domain, project, committish }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  edittemplate: ({ domain, user, project, committish, editpath }) => `https://${domain}/${user}/${project}${maybeJoin('/', maybeEncode(committish))}/${editpath}`,\n  browsetemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, project, committish, path, hashformat }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) => `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  },\n})\n\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`,\n  httpstemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`,\n  bugstemplate: ({ domain, user, project }) => `https://todo.sr.ht/${user}/${project}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n})\n\nconst names = Object.keys(gitHosts)\ngitHosts.byShortcut = {}\ngitHosts.byDomain = {}\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name\n  gitHosts.byDomain[gitHosts[name].domain] = name\n}\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n\nmodule.exports = gitHosts\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}