{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readJsonFile = void 0;\n\nconst schematics_1 = require(\"@angular-devkit/schematics\");\n\nconst fs_1 = require(\"fs\");\n\nconst jsonc_parser_1 = require(\"jsonc-parser\");\n\nfunction readJsonFile(path) {\n  if (!(0, fs_1.existsSync)(path)) {\n    throw new schematics_1.FileDoesNotExistException(path);\n  }\n\n  const errors = [];\n  const content = (0, jsonc_parser_1.parse)((0, fs_1.readFileSync)(path, 'utf-8'), errors, {\n    allowTrailingComma: true\n  });\n\n  if (errors.length) {\n    const {\n      error,\n      offset\n    } = errors[0];\n    throw new Error(`Failed to parse \"${path}\" as JSON AST Object. ${(0, jsonc_parser_1.printParseErrorCode)(error)} at location: ${offset}.`);\n  }\n\n  return content;\n}\n\nexports.readJsonFile = readJsonFile;","map":{"version":3,"names":["Object","defineProperty","exports","value","readJsonFile","schematics_1","require","fs_1","jsonc_parser_1","path","existsSync","FileDoesNotExistException","errors","content","parse","readFileSync","allowTrailingComma","length","error","offset","Error","printParseErrorCode"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/schematics/tools/file-system-utility.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readJsonFile = void 0;\nconst schematics_1 = require(\"@angular-devkit/schematics\");\nconst fs_1 = require(\"fs\");\nconst jsonc_parser_1 = require(\"jsonc-parser\");\nfunction readJsonFile(path) {\n    if (!(0, fs_1.existsSync)(path)) {\n        throw new schematics_1.FileDoesNotExistException(path);\n    }\n    const errors = [];\n    const content = (0, jsonc_parser_1.parse)((0, fs_1.readFileSync)(path, 'utf-8'), errors, { allowTrailingComma: true });\n    if (errors.length) {\n        const { error, offset } = errors[0];\n        throw new Error(`Failed to parse \"${path}\" as JSON AST Object. ${(0, jsonc_parser_1.printParseErrorCode)(error)} at location: ${offset}.`);\n    }\n    return content;\n}\nexports.readJsonFile = readJsonFile;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,4BAAD,CAA5B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,IAAD,CAApB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,cAAD,CAA9B;;AACA,SAASF,YAAT,CAAsBK,IAAtB,EAA4B;EACxB,IAAI,CAAC,CAAC,GAAGF,IAAI,CAACG,UAAT,EAAqBD,IAArB,CAAL,EAAiC;IAC7B,MAAM,IAAIJ,YAAY,CAACM,yBAAjB,CAA2CF,IAA3C,CAAN;EACH;;EACD,MAAMG,MAAM,GAAG,EAAf;EACA,MAAMC,OAAO,GAAG,CAAC,GAAGL,cAAc,CAACM,KAAnB,EAA0B,CAAC,GAAGP,IAAI,CAACQ,YAAT,EAAuBN,IAAvB,EAA6B,OAA7B,CAA1B,EAAiEG,MAAjE,EAAyE;IAAEI,kBAAkB,EAAE;EAAtB,CAAzE,CAAhB;;EACA,IAAIJ,MAAM,CAACK,MAAX,EAAmB;IACf,MAAM;MAAEC,KAAF;MAASC;IAAT,IAAoBP,MAAM,CAAC,CAAD,CAAhC;IACA,MAAM,IAAIQ,KAAJ,CAAW,oBAAmBX,IAAK,yBAAwB,CAAC,GAAGD,cAAc,CAACa,mBAAnB,EAAwCH,KAAxC,CAA+C,iBAAgBC,MAAO,GAAjI,CAAN;EACH;;EACD,OAAON,OAAP;AACH;;AACDX,OAAO,CAACE,YAAR,GAAuBA,YAAvB"},"metadata":{},"sourceType":"script"}