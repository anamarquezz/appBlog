{"ast":null,"code":"'use strict';\n\nconst url = require('url');\n\nfunction packageName(href) {\n  try {\n    let basePath = new url.URL(href).pathname.slice(1);\n\n    if (!basePath.match(/^-/)) {\n      basePath = basePath.split('/');\n      var index = basePath.indexOf('_rewrite');\n\n      if (index === -1) {\n        index = basePath.length - 1;\n      } else {\n        index++;\n      }\n\n      return decodeURIComponent(basePath[index]);\n    }\n  } catch (_) {// this is ok\n  }\n}\n\nclass HttpErrorBase extends Error {\n  constructor(method, res, body, spec) {\n    super();\n    this.name = this.constructor.name;\n    this.headers = res.headers.raw();\n    this.statusCode = res.status;\n    this.code = `E${res.status}`;\n    this.method = method;\n    this.uri = res.url;\n    this.body = body;\n    this.pkgid = spec ? spec.toString() : packageName(res.url);\n  }\n\n}\n\nmodule.exports.HttpErrorBase = HttpErrorBase;\n\nclass HttpErrorGeneral extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = `${res.status} ${res.statusText} - ${this.method.toUpperCase()} ${this.spec || this.uri}${body && body.error ? ' - ' + body.error : ''}`;\n    Error.captureStackTrace(this, HttpErrorGeneral);\n  }\n\n}\n\nmodule.exports.HttpErrorGeneral = HttpErrorGeneral;\n\nclass HttpErrorAuthOTP extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = 'OTP required for authentication';\n    this.code = 'EOTP';\n    Error.captureStackTrace(this, HttpErrorAuthOTP);\n  }\n\n}\n\nmodule.exports.HttpErrorAuthOTP = HttpErrorAuthOTP;\n\nclass HttpErrorAuthIPAddress extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = 'Login is not allowed from your IP address';\n    this.code = 'EAUTHIP';\n    Error.captureStackTrace(this, HttpErrorAuthIPAddress);\n  }\n\n}\n\nmodule.exports.HttpErrorAuthIPAddress = HttpErrorAuthIPAddress;\n\nclass HttpErrorAuthUnknown extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = 'Unable to authenticate, need: ' + res.headers.get('www-authenticate');\n    Error.captureStackTrace(this, HttpErrorAuthUnknown);\n  }\n\n}\n\nmodule.exports.HttpErrorAuthUnknown = HttpErrorAuthUnknown;","map":{"version":3,"names":["url","require","packageName","href","basePath","URL","pathname","slice","match","split","index","indexOf","length","decodeURIComponent","_","HttpErrorBase","Error","constructor","method","res","body","spec","name","headers","raw","statusCode","status","code","uri","pkgid","toString","module","exports","HttpErrorGeneral","message","statusText","toUpperCase","error","captureStackTrace","HttpErrorAuthOTP","HttpErrorAuthIPAddress","HttpErrorAuthUnknown","get"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/npm-registry-fetch/lib/errors.js"],"sourcesContent":["'use strict'\n\nconst url = require('url')\n\nfunction packageName (href) {\n  try {\n    let basePath = new url.URL(href).pathname.slice(1)\n    if (!basePath.match(/^-/)) {\n      basePath = basePath.split('/')\n      var index = basePath.indexOf('_rewrite')\n      if (index === -1) {\n        index = basePath.length - 1\n      } else {\n        index++\n      }\n      return decodeURIComponent(basePath[index])\n    }\n  } catch (_) {\n    // this is ok\n  }\n}\n\nclass HttpErrorBase extends Error {\n  constructor (method, res, body, spec) {\n    super()\n    this.name = this.constructor.name\n    this.headers = res.headers.raw()\n    this.statusCode = res.status\n    this.code = `E${res.status}`\n    this.method = method\n    this.uri = res.url\n    this.body = body\n    this.pkgid = spec ? spec.toString() : packageName(res.url)\n  }\n}\nmodule.exports.HttpErrorBase = HttpErrorBase\n\nclass HttpErrorGeneral extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = `${res.status} ${res.statusText} - ${\n      this.method.toUpperCase()\n    } ${\n      this.spec || this.uri\n    }${\n      (body && body.error) ? ' - ' + body.error : ''\n    }`\n    Error.captureStackTrace(this, HttpErrorGeneral)\n  }\n}\nmodule.exports.HttpErrorGeneral = HttpErrorGeneral\n\nclass HttpErrorAuthOTP extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = 'OTP required for authentication'\n    this.code = 'EOTP'\n    Error.captureStackTrace(this, HttpErrorAuthOTP)\n  }\n}\nmodule.exports.HttpErrorAuthOTP = HttpErrorAuthOTP\n\nclass HttpErrorAuthIPAddress extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = 'Login is not allowed from your IP address'\n    this.code = 'EAUTHIP'\n    Error.captureStackTrace(this, HttpErrorAuthIPAddress)\n  }\n}\nmodule.exports.HttpErrorAuthIPAddress = HttpErrorAuthIPAddress\n\nclass HttpErrorAuthUnknown extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = 'Unable to authenticate, need: ' + res.headers.get('www-authenticate')\n    Error.captureStackTrace(this, HttpErrorAuthUnknown)\n  }\n}\nmodule.exports.HttpErrorAuthUnknown = HttpErrorAuthUnknown\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}