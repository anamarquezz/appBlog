{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addCommandModuleToYargs = exports.demandCommandFailureMessage = void 0;\n\nconst command_module_1 = require(\"../command-module\");\n\nexports.demandCommandFailureMessage = `You need to specify a command before moving on. Use '--help' to view the available commands.`;\n\nfunction addCommandModuleToYargs(localYargs, commandModule, context) {\n  const cmd = new commandModule(context);\n  const {\n    args: {\n      options: {\n        jsonHelp\n      }\n    },\n    workspace\n  } = context;\n  const describe = jsonHelp ? cmd.fullDescribe : cmd.describe;\n  return localYargs.command({\n    command: cmd.command,\n    aliases: cmd.aliases,\n    describe: // We cannot add custom fields in help, such as long command description which is used in AIO.\n    // Therefore, we get around this by adding a complex object as a string which we later parse when generating the help files.\n    typeof describe === 'object' ? JSON.stringify(describe) : describe,\n    deprecated: cmd.deprecated,\n    builder: argv => {\n      // Skip scope validation when running with '--json-help' since it's easier to generate the output for all commands this way.\n      const isInvalidScope = !jsonHelp && (cmd.scope === command_module_1.CommandScope.In && !workspace || cmd.scope === command_module_1.CommandScope.Out && workspace);\n\n      if (isInvalidScope) {\n        throw new command_module_1.CommandModuleError(`This command is not available when running the Angular CLI ${workspace ? 'inside' : 'outside'} a workspace.`);\n      }\n\n      return cmd.builder(argv);\n    },\n    handler: args => cmd.handler(args)\n  });\n}\n\nexports.addCommandModuleToYargs = addCommandModuleToYargs;","map":{"version":3,"names":["Object","defineProperty","exports","value","addCommandModuleToYargs","demandCommandFailureMessage","command_module_1","require","localYargs","commandModule","context","cmd","args","options","jsonHelp","workspace","describe","fullDescribe","command","aliases","JSON","stringify","deprecated","builder","argv","isInvalidScope","scope","CommandScope","In","Out","CommandModuleError","handler"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/command-builder/utilities/command.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addCommandModuleToYargs = exports.demandCommandFailureMessage = void 0;\nconst command_module_1 = require(\"../command-module\");\nexports.demandCommandFailureMessage = `You need to specify a command before moving on. Use '--help' to view the available commands.`;\nfunction addCommandModuleToYargs(localYargs, commandModule, context) {\n    const cmd = new commandModule(context);\n    const { args: { options: { jsonHelp }, }, workspace, } = context;\n    const describe = jsonHelp ? cmd.fullDescribe : cmd.describe;\n    return localYargs.command({\n        command: cmd.command,\n        aliases: cmd.aliases,\n        describe: \n        // We cannot add custom fields in help, such as long command description which is used in AIO.\n        // Therefore, we get around this by adding a complex object as a string which we later parse when generating the help files.\n        typeof describe === 'object' ? JSON.stringify(describe) : describe,\n        deprecated: cmd.deprecated,\n        builder: (argv) => {\n            // Skip scope validation when running with '--json-help' since it's easier to generate the output for all commands this way.\n            const isInvalidScope = !jsonHelp &&\n                ((cmd.scope === command_module_1.CommandScope.In && !workspace) ||\n                    (cmd.scope === command_module_1.CommandScope.Out && workspace));\n            if (isInvalidScope) {\n                throw new command_module_1.CommandModuleError(`This command is not available when running the Angular CLI ${workspace ? 'inside' : 'outside'} a workspace.`);\n            }\n            return cmd.builder(argv);\n        },\n        handler: (args) => cmd.handler(args),\n    });\n}\nexports.addCommandModuleToYargs = addCommandModuleToYargs;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkCF,OAAO,CAACG,2BAAR,GAAsC,KAAK,CAA7E;;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,mBAAD,CAAhC;;AACAL,OAAO,CAACG,2BAAR,GAAuC,8FAAvC;;AACA,SAASD,uBAAT,CAAiCI,UAAjC,EAA6CC,aAA7C,EAA4DC,OAA5D,EAAqE;EACjE,MAAMC,GAAG,GAAG,IAAIF,aAAJ,CAAkBC,OAAlB,CAAZ;EACA,MAAM;IAAEE,IAAI,EAAE;MAAEC,OAAO,EAAE;QAAEC;MAAF;IAAX,CAAR;IAAoCC;EAApC,IAAmDL,OAAzD;EACA,MAAMM,QAAQ,GAAGF,QAAQ,GAAGH,GAAG,CAACM,YAAP,GAAsBN,GAAG,CAACK,QAAnD;EACA,OAAOR,UAAU,CAACU,OAAX,CAAmB;IACtBA,OAAO,EAAEP,GAAG,CAACO,OADS;IAEtBC,OAAO,EAAER,GAAG,CAACQ,OAFS;IAGtBH,QAAQ,EACR;IACA;IACA,OAAOA,QAAP,KAAoB,QAApB,GAA+BI,IAAI,CAACC,SAAL,CAAeL,QAAf,CAA/B,GAA0DA,QANpC;IAOtBM,UAAU,EAAEX,GAAG,CAACW,UAPM;IAQtBC,OAAO,EAAGC,IAAD,IAAU;MACf;MACA,MAAMC,cAAc,GAAG,CAACX,QAAD,KACjBH,GAAG,CAACe,KAAJ,KAAcpB,gBAAgB,CAACqB,YAAjB,CAA8BC,EAA5C,IAAkD,CAACb,SAApD,IACIJ,GAAG,CAACe,KAAJ,KAAcpB,gBAAgB,CAACqB,YAAjB,CAA8BE,GAA5C,IAAmDd,SAFrC,CAAvB;;MAGA,IAAIU,cAAJ,EAAoB;QAChB,MAAM,IAAInB,gBAAgB,CAACwB,kBAArB,CAAyC,8DAA6Df,SAAS,GAAG,QAAH,GAAc,SAAU,eAAvI,CAAN;MACH;;MACD,OAAOJ,GAAG,CAACY,OAAJ,CAAYC,IAAZ,CAAP;IACH,CAjBqB;IAkBtBO,OAAO,EAAGnB,IAAD,IAAUD,GAAG,CAACoB,OAAJ,CAAYnB,IAAZ;EAlBG,CAAnB,CAAP;AAoBH;;AACDV,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC"},"metadata":{},"sourceType":"script"}