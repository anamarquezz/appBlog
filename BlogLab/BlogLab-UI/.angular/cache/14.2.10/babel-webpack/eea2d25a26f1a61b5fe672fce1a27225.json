{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypesOfSchema = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst allTypes = ['string', 'integer', 'number', 'object', 'array', 'boolean', 'null'];\n\nfunction getTypesOfSchema(schema) {\n  if (!schema) {\n    return new Set();\n  }\n\n  if (schema === true) {\n    return new Set(allTypes);\n  }\n\n  let potentials;\n\n  if (typeof schema.type === 'string') {\n    potentials = new Set([schema.type]);\n  } else if (Array.isArray(schema.type)) {\n    potentials = new Set(schema.type);\n  } else if ((0, utils_1.isJsonArray)(schema.enum)) {\n    potentials = new Set(); // Gather the type of each enum values, and use that as a starter for potential types.\n\n    for (const v of schema.enum) {\n      switch (typeof v) {\n        case 'string':\n        case 'number':\n        case 'boolean':\n          potentials.add(typeof v);\n          break;\n\n        case 'object':\n          if (Array.isArray(v)) {\n            potentials.add('array');\n          } else if (v === null) {\n            potentials.add('null');\n          } else {\n            potentials.add('object');\n          }\n\n          break;\n      }\n    }\n  } else {\n    potentials = new Set(allTypes);\n  }\n\n  if ((0, utils_1.isJsonObject)(schema.not)) {\n    const notTypes = getTypesOfSchema(schema.not);\n    potentials = new Set([...potentials].filter(p => !notTypes.has(p)));\n  }\n\n  if (Array.isArray(schema.allOf)) {\n    for (const sub of schema.allOf) {\n      const types = getTypesOfSchema(sub);\n      potentials = new Set([...types].filter(t => potentials.has(t)));\n    }\n  }\n\n  if (Array.isArray(schema.oneOf)) {\n    let options = new Set();\n\n    for (const sub of schema.oneOf) {\n      const types = getTypesOfSchema(sub);\n      options = new Set([...options, ...types]);\n    }\n\n    potentials = new Set([...options].filter(o => potentials.has(o)));\n  }\n\n  if (Array.isArray(schema.anyOf)) {\n    let options = new Set();\n\n    for (const sub of schema.anyOf) {\n      const types = getTypesOfSchema(sub);\n      options = new Set([...options, ...types]);\n    }\n\n    potentials = new Set([...options].filter(o => potentials.has(o)));\n  }\n\n  if (schema.properties) {\n    potentials.add('object');\n  } else if (schema.items) {\n    potentials.add('array');\n  }\n\n  return potentials;\n}\n\nexports.getTypesOfSchema = getTypesOfSchema;","map":{"version":3,"names":["Object","defineProperty","exports","value","getTypesOfSchema","utils_1","require","allTypes","schema","Set","potentials","type","Array","isArray","isJsonArray","enum","v","add","isJsonObject","not","notTypes","filter","p","has","allOf","sub","types","t","oneOf","options","o","anyOf","properties","items"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/src/json/schema/utility.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTypesOfSchema = void 0;\nconst utils_1 = require(\"../utils\");\nconst allTypes = ['string', 'integer', 'number', 'object', 'array', 'boolean', 'null'];\nfunction getTypesOfSchema(schema) {\n    if (!schema) {\n        return new Set();\n    }\n    if (schema === true) {\n        return new Set(allTypes);\n    }\n    let potentials;\n    if (typeof schema.type === 'string') {\n        potentials = new Set([schema.type]);\n    }\n    else if (Array.isArray(schema.type)) {\n        potentials = new Set(schema.type);\n    }\n    else if ((0, utils_1.isJsonArray)(schema.enum)) {\n        potentials = new Set();\n        // Gather the type of each enum values, and use that as a starter for potential types.\n        for (const v of schema.enum) {\n            switch (typeof v) {\n                case 'string':\n                case 'number':\n                case 'boolean':\n                    potentials.add(typeof v);\n                    break;\n                case 'object':\n                    if (Array.isArray(v)) {\n                        potentials.add('array');\n                    }\n                    else if (v === null) {\n                        potentials.add('null');\n                    }\n                    else {\n                        potentials.add('object');\n                    }\n                    break;\n            }\n        }\n    }\n    else {\n        potentials = new Set(allTypes);\n    }\n    if ((0, utils_1.isJsonObject)(schema.not)) {\n        const notTypes = getTypesOfSchema(schema.not);\n        potentials = new Set([...potentials].filter((p) => !notTypes.has(p)));\n    }\n    if (Array.isArray(schema.allOf)) {\n        for (const sub of schema.allOf) {\n            const types = getTypesOfSchema(sub);\n            potentials = new Set([...types].filter((t) => potentials.has(t)));\n        }\n    }\n    if (Array.isArray(schema.oneOf)) {\n        let options = new Set();\n        for (const sub of schema.oneOf) {\n            const types = getTypesOfSchema(sub);\n            options = new Set([...options, ...types]);\n        }\n        potentials = new Set([...options].filter((o) => potentials.has(o)));\n    }\n    if (Array.isArray(schema.anyOf)) {\n        let options = new Set();\n        for (const sub of schema.anyOf) {\n            const types = getTypesOfSchema(sub);\n            options = new Set([...options, ...types]);\n        }\n        potentials = new Set([...options].filter((o) => potentials.has(o)));\n    }\n    if (schema.properties) {\n        potentials.add('object');\n    }\n    else if (schema.items) {\n        potentials.add('array');\n    }\n    return potentials;\n}\nexports.getTypesOfSchema = getTypesOfSchema;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}