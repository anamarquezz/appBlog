{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isJobHandler = exports.JobState = exports.JobOutboundMessageKind = exports.JobInboundMessageKind = void 0;\n/**\n * Messages that can be sent TO a job. The job needs to listen to those.\n */\n\nvar JobInboundMessageKind;\n\n(function (JobInboundMessageKind) {\n  JobInboundMessageKind[\"Ping\"] = \"ip\";\n  JobInboundMessageKind[\"Stop\"] = \"is\"; // Channel specific messages.\n\n  JobInboundMessageKind[\"Input\"] = \"in\"; // Input channel does not allow completion / error. Erroring this will just close the Subject\n  // but not notify the job.\n})(JobInboundMessageKind = exports.JobInboundMessageKind || (exports.JobInboundMessageKind = {}));\n/**\n * Kind of messages that can be outputted from a job.\n */\n\n\nvar JobOutboundMessageKind;\n\n(function (JobOutboundMessageKind) {\n  // Lifecycle specific messages.\n  JobOutboundMessageKind[\"OnReady\"] = \"c\";\n  JobOutboundMessageKind[\"Start\"] = \"s\";\n  JobOutboundMessageKind[\"End\"] = \"e\";\n  JobOutboundMessageKind[\"Pong\"] = \"p\"; // Feedback messages.\n\n  JobOutboundMessageKind[\"Output\"] = \"o\"; // Channel specific messages.\n\n  JobOutboundMessageKind[\"ChannelCreate\"] = \"cn\";\n  JobOutboundMessageKind[\"ChannelMessage\"] = \"cm\";\n  JobOutboundMessageKind[\"ChannelError\"] = \"ce\";\n  JobOutboundMessageKind[\"ChannelComplete\"] = \"cc\";\n})(JobOutboundMessageKind = exports.JobOutboundMessageKind || (exports.JobOutboundMessageKind = {}));\n/**\n * The state of a job. These are changed as the job reports a new state through its messages.\n */\n\n\nvar JobState;\n\n(function (JobState) {\n  /**\n   * The job was queued and is waiting to start.\n   */\n  JobState[\"Queued\"] = \"queued\";\n  /**\n   * The job description was found, its dependencies (see \"Synchronizing and Dependencies\")\n   * are done running, and the job's argument is validated and the job's code will be executed.\n   */\n\n  JobState[\"Ready\"] = \"ready\";\n  /**\n   * The job has been started. The job implementation is expected to send this as soon as its\n   * work is starting.\n   */\n\n  JobState[\"Started\"] = \"started\";\n  /**\n   * The job has ended and is done running.\n   */\n\n  JobState[\"Ended\"] = \"ended\";\n  /**\n   * An error occured and the job stopped because of internal state.\n   */\n\n  JobState[\"Errored\"] = \"errored\";\n})(JobState = exports.JobState || (exports.JobState = {}));\n\nfunction isJobHandler(value) {\n  const job = value;\n  return typeof job == 'function' && typeof job.jobDescription == 'object' && job.jobDescription !== null;\n}\n\nexports.isJobHandler = isJobHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","isJobHandler","JobState","JobOutboundMessageKind","JobInboundMessageKind","job","jobDescription"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/src/experimental/jobs/api.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isJobHandler = exports.JobState = exports.JobOutboundMessageKind = exports.JobInboundMessageKind = void 0;\n/**\n * Messages that can be sent TO a job. The job needs to listen to those.\n */\nvar JobInboundMessageKind;\n(function (JobInboundMessageKind) {\n    JobInboundMessageKind[\"Ping\"] = \"ip\";\n    JobInboundMessageKind[\"Stop\"] = \"is\";\n    // Channel specific messages.\n    JobInboundMessageKind[\"Input\"] = \"in\";\n    // Input channel does not allow completion / error. Erroring this will just close the Subject\n    // but not notify the job.\n})(JobInboundMessageKind = exports.JobInboundMessageKind || (exports.JobInboundMessageKind = {}));\n/**\n * Kind of messages that can be outputted from a job.\n */\nvar JobOutboundMessageKind;\n(function (JobOutboundMessageKind) {\n    // Lifecycle specific messages.\n    JobOutboundMessageKind[\"OnReady\"] = \"c\";\n    JobOutboundMessageKind[\"Start\"] = \"s\";\n    JobOutboundMessageKind[\"End\"] = \"e\";\n    JobOutboundMessageKind[\"Pong\"] = \"p\";\n    // Feedback messages.\n    JobOutboundMessageKind[\"Output\"] = \"o\";\n    // Channel specific messages.\n    JobOutboundMessageKind[\"ChannelCreate\"] = \"cn\";\n    JobOutboundMessageKind[\"ChannelMessage\"] = \"cm\";\n    JobOutboundMessageKind[\"ChannelError\"] = \"ce\";\n    JobOutboundMessageKind[\"ChannelComplete\"] = \"cc\";\n})(JobOutboundMessageKind = exports.JobOutboundMessageKind || (exports.JobOutboundMessageKind = {}));\n/**\n * The state of a job. These are changed as the job reports a new state through its messages.\n */\nvar JobState;\n(function (JobState) {\n    /**\n     * The job was queued and is waiting to start.\n     */\n    JobState[\"Queued\"] = \"queued\";\n    /**\n     * The job description was found, its dependencies (see \"Synchronizing and Dependencies\")\n     * are done running, and the job's argument is validated and the job's code will be executed.\n     */\n    JobState[\"Ready\"] = \"ready\";\n    /**\n     * The job has been started. The job implementation is expected to send this as soon as its\n     * work is starting.\n     */\n    JobState[\"Started\"] = \"started\";\n    /**\n     * The job has ended and is done running.\n     */\n    JobState[\"Ended\"] = \"ended\";\n    /**\n     * An error occured and the job stopped because of internal state.\n     */\n    JobState[\"Errored\"] = \"errored\";\n})(JobState = exports.JobState || (exports.JobState = {}));\nfunction isJobHandler(value) {\n    const job = value;\n    return (typeof job == 'function' && typeof job.jobDescription == 'object' && job.jobDescription !== null);\n}\nexports.isJobHandler = isJobHandler;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,QAAR,GAAmBH,OAAO,CAACI,sBAAR,GAAiCJ,OAAO,CAACK,qBAAR,GAAgC,KAAK,CAAhH;AACA;AACA;AACA;;AACA,IAAIA,qBAAJ;;AACA,CAAC,UAAUA,qBAAV,EAAiC;EAC9BA,qBAAqB,CAAC,MAAD,CAArB,GAAgC,IAAhC;EACAA,qBAAqB,CAAC,MAAD,CAArB,GAAgC,IAAhC,CAF8B,CAG9B;;EACAA,qBAAqB,CAAC,OAAD,CAArB,GAAiC,IAAjC,CAJ8B,CAK9B;EACA;AACH,CAPD,EAOGA,qBAAqB,GAAGL,OAAO,CAACK,qBAAR,KAAkCL,OAAO,CAACK,qBAAR,GAAgC,EAAlE,CAP3B;AAQA;AACA;AACA;;;AACA,IAAID,sBAAJ;;AACA,CAAC,UAAUA,sBAAV,EAAkC;EAC/B;EACAA,sBAAsB,CAAC,SAAD,CAAtB,GAAoC,GAApC;EACAA,sBAAsB,CAAC,OAAD,CAAtB,GAAkC,GAAlC;EACAA,sBAAsB,CAAC,KAAD,CAAtB,GAAgC,GAAhC;EACAA,sBAAsB,CAAC,MAAD,CAAtB,GAAiC,GAAjC,CAL+B,CAM/B;;EACAA,sBAAsB,CAAC,QAAD,CAAtB,GAAmC,GAAnC,CAP+B,CAQ/B;;EACAA,sBAAsB,CAAC,eAAD,CAAtB,GAA0C,IAA1C;EACAA,sBAAsB,CAAC,gBAAD,CAAtB,GAA2C,IAA3C;EACAA,sBAAsB,CAAC,cAAD,CAAtB,GAAyC,IAAzC;EACAA,sBAAsB,CAAC,iBAAD,CAAtB,GAA4C,IAA5C;AACH,CAbD,EAaGA,sBAAsB,GAAGJ,OAAO,CAACI,sBAAR,KAAmCJ,OAAO,CAACI,sBAAR,GAAiC,EAApE,CAb5B;AAcA;AACA;AACA;;;AACA,IAAID,QAAJ;;AACA,CAAC,UAAUA,QAAV,EAAoB;EACjB;AACJ;AACA;EACIA,QAAQ,CAAC,QAAD,CAAR,GAAqB,QAArB;EACA;AACJ;AACA;AACA;;EACIA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;EACA;AACJ;AACA;AACA;;EACIA,QAAQ,CAAC,SAAD,CAAR,GAAsB,SAAtB;EACA;AACJ;AACA;;EACIA,QAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;EACA;AACJ;AACA;;EACIA,QAAQ,CAAC,SAAD,CAAR,GAAsB,SAAtB;AACH,CAvBD,EAuBGA,QAAQ,GAAGH,OAAO,CAACG,QAAR,KAAqBH,OAAO,CAACG,QAAR,GAAmB,EAAxC,CAvBd;;AAwBA,SAASD,YAAT,CAAsBD,KAAtB,EAA6B;EACzB,MAAMK,GAAG,GAAGL,KAAZ;EACA,OAAQ,OAAOK,GAAP,IAAc,UAAd,IAA4B,OAAOA,GAAG,CAACC,cAAX,IAA6B,QAAzD,IAAqED,GAAG,CAACC,cAAJ,KAAuB,IAApG;AACH;;AACDP,OAAO,CAACE,YAAR,GAAuBA,YAAvB"},"metadata":{},"sourceType":"script"}