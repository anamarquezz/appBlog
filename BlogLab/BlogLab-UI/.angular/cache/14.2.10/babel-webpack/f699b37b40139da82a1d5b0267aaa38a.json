{"ast":null,"code":"/* eslint camelcase: \"off\" */\nconst isWindows = require('./is-windows.js');\n\nconst setPATH = require('./set-path.js');\n\nconst {\n  resolve\n} = require('path');\n\nconst which = require('which');\n\nconst npm_config_node_gyp = require.resolve('node-gyp/bin/node-gyp.js');\n\nconst escape = require('./escape.js');\n\nconst makeSpawnArgs = options => {\n  const {\n    event,\n    path,\n    scriptShell = isWindows ? process.env.ComSpec || 'cmd' : 'sh',\n    binPaths,\n    env = {},\n    stdio,\n    cmd,\n    args = [],\n    stdioString = false\n  } = options;\n  const spawnEnv = setPATH(path, binPaths, { // we need to at least save the PATH environment var\n    ...process.env,\n    ...env,\n    npm_package_json: resolve(path, 'package.json'),\n    npm_lifecycle_event: event,\n    npm_lifecycle_script: cmd,\n    npm_config_node_gyp\n  });\n  let doubleEscape = false;\n  const isCmd = /(?:^|\\\\)cmd(?:\\.exe)?$/i.test(scriptShell);\n\n  if (isCmd) {\n    let initialCmd = '';\n    let insideQuotes = false;\n\n    for (let i = 0; i < cmd.length; ++i) {\n      const char = cmd.charAt(i);\n\n      if (char === ' ' && !insideQuotes) {\n        break;\n      }\n\n      initialCmd += char;\n\n      if (char === '\"' || char === \"'\") {\n        insideQuotes = !insideQuotes;\n      }\n    }\n\n    let pathToInitial;\n\n    try {\n      pathToInitial = which.sync(initialCmd, {\n        path: spawnEnv.path,\n        pathext: spawnEnv.pathext\n      }).toLowerCase();\n    } catch (err) {\n      pathToInitial = initialCmd.toLowerCase();\n    }\n\n    doubleEscape = pathToInitial.endsWith('.cmd') || pathToInitial.endsWith('.bat');\n  }\n\n  let script = cmd;\n\n  for (const arg of args) {\n    script += isCmd ? ` ${escape.cmd(arg, doubleEscape)}` : ` ${escape.sh(arg)}`;\n  }\n\n  const spawnArgs = isCmd ? ['/d', '/s', '/c', script] : ['-c', '--', script];\n  const spawnOpts = {\n    env: spawnEnv,\n    stdioString,\n    stdio,\n    cwd: path,\n    ...(isCmd ? {\n      windowsVerbatimArguments: true\n    } : {})\n  };\n  return [scriptShell, spawnArgs, spawnOpts];\n};\n\nmodule.exports = makeSpawnArgs;","map":{"version":3,"names":["isWindows","require","setPATH","resolve","which","npm_config_node_gyp","escape","makeSpawnArgs","options","event","path","scriptShell","process","env","ComSpec","binPaths","stdio","cmd","args","stdioString","spawnEnv","npm_package_json","npm_lifecycle_event","npm_lifecycle_script","doubleEscape","isCmd","test","initialCmd","insideQuotes","i","length","char","charAt","pathToInitial","sync","pathext","toLowerCase","err","endsWith","script","arg","sh","spawnArgs","spawnOpts","cwd","windowsVerbatimArguments","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@npmcli/run-script/lib/make-spawn-args.js"],"sourcesContent":["/* eslint camelcase: \"off\" */\nconst isWindows = require('./is-windows.js')\nconst setPATH = require('./set-path.js')\nconst { resolve } = require('path')\nconst which = require('which')\nconst npm_config_node_gyp = require.resolve('node-gyp/bin/node-gyp.js')\nconst escape = require('./escape.js')\n\nconst makeSpawnArgs = options => {\n  const {\n    event,\n    path,\n    scriptShell = isWindows ? process.env.ComSpec || 'cmd' : 'sh',\n    binPaths,\n    env = {},\n    stdio,\n    cmd,\n    args = [],\n    stdioString = false,\n  } = options\n\n  const spawnEnv = setPATH(path, binPaths, {\n    // we need to at least save the PATH environment var\n    ...process.env,\n    ...env,\n    npm_package_json: resolve(path, 'package.json'),\n    npm_lifecycle_event: event,\n    npm_lifecycle_script: cmd,\n    npm_config_node_gyp,\n  })\n\n  let doubleEscape = false\n  const isCmd = /(?:^|\\\\)cmd(?:\\.exe)?$/i.test(scriptShell)\n  if (isCmd) {\n    let initialCmd = ''\n    let insideQuotes = false\n    for (let i = 0; i < cmd.length; ++i) {\n      const char = cmd.charAt(i)\n      if (char === ' ' && !insideQuotes) {\n        break\n      }\n\n      initialCmd += char\n      if (char === '\"' || char === \"'\") {\n        insideQuotes = !insideQuotes\n      }\n    }\n\n    let pathToInitial\n    try {\n      pathToInitial = which.sync(initialCmd, {\n        path: spawnEnv.path,\n        pathext: spawnEnv.pathext,\n      }).toLowerCase()\n    } catch (err) {\n      pathToInitial = initialCmd.toLowerCase()\n    }\n\n    doubleEscape = pathToInitial.endsWith('.cmd') || pathToInitial.endsWith('.bat')\n  }\n\n  let script = cmd\n  for (const arg of args) {\n    script += isCmd\n      ? ` ${escape.cmd(arg, doubleEscape)}`\n      : ` ${escape.sh(arg)}`\n  }\n  const spawnArgs = isCmd\n    ? ['/d', '/s', '/c', script]\n    : ['-c', '--', script]\n\n  const spawnOpts = {\n    env: spawnEnv,\n    stdioString,\n    stdio,\n    cwd: path,\n    ...(isCmd ? { windowsVerbatimArguments: true } : {}),\n  }\n\n  return [scriptShell, spawnArgs, spawnOpts]\n}\n\nmodule.exports = makeSpawnArgs\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}