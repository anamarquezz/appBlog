{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWarningEnabled = exports.getSchematicDefaults = exports.getConfiguredPackageManager = exports.getProjectByCwd = exports.validateWorkspace = exports.getWorkspaceRaw = exports.getWorkspace = exports.AngularWorkspace = exports.workspaceSchemaPath = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst fs_1 = require(\"fs\");\n\nconst os = __importStar(require(\"os\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst find_up_1 = require(\"./find-up\");\n\nconst json_file_1 = require(\"./json-file\");\n\nfunction isJsonObject(value) {\n  return value !== undefined && core_1.json.isJsonObject(value);\n}\n\nfunction createWorkspaceHost() {\n  return {\n    readFile(path) {\n      return fs_1.promises.readFile(path, 'utf-8');\n    },\n\n    writeFile(path, data) {\n      return _asyncToGenerator(function* () {\n        yield fs_1.promises.writeFile(path, data);\n      })();\n    },\n\n    isDirectory(path) {\n      return _asyncToGenerator(function* () {\n        try {\n          const stats = yield fs_1.promises.stat(path);\n          return stats.isDirectory();\n        } catch {\n          return false;\n        }\n      })();\n    },\n\n    isFile(path) {\n      return _asyncToGenerator(function* () {\n        try {\n          const stats = yield fs_1.promises.stat(path);\n          return stats.isFile();\n        } catch {\n          return false;\n        }\n      })();\n    }\n\n  };\n}\n\nexports.workspaceSchemaPath = path.join(__dirname, '../../lib/config/schema.json');\nconst configNames = ['angular.json', '.angular.json'];\nconst globalFileName = '.angular-config.json';\nconst defaultGlobalFilePath = path.join(os.homedir(), globalFileName);\n\nfunction xdgConfigHome(home, configFile) {\n  // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n  const xdgConfigHome = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config');\n  const xdgAngularHome = path.join(xdgConfigHome, 'angular');\n  return configFile ? path.join(xdgAngularHome, configFile) : xdgAngularHome;\n}\n\nfunction xdgConfigHomeOld(home) {\n  // Check the configuration files in the old location that should be:\n  // - $XDG_CONFIG_HOME/.angular-config.json (if XDG_CONFIG_HOME is set)\n  // - $HOME/.config/angular/.angular-config.json (otherwise)\n  const p = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config', 'angular');\n  return path.join(p, '.angular-config.json');\n}\n\nfunction projectFilePath(projectPath) {\n  // Find the configuration, either where specified, in the Angular CLI project\n  // (if it's in node_modules) or from the current process.\n  return projectPath && (0, find_up_1.findUp)(configNames, projectPath) || (0, find_up_1.findUp)(configNames, process.cwd()) || (0, find_up_1.findUp)(configNames, __dirname);\n}\n\nfunction globalFilePath() {\n  const home = os.homedir();\n\n  if (!home) {\n    return null;\n  } // follow XDG Base Directory spec\n  // note that createGlobalSettings() will continue creating\n  // global file in home directory, with this user will have\n  // choice to move change its location to meet XDG convention\n\n\n  const xdgConfig = xdgConfigHome(home, 'config.json');\n\n  if ((0, fs_1.existsSync)(xdgConfig)) {\n    return xdgConfig;\n  } // NOTE: This check is for the old configuration location, for more\n  // information see https://github.com/angular/angular-cli/pull/20556\n\n\n  const xdgConfigOld = xdgConfigHomeOld(home);\n\n  if ((0, fs_1.existsSync)(xdgConfigOld)) {\n    /* eslint-disable no-console */\n    console.warn(`Old configuration location detected: ${xdgConfigOld}\\n` + `Please move the file to the new location ~/.config/angular/config.json`);\n    return xdgConfigOld;\n  }\n\n  if ((0, fs_1.existsSync)(defaultGlobalFilePath)) {\n    return defaultGlobalFilePath;\n  }\n\n  return null;\n}\n\nclass AngularWorkspace {\n  constructor(workspace, filePath) {\n    this.workspace = workspace;\n    this.filePath = filePath;\n    this.basePath = path.dirname(filePath);\n  }\n\n  get extensions() {\n    return this.workspace.extensions;\n  }\n\n  get projects() {\n    return this.workspace.projects;\n  } // Temporary helper functions to support refactoring\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  getCli() {\n    return this.workspace.extensions['cli'];\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  getProjectCli(projectName) {\n    const project = this.workspace.projects.get(projectName);\n    return project === null || project === void 0 ? void 0 : project.extensions['cli'];\n  }\n\n  save() {\n    return core_1.workspaces.writeWorkspace(this.workspace, createWorkspaceHost(), this.filePath, core_1.workspaces.WorkspaceFormat.JSON);\n  }\n\n  static load(workspaceFilePath) {\n    return _asyncToGenerator(function* () {\n      const result = yield core_1.workspaces.readWorkspace(workspaceFilePath, createWorkspaceHost(), core_1.workspaces.WorkspaceFormat.JSON);\n      return new AngularWorkspace(result.workspace, workspaceFilePath);\n    })();\n  }\n\n}\n\nexports.AngularWorkspace = AngularWorkspace;\nconst cachedWorkspaces = new Map();\n\nfunction getWorkspace(_x) {\n  return _getWorkspace.apply(this, arguments);\n}\n\nfunction _getWorkspace() {\n  _getWorkspace = _asyncToGenerator(function* (level) {\n    if (cachedWorkspaces.has(level)) {\n      return cachedWorkspaces.get(level);\n    }\n\n    const configPath = level === 'local' ? projectFilePath() : globalFilePath();\n\n    if (!configPath) {\n      if (level === 'global') {\n        // Unlike a local config, a global config is not mandatory.\n        // So we create an empty one in memory and keep it as such until it has been modified and saved.\n        const globalWorkspace = new AngularWorkspace({\n          extensions: {},\n          projects: new core_1.workspaces.ProjectDefinitionCollection()\n        }, defaultGlobalFilePath);\n        cachedWorkspaces.set(level, globalWorkspace);\n        return globalWorkspace;\n      }\n\n      cachedWorkspaces.set(level, undefined);\n      return undefined;\n    }\n\n    try {\n      const workspace = yield AngularWorkspace.load(configPath);\n      cachedWorkspaces.set(level, workspace);\n      return workspace;\n    } catch (error) {\n      throw new Error(`Workspace config file cannot be loaded: ${configPath}` + `\\n${error instanceof Error ? error.message : error}`);\n    }\n  });\n  return _getWorkspace.apply(this, arguments);\n}\n\nexports.getWorkspace = getWorkspace;\n/**\n * This method will load the workspace configuration in raw JSON format.\n * When `level` is `global` and file doesn't exists, it will be created.\n *\n * NB: This method is intended to be used only for `ng config`.\n */\n\nfunction getWorkspaceRaw() {\n  return _getWorkspaceRaw.apply(this, arguments);\n}\n\nfunction _getWorkspaceRaw() {\n  _getWorkspaceRaw = _asyncToGenerator(function* (level = 'local') {\n    let configPath = level === 'local' ? projectFilePath() : globalFilePath();\n\n    if (!configPath) {\n      if (level === 'global') {\n        configPath = defaultGlobalFilePath; // Config doesn't exist, force create it.\n\n        const globalWorkspace = yield getWorkspace('global');\n        yield globalWorkspace.save();\n      } else {\n        return [null, null];\n      }\n    }\n\n    return [new json_file_1.JSONFile(configPath), configPath];\n  });\n  return _getWorkspaceRaw.apply(this, arguments);\n}\n\nexports.getWorkspaceRaw = getWorkspaceRaw;\n\nfunction validateWorkspace(_x2, _x3) {\n  return _validateWorkspace.apply(this, arguments);\n}\n\nfunction _validateWorkspace() {\n  _validateWorkspace = _asyncToGenerator(function* (data, isGlobal) {\n    const schema = (0, json_file_1.readAndParseJson)(exports.workspaceSchemaPath); // We should eventually have a dedicated global config schema and use that to validate.\n\n    const schemaToValidate = isGlobal ? {\n      '$ref': '#/definitions/global',\n      definitions: schema['definitions']\n    } : schema;\n    const {\n      formats\n    } = yield Promise.resolve().then(() => __importStar(require('@angular-devkit/schematics')));\n    const registry = new core_1.json.schema.CoreSchemaRegistry(formats.standardFormats);\n    const validator = yield registry.compile(schemaToValidate).toPromise();\n    const {\n      success,\n      errors\n    } = yield validator(data).toPromise();\n\n    if (!success) {\n      throw new core_1.json.schema.SchemaValidationException(errors);\n    }\n  });\n  return _validateWorkspace.apply(this, arguments);\n}\n\nexports.validateWorkspace = validateWorkspace;\n\nfunction findProjectByPath(workspace, location) {\n  const isInside = (base, potential) => {\n    const absoluteBase = path.resolve(workspace.basePath, base);\n    const absolutePotential = path.resolve(workspace.basePath, potential);\n    const relativePotential = path.relative(absoluteBase, absolutePotential);\n\n    if (!relativePotential.startsWith('..') && !path.isAbsolute(relativePotential)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const projects = Array.from(workspace.projects).map(([name, project]) => [project.root, name]).filter(tuple => isInside(tuple[0], location)) // Sort tuples by depth, with the deeper ones first. Since the first member is a path and\n  // we filtered all invalid paths, the longest will be the deepest (and in case of equality\n  // the sort is stable and the first declared project will win).\n  .sort((a, b) => b[0].length - a[0].length);\n\n  if (projects.length === 0) {\n    return null;\n  } else if (projects.length > 1) {\n    const found = new Set();\n    const sameRoots = projects.filter(v => {\n      if (!found.has(v[0])) {\n        found.add(v[0]);\n        return false;\n      }\n\n      return true;\n    });\n\n    if (sameRoots.length > 0) {\n      // Ambiguous location - cannot determine a project\n      return null;\n    }\n  }\n\n  return projects[0][1];\n}\n\nlet defaultProjectDeprecationWarningShown = false;\n\nfunction getProjectByCwd(workspace) {\n  if (workspace.projects.size === 1) {\n    // If there is only one project, return that one.\n    return Array.from(workspace.projects.keys())[0];\n  }\n\n  const project = findProjectByPath(workspace, process.cwd());\n\n  if (project) {\n    return project;\n  }\n\n  const defaultProject = workspace.extensions['defaultProject'];\n\n  if (defaultProject && typeof defaultProject === 'string') {\n    // If there is a default project name, return it.\n    if (!defaultProjectDeprecationWarningShown) {\n      console.warn(`DEPRECATED: The 'defaultProject' workspace option has been deprecated. ` + `The project to use will be determined from the current working directory.`);\n      defaultProjectDeprecationWarningShown = true;\n    }\n\n    return defaultProject;\n  }\n\n  return null;\n}\n\nexports.getProjectByCwd = getProjectByCwd;\n\nfunction getConfiguredPackageManager() {\n  return _getConfiguredPackageManager.apply(this, arguments);\n}\n\nfunction _getConfiguredPackageManager() {\n  _getConfiguredPackageManager = _asyncToGenerator(function* () {\n    var _a;\n\n    const getPackageManager = source => {\n      if (isJsonObject(source)) {\n        const value = source['packageManager'];\n\n        if (value && typeof value === 'string') {\n          return value;\n        }\n      }\n\n      return null;\n    };\n\n    let result = null;\n    const workspace = yield getWorkspace('local');\n\n    if (workspace) {\n      const project = getProjectByCwd(workspace);\n\n      if (project) {\n        result = getPackageManager((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n      }\n\n      result !== null && result !== void 0 ? result : result = getPackageManager(workspace.extensions['cli']);\n    }\n\n    if (!result) {\n      const globalOptions = yield getWorkspace('global');\n      result = getPackageManager(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    }\n\n    return result;\n  });\n  return _getConfiguredPackageManager.apply(this, arguments);\n}\n\nexports.getConfiguredPackageManager = getConfiguredPackageManager;\n\nfunction getSchematicDefaults(_x4, _x5, _x6) {\n  return _getSchematicDefaults.apply(this, arguments);\n}\n\nfunction _getSchematicDefaults() {\n  _getSchematicDefaults = _asyncToGenerator(function* (collection, schematic, project) {\n    var _a;\n\n    const result = {};\n\n    const mergeOptions = source => {\n      if (isJsonObject(source)) {\n        // Merge options from the qualified name\n        Object.assign(result, source[`${collection}:${schematic}`]); // Merge options from nested collection schematics\n\n        const collectionOptions = source[collection];\n\n        if (isJsonObject(collectionOptions)) {\n          Object.assign(result, collectionOptions[schematic]);\n        }\n      }\n    }; // Global level schematic options\n\n\n    const globalOptions = yield getWorkspace('global');\n    mergeOptions(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['schematics']);\n    const workspace = yield getWorkspace('local');\n\n    if (workspace) {\n      // Workspace level schematic options\n      mergeOptions(workspace.extensions['schematics']);\n      project = project || getProjectByCwd(workspace);\n\n      if (project) {\n        // Project level schematic options\n        mergeOptions((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['schematics']);\n      }\n    }\n\n    return result;\n  });\n  return _getSchematicDefaults.apply(this, arguments);\n}\n\nexports.getSchematicDefaults = getSchematicDefaults;\n\nfunction isWarningEnabled(_x7) {\n  return _isWarningEnabled.apply(this, arguments);\n}\n\nfunction _isWarningEnabled() {\n  _isWarningEnabled = _asyncToGenerator(function* (warning) {\n    var _a;\n\n    const getWarning = source => {\n      if (isJsonObject(source)) {\n        const warnings = source['warnings'];\n\n        if (isJsonObject(warnings)) {\n          const value = warnings[warning];\n\n          if (typeof value == 'boolean') {\n            return value;\n          }\n        }\n      }\n    };\n\n    let result;\n    const workspace = yield getWorkspace('local');\n\n    if (workspace) {\n      const project = getProjectByCwd(workspace);\n\n      if (project) {\n        result = getWarning((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n      }\n\n      result = result !== null && result !== void 0 ? result : getWarning(workspace.extensions['cli']);\n    }\n\n    if (result === undefined) {\n      const globalOptions = yield getWorkspace('global');\n      result = getWarning(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    } // All warnings are enabled by default\n\n\n    return result !== null && result !== void 0 ? result : true;\n  });\n  return _isWarningEnabled.apply(this, arguments);\n}\n\nexports.isWarningEnabled = isWarningEnabled;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","isWarningEnabled","getSchematicDefaults","getConfiguredPackageManager","getProjectByCwd","validateWorkspace","getWorkspaceRaw","getWorkspace","AngularWorkspace","workspaceSchemaPath","core_1","require","fs_1","os","path","find_up_1","json_file_1","isJsonObject","json","createWorkspaceHost","readFile","promises","writeFile","data","isDirectory","stats","stat","isFile","join","__dirname","configNames","globalFileName","defaultGlobalFilePath","homedir","xdgConfigHome","home","configFile","process","env","xdgAngularHome","xdgConfigHomeOld","p","projectFilePath","projectPath","findUp","cwd","globalFilePath","xdgConfig","existsSync","xdgConfigOld","console","warn","constructor","workspace","filePath","basePath","dirname","extensions","projects","getCli","getProjectCli","projectName","project","save","workspaces","writeWorkspace","WorkspaceFormat","JSON","load","workspaceFilePath","readWorkspace","cachedWorkspaces","Map","level","has","configPath","globalWorkspace","ProjectDefinitionCollection","set","error","Error","message","JSONFile","isGlobal","schema","readAndParseJson","schemaToValidate","definitions","formats","Promise","resolve","then","registry","CoreSchemaRegistry","standardFormats","validator","compile","toPromise","success","errors","SchemaValidationException","findProjectByPath","location","isInside","base","potential","absoluteBase","absolutePotential","relativePotential","relative","startsWith","isAbsolute","Array","from","map","name","root","filter","tuple","sort","a","b","length","found","Set","sameRoots","add","defaultProjectDeprecationWarningShown","size","keys","defaultProject","_a","getPackageManager","source","globalOptions","collection","schematic","mergeOptions","assign","collectionOptions","warning","getWarning","warnings"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/utilities/config.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isWarningEnabled = exports.getSchematicDefaults = exports.getConfiguredPackageManager = exports.getProjectByCwd = exports.validateWorkspace = exports.getWorkspaceRaw = exports.getWorkspace = exports.AngularWorkspace = exports.workspaceSchemaPath = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst find_up_1 = require(\"./find-up\");\nconst json_file_1 = require(\"./json-file\");\nfunction isJsonObject(value) {\n    return value !== undefined && core_1.json.isJsonObject(value);\n}\nfunction createWorkspaceHost() {\n    return {\n        readFile(path) {\n            return fs_1.promises.readFile(path, 'utf-8');\n        },\n        async writeFile(path, data) {\n            await fs_1.promises.writeFile(path, data);\n        },\n        async isDirectory(path) {\n            try {\n                const stats = await fs_1.promises.stat(path);\n                return stats.isDirectory();\n            }\n            catch {\n                return false;\n            }\n        },\n        async isFile(path) {\n            try {\n                const stats = await fs_1.promises.stat(path);\n                return stats.isFile();\n            }\n            catch {\n                return false;\n            }\n        },\n    };\n}\nexports.workspaceSchemaPath = path.join(__dirname, '../../lib/config/schema.json');\nconst configNames = ['angular.json', '.angular.json'];\nconst globalFileName = '.angular-config.json';\nconst defaultGlobalFilePath = path.join(os.homedir(), globalFileName);\nfunction xdgConfigHome(home, configFile) {\n    // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n    const xdgConfigHome = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config');\n    const xdgAngularHome = path.join(xdgConfigHome, 'angular');\n    return configFile ? path.join(xdgAngularHome, configFile) : xdgAngularHome;\n}\nfunction xdgConfigHomeOld(home) {\n    // Check the configuration files in the old location that should be:\n    // - $XDG_CONFIG_HOME/.angular-config.json (if XDG_CONFIG_HOME is set)\n    // - $HOME/.config/angular/.angular-config.json (otherwise)\n    const p = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config', 'angular');\n    return path.join(p, '.angular-config.json');\n}\nfunction projectFilePath(projectPath) {\n    // Find the configuration, either where specified, in the Angular CLI project\n    // (if it's in node_modules) or from the current process.\n    return ((projectPath && (0, find_up_1.findUp)(configNames, projectPath)) ||\n        (0, find_up_1.findUp)(configNames, process.cwd()) ||\n        (0, find_up_1.findUp)(configNames, __dirname));\n}\nfunction globalFilePath() {\n    const home = os.homedir();\n    if (!home) {\n        return null;\n    }\n    // follow XDG Base Directory spec\n    // note that createGlobalSettings() will continue creating\n    // global file in home directory, with this user will have\n    // choice to move change its location to meet XDG convention\n    const xdgConfig = xdgConfigHome(home, 'config.json');\n    if ((0, fs_1.existsSync)(xdgConfig)) {\n        return xdgConfig;\n    }\n    // NOTE: This check is for the old configuration location, for more\n    // information see https://github.com/angular/angular-cli/pull/20556\n    const xdgConfigOld = xdgConfigHomeOld(home);\n    if ((0, fs_1.existsSync)(xdgConfigOld)) {\n        /* eslint-disable no-console */\n        console.warn(`Old configuration location detected: ${xdgConfigOld}\\n` +\n            `Please move the file to the new location ~/.config/angular/config.json`);\n        return xdgConfigOld;\n    }\n    if ((0, fs_1.existsSync)(defaultGlobalFilePath)) {\n        return defaultGlobalFilePath;\n    }\n    return null;\n}\nclass AngularWorkspace {\n    constructor(workspace, filePath) {\n        this.workspace = workspace;\n        this.filePath = filePath;\n        this.basePath = path.dirname(filePath);\n    }\n    get extensions() {\n        return this.workspace.extensions;\n    }\n    get projects() {\n        return this.workspace.projects;\n    }\n    // Temporary helper functions to support refactoring\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getCli() {\n        return this.workspace.extensions['cli'];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getProjectCli(projectName) {\n        const project = this.workspace.projects.get(projectName);\n        return project === null || project === void 0 ? void 0 : project.extensions['cli'];\n    }\n    save() {\n        return core_1.workspaces.writeWorkspace(this.workspace, createWorkspaceHost(), this.filePath, core_1.workspaces.WorkspaceFormat.JSON);\n    }\n    static async load(workspaceFilePath) {\n        const result = await core_1.workspaces.readWorkspace(workspaceFilePath, createWorkspaceHost(), core_1.workspaces.WorkspaceFormat.JSON);\n        return new AngularWorkspace(result.workspace, workspaceFilePath);\n    }\n}\nexports.AngularWorkspace = AngularWorkspace;\nconst cachedWorkspaces = new Map();\nasync function getWorkspace(level) {\n    if (cachedWorkspaces.has(level)) {\n        return cachedWorkspaces.get(level);\n    }\n    const configPath = level === 'local' ? projectFilePath() : globalFilePath();\n    if (!configPath) {\n        if (level === 'global') {\n            // Unlike a local config, a global config is not mandatory.\n            // So we create an empty one in memory and keep it as such until it has been modified and saved.\n            const globalWorkspace = new AngularWorkspace({ extensions: {}, projects: new core_1.workspaces.ProjectDefinitionCollection() }, defaultGlobalFilePath);\n            cachedWorkspaces.set(level, globalWorkspace);\n            return globalWorkspace;\n        }\n        cachedWorkspaces.set(level, undefined);\n        return undefined;\n    }\n    try {\n        const workspace = await AngularWorkspace.load(configPath);\n        cachedWorkspaces.set(level, workspace);\n        return workspace;\n    }\n    catch (error) {\n        throw new Error(`Workspace config file cannot be loaded: ${configPath}` +\n            `\\n${error instanceof Error ? error.message : error}`);\n    }\n}\nexports.getWorkspace = getWorkspace;\n/**\n * This method will load the workspace configuration in raw JSON format.\n * When `level` is `global` and file doesn't exists, it will be created.\n *\n * NB: This method is intended to be used only for `ng config`.\n */\nasync function getWorkspaceRaw(level = 'local') {\n    let configPath = level === 'local' ? projectFilePath() : globalFilePath();\n    if (!configPath) {\n        if (level === 'global') {\n            configPath = defaultGlobalFilePath;\n            // Config doesn't exist, force create it.\n            const globalWorkspace = await getWorkspace('global');\n            await globalWorkspace.save();\n        }\n        else {\n            return [null, null];\n        }\n    }\n    return [new json_file_1.JSONFile(configPath), configPath];\n}\nexports.getWorkspaceRaw = getWorkspaceRaw;\nasync function validateWorkspace(data, isGlobal) {\n    const schema = (0, json_file_1.readAndParseJson)(exports.workspaceSchemaPath);\n    // We should eventually have a dedicated global config schema and use that to validate.\n    const schemaToValidate = isGlobal\n        ? {\n            '$ref': '#/definitions/global',\n            definitions: schema['definitions'],\n        }\n        : schema;\n    const { formats } = await Promise.resolve().then(() => __importStar(require('@angular-devkit/schematics')));\n    const registry = new core_1.json.schema.CoreSchemaRegistry(formats.standardFormats);\n    const validator = await registry.compile(schemaToValidate).toPromise();\n    const { success, errors } = await validator(data).toPromise();\n    if (!success) {\n        throw new core_1.json.schema.SchemaValidationException(errors);\n    }\n}\nexports.validateWorkspace = validateWorkspace;\nfunction findProjectByPath(workspace, location) {\n    const isInside = (base, potential) => {\n        const absoluteBase = path.resolve(workspace.basePath, base);\n        const absolutePotential = path.resolve(workspace.basePath, potential);\n        const relativePotential = path.relative(absoluteBase, absolutePotential);\n        if (!relativePotential.startsWith('..') && !path.isAbsolute(relativePotential)) {\n            return true;\n        }\n        return false;\n    };\n    const projects = Array.from(workspace.projects)\n        .map(([name, project]) => [project.root, name])\n        .filter((tuple) => isInside(tuple[0], location))\n        // Sort tuples by depth, with the deeper ones first. Since the first member is a path and\n        // we filtered all invalid paths, the longest will be the deepest (and in case of equality\n        // the sort is stable and the first declared project will win).\n        .sort((a, b) => b[0].length - a[0].length);\n    if (projects.length === 0) {\n        return null;\n    }\n    else if (projects.length > 1) {\n        const found = new Set();\n        const sameRoots = projects.filter((v) => {\n            if (!found.has(v[0])) {\n                found.add(v[0]);\n                return false;\n            }\n            return true;\n        });\n        if (sameRoots.length > 0) {\n            // Ambiguous location - cannot determine a project\n            return null;\n        }\n    }\n    return projects[0][1];\n}\nlet defaultProjectDeprecationWarningShown = false;\nfunction getProjectByCwd(workspace) {\n    if (workspace.projects.size === 1) {\n        // If there is only one project, return that one.\n        return Array.from(workspace.projects.keys())[0];\n    }\n    const project = findProjectByPath(workspace, process.cwd());\n    if (project) {\n        return project;\n    }\n    const defaultProject = workspace.extensions['defaultProject'];\n    if (defaultProject && typeof defaultProject === 'string') {\n        // If there is a default project name, return it.\n        if (!defaultProjectDeprecationWarningShown) {\n            console.warn(`DEPRECATED: The 'defaultProject' workspace option has been deprecated. ` +\n                `The project to use will be determined from the current working directory.`);\n            defaultProjectDeprecationWarningShown = true;\n        }\n        return defaultProject;\n    }\n    return null;\n}\nexports.getProjectByCwd = getProjectByCwd;\nasync function getConfiguredPackageManager() {\n    var _a;\n    const getPackageManager = (source) => {\n        if (isJsonObject(source)) {\n            const value = source['packageManager'];\n            if (value && typeof value === 'string') {\n                return value;\n            }\n        }\n        return null;\n    };\n    let result = null;\n    const workspace = await getWorkspace('local');\n    if (workspace) {\n        const project = getProjectByCwd(workspace);\n        if (project) {\n            result = getPackageManager((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n        }\n        result !== null && result !== void 0 ? result : (result = getPackageManager(workspace.extensions['cli']));\n    }\n    if (!result) {\n        const globalOptions = await getWorkspace('global');\n        result = getPackageManager(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    }\n    return result;\n}\nexports.getConfiguredPackageManager = getConfiguredPackageManager;\nasync function getSchematicDefaults(collection, schematic, project) {\n    var _a;\n    const result = {};\n    const mergeOptions = (source) => {\n        if (isJsonObject(source)) {\n            // Merge options from the qualified name\n            Object.assign(result, source[`${collection}:${schematic}`]);\n            // Merge options from nested collection schematics\n            const collectionOptions = source[collection];\n            if (isJsonObject(collectionOptions)) {\n                Object.assign(result, collectionOptions[schematic]);\n            }\n        }\n    };\n    // Global level schematic options\n    const globalOptions = await getWorkspace('global');\n    mergeOptions(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['schematics']);\n    const workspace = await getWorkspace('local');\n    if (workspace) {\n        // Workspace level schematic options\n        mergeOptions(workspace.extensions['schematics']);\n        project = project || getProjectByCwd(workspace);\n        if (project) {\n            // Project level schematic options\n            mergeOptions((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['schematics']);\n        }\n    }\n    return result;\n}\nexports.getSchematicDefaults = getSchematicDefaults;\nasync function isWarningEnabled(warning) {\n    var _a;\n    const getWarning = (source) => {\n        if (isJsonObject(source)) {\n            const warnings = source['warnings'];\n            if (isJsonObject(warnings)) {\n                const value = warnings[warning];\n                if (typeof value == 'boolean') {\n                    return value;\n                }\n            }\n        }\n    };\n    let result;\n    const workspace = await getWorkspace('local');\n    if (workspace) {\n        const project = getProjectByCwd(workspace);\n        if (project) {\n            result = getWarning((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n        }\n        result = result !== null && result !== void 0 ? result : getWarning(workspace.extensions['cli']);\n    }\n    if (result === undefined) {\n        const globalOptions = await getWorkspace('global');\n        result = getWarning(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    }\n    // All warnings are enabled by default\n    return result !== null && result !== void 0 ? result : true;\n}\nexports.isWarningEnabled = isWarningEnabled;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}