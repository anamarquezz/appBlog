{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAnalyticsInfoString = exports.createAnalytics = exports.getSharedAnalytics = exports.getAnalytics = exports.promptAnalytics = exports.setAnalyticsConfig = exports.isPackageNameSafeForAnalytics = exports.analyticsPackageSafelist = exports.AnalyticsProperties = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst uuid_1 = require(\"uuid\");\n\nconst color_1 = require(\"../utilities/color\");\n\nconst config_1 = require(\"../utilities/config\");\n\nconst environment_options_1 = require(\"../utilities/environment-options\");\n\nconst error_1 = require(\"../utilities/error\");\n\nconst tty_1 = require(\"../utilities/tty\");\n\nconst version_1 = require(\"../utilities/version\");\n\nconst analytics_collector_1 = require(\"./analytics-collector\");\n/* eslint-disable no-console */\n\n\nconst analyticsDebug = (0, debug_1.default)('ng:analytics'); // Generate analytics, including settings and users.\n\nlet _defaultAngularCliPropertyCache;\n\nexports.AnalyticsProperties = {\n  AngularCliProd: 'UA-8594346-29',\n  AngularCliStaging: 'UA-8594346-32',\n\n  get AngularCliDefault() {\n    if (_defaultAngularCliPropertyCache) {\n      return _defaultAngularCliPropertyCache;\n    }\n\n    const v = version_1.VERSION.full; // The logic is if it's a full version then we should use the prod GA property.\n\n    _defaultAngularCliPropertyCache = /^\\d+\\.\\d+\\.\\d+$/.test(v) && v !== '0.0.0' ? exports.AnalyticsProperties.AngularCliProd : exports.AnalyticsProperties.AngularCliStaging;\n    return _defaultAngularCliPropertyCache;\n  }\n\n};\n/**\n * This is the ultimate safelist for checking if a package name is safe to report to analytics.\n */\n\nexports.analyticsPackageSafelist = [/^@angular\\//, /^@angular-devkit\\//, /^@ngtools\\//, '@schematics/angular'];\n\nfunction isPackageNameSafeForAnalytics(name) {\n  return exports.analyticsPackageSafelist.some(pattern => {\n    if (typeof pattern == 'string') {\n      return pattern === name;\n    } else {\n      return pattern.test(name);\n    }\n  });\n}\n\nexports.isPackageNameSafeForAnalytics = isPackageNameSafeForAnalytics;\n/**\n * Set analytics settings. This does not work if the user is not inside a project.\n * @param global Which config to use. \"global\" for user-level, and \"local\" for project-level.\n * @param value Either a user ID, true to generate a new User ID, or false to disable analytics.\n */\n\nfunction setAnalyticsConfig(_x, _x2) {\n  return _setAnalyticsConfig.apply(this, arguments);\n}\n\nfunction _setAnalyticsConfig() {\n  _setAnalyticsConfig = _asyncToGenerator(function* (global, value) {\n    var _a;\n\n    var _b;\n\n    const level = global ? 'global' : 'local';\n    analyticsDebug('setting %s level analytics to: %s', level, value);\n    const workspace = yield (0, config_1.getWorkspace)(level);\n\n    if (!workspace) {\n      throw new Error(`Could not find ${level} workspace.`);\n    }\n\n    const cli = (_a = (_b = workspace.extensions)['cli']) !== null && _a !== void 0 ? _a : _b['cli'] = {};\n\n    if (!workspace || !core_1.json.isJsonObject(cli)) {\n      throw new Error(`Invalid config found at ${workspace.filePath}. CLI should be an object.`);\n    }\n\n    cli.analytics = value === true ? (0, uuid_1.v4)() : value;\n    yield workspace.save();\n    analyticsDebug('done');\n  });\n  return _setAnalyticsConfig.apply(this, arguments);\n}\n\nexports.setAnalyticsConfig = setAnalyticsConfig;\n/**\n * Prompt the user for usage gathering permission.\n * @param force Whether to ask regardless of whether or not the user is using an interactive shell.\n * @return Whether or not the user was shown a prompt.\n */\n\nfunction promptAnalytics(_x3) {\n  return _promptAnalytics.apply(this, arguments);\n}\n\nfunction _promptAnalytics() {\n  _promptAnalytics = _asyncToGenerator(function* (global, force = false) {\n    analyticsDebug('prompting user');\n    const level = global ? 'global' : 'local';\n    const workspace = yield (0, config_1.getWorkspace)(level);\n\n    if (!workspace) {\n      throw new Error(`Could not find a ${level} workspace. Are you in a project?`);\n    }\n\n    if (force || (0, tty_1.isTTY)()) {\n      const {\n        prompt\n      } = yield Promise.resolve().then(() => __importStar(require('inquirer')));\n      const answers = yield prompt([{\n        type: 'confirm',\n        name: 'analytics',\n        message: core_1.tags.stripIndents`\n          Would you like to share pseudonymous usage data about this project with the Angular Team\n          at Google under Google's Privacy Policy at https://policies.google.com/privacy. For more\n          details and how to change this setting, see https://angular.io/analytics.\n\n        `,\n        default: false\n      }]);\n      yield setAnalyticsConfig(global, answers.analytics);\n\n      if (answers.analytics) {\n        console.log('');\n        console.log(core_1.tags.stripIndent`\n        Thank you for sharing pseudonymous usage data. Should you change your mind, the following\n        command will disable this feature entirely:\n\n            ${color_1.colors.yellow(`ng analytics disable${global ? ' --global' : ''}`)}\n      `);\n        console.log(''); // Send back a ping with the user `optin`.\n\n        const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optin');\n        ua.pageview('/telemetry/project/optin');\n        yield ua.flush();\n      } else {\n        // Send back a ping with the user `optout`. This is the only thing we send.\n        const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optout');\n        ua.pageview('/telemetry/project/optout');\n        yield ua.flush();\n      }\n\n      process.stderr.write(yield getAnalyticsInfoString());\n      return true;\n    }\n\n    return false;\n  });\n  return _promptAnalytics.apply(this, arguments);\n}\n\nexports.promptAnalytics = promptAnalytics;\n/**\n * Get the analytics object for the user.\n *\n * @returns\n * - `AnalyticsCollector` when enabled.\n * - `analytics.NoopAnalytics` when disabled.\n * - `undefined` when not configured.\n */\n\nfunction getAnalytics(_x4) {\n  return _getAnalytics.apply(this, arguments);\n}\n\nfunction _getAnalytics() {\n  _getAnalytics = _asyncToGenerator(function* (level) {\n    var _a;\n\n    analyticsDebug('getAnalytics');\n\n    if (environment_options_1.analyticsDisabled) {\n      analyticsDebug('NG_CLI_ANALYTICS is false');\n      return new core_1.analytics.NoopAnalytics();\n    }\n\n    try {\n      const workspace = yield (0, config_1.getWorkspace)(level);\n      const analyticsConfig = (_a = workspace === null || workspace === void 0 ? void 0 : workspace.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n      analyticsDebug('Workspace Analytics config found: %j', analyticsConfig);\n\n      if (analyticsConfig === false) {\n        return new core_1.analytics.NoopAnalytics();\n      } else if (analyticsConfig === undefined || analyticsConfig === null) {\n        return undefined;\n      } else {\n        let uid = undefined;\n\n        if (typeof analyticsConfig == 'string') {\n          uid = analyticsConfig;\n        } else if (typeof analyticsConfig == 'object' && typeof analyticsConfig['uid'] == 'string') {\n          uid = analyticsConfig['uid'];\n        }\n\n        analyticsDebug('client id: %j', uid);\n\n        if (uid == undefined) {\n          return undefined;\n        }\n\n        return new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, uid);\n      }\n    } catch (err) {\n      (0, error_1.assertIsError)(err);\n      analyticsDebug('Error happened during reading of analytics config: %s', err.message);\n      return undefined;\n    }\n  });\n  return _getAnalytics.apply(this, arguments);\n}\n\nexports.getAnalytics = getAnalytics;\n/**\n * Return the usage analytics sharing setting, which is either a property string (GA-XXXXXXX-XX),\n * or undefined if no sharing.\n */\n\nfunction getSharedAnalytics() {\n  return _getSharedAnalytics.apply(this, arguments);\n}\n\nfunction _getSharedAnalytics() {\n  _getSharedAnalytics = _asyncToGenerator(function* () {\n    var _a;\n\n    analyticsDebug('getSharedAnalytics');\n\n    if (environment_options_1.analyticsShareDisabled) {\n      analyticsDebug('NG_CLI_ANALYTICS is false');\n      return undefined;\n    } // If anything happens we just keep the NOOP analytics.\n\n\n    try {\n      const globalWorkspace = yield (0, config_1.getWorkspace)('global');\n      const analyticsConfig = (_a = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()) === null || _a === void 0 ? void 0 : _a['analyticsSharing'];\n\n      if (!analyticsConfig || !analyticsConfig.tracking || !analyticsConfig.uuid) {\n        return undefined;\n      } else {\n        analyticsDebug('Analytics sharing info: %j', analyticsConfig);\n        return new analytics_collector_1.AnalyticsCollector(analyticsConfig.tracking, analyticsConfig.uuid);\n      }\n    } catch (err) {\n      (0, error_1.assertIsError)(err);\n      analyticsDebug('Error happened during reading of analytics sharing config: %s', err.message);\n      return undefined;\n    }\n  });\n  return _getSharedAnalytics.apply(this, arguments);\n}\n\nexports.getSharedAnalytics = getSharedAnalytics;\n\nfunction createAnalytics(_x5) {\n  return _createAnalytics.apply(this, arguments);\n}\n\nfunction _createAnalytics() {\n  _createAnalytics = _asyncToGenerator(function* (workspace, skipPrompt = false) {\n    // Global config takes precedence over local config only for the disabled check.\n    // IE:\n    // global: disabled & local: enabled = disabled\n    // global: id: 123 & local: id: 456 = 456\n    var _a; // check global\n\n\n    const globalConfig = yield getAnalytics('global');\n\n    if (globalConfig instanceof core_1.analytics.NoopAnalytics) {\n      return globalConfig;\n    }\n\n    let config = globalConfig; // Not disabled globally, check locally or not set globally and command is run outside of workspace example: `ng new`\n\n    if (workspace || globalConfig === undefined) {\n      const level = workspace ? 'local' : 'global';\n      let localOrGlobalConfig = yield getAnalytics(level);\n\n      if (localOrGlobalConfig === undefined) {\n        if (!skipPrompt) {\n          // config is unset, prompt user.\n          // TODO: This should honor the `no-interactive` option.\n          // It is currently not an `ng` option but rather only an option for specific commands.\n          // The concept of `ng`-wide options are needed to cleanly handle this.\n          yield promptAnalytics(!workspace\n          /** global */\n          );\n          localOrGlobalConfig = yield getAnalytics(level);\n        }\n      }\n\n      if (localOrGlobalConfig instanceof core_1.analytics.NoopAnalytics) {\n        return localOrGlobalConfig;\n      } else if (localOrGlobalConfig) {\n        // Favor local settings over global when defined.\n        config = localOrGlobalConfig;\n      }\n    } // Get shared analytics\n    // TODO: evalute if this should be completly removed.\n\n\n    const maybeSharedAnalytics = yield getSharedAnalytics();\n\n    if (config && maybeSharedAnalytics) {\n      return new core_1.analytics.MultiAnalytics([config, maybeSharedAnalytics]);\n    }\n\n    return (_a = config !== null && config !== void 0 ? config : maybeSharedAnalytics) !== null && _a !== void 0 ? _a : new core_1.analytics.NoopAnalytics();\n  });\n  return _createAnalytics.apply(this, arguments);\n}\n\nexports.createAnalytics = createAnalytics;\n\nfunction analyticsConfigValueToHumanFormat(value) {\n  if (value === false) {\n    return 'disabled';\n  } else if (typeof value === 'string' || value === true) {\n    return 'enabled';\n  } else {\n    return 'not set';\n  }\n}\n\nfunction getAnalyticsInfoString() {\n  return _getAnalyticsInfoString.apply(this, arguments);\n}\n\nfunction _getAnalyticsInfoString() {\n  _getAnalyticsInfoString = _asyncToGenerator(function* () {\n    var _a, _b;\n\n    const globalWorkspace = yield (0, config_1.getWorkspace)('global');\n    const localWorkspace = yield (0, config_1.getWorkspace)('local');\n    const globalSetting = (_a = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n    const localSetting = (_b = localWorkspace === null || localWorkspace === void 0 ? void 0 : localWorkspace.getCli()) === null || _b === void 0 ? void 0 : _b['analytics'];\n    const analyticsInstance = yield createAnalytics(!!localWorkspace\n    /** workspace */\n    , true\n    /** skipPrompt */\n    );\n    return core_1.tags.stripIndents`\n    Global setting: ${analyticsConfigValueToHumanFormat(globalSetting)}\n    Local setting: ${localWorkspace ? analyticsConfigValueToHumanFormat(localSetting) : 'No local workspace configuration file.'}\n    Effective status: ${analyticsInstance instanceof core_1.analytics.NoopAnalytics ? 'disabled' : 'enabled'}\n  ` + '\\n';\n  });\n  return _getAnalyticsInfoString.apply(this, arguments);\n}\n\nexports.getAnalyticsInfoString = getAnalyticsInfoString;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","getAnalyticsInfoString","createAnalytics","getSharedAnalytics","getAnalytics","promptAnalytics","setAnalyticsConfig","isPackageNameSafeForAnalytics","analyticsPackageSafelist","AnalyticsProperties","core_1","require","debug_1","uuid_1","color_1","config_1","environment_options_1","error_1","tty_1","version_1","analytics_collector_1","analyticsDebug","default","_defaultAngularCliPropertyCache","AngularCliProd","AngularCliStaging","AngularCliDefault","VERSION","full","test","name","some","pattern","global","_a","_b","level","workspace","getWorkspace","Error","cli","extensions","json","isJsonObject","filePath","analytics","v4","save","force","isTTY","prompt","Promise","resolve","then","answers","type","message","tags","stripIndents","console","log","stripIndent","colors","yellow","ua","AnalyticsCollector","pageview","flush","process","stderr","write","analyticsDisabled","NoopAnalytics","analyticsConfig","getCli","uid","err","assertIsError","analyticsShareDisabled","globalWorkspace","tracking","uuid","skipPrompt","globalConfig","config","localOrGlobalConfig","maybeSharedAnalytics","MultiAnalytics","analyticsConfigValueToHumanFormat","localWorkspace","globalSetting","localSetting","analyticsInstance"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular/cli/src/analytics/analytics.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAnalyticsInfoString = exports.createAnalytics = exports.getSharedAnalytics = exports.getAnalytics = exports.promptAnalytics = exports.setAnalyticsConfig = exports.isPackageNameSafeForAnalytics = exports.analyticsPackageSafelist = exports.AnalyticsProperties = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst uuid_1 = require(\"uuid\");\nconst color_1 = require(\"../utilities/color\");\nconst config_1 = require(\"../utilities/config\");\nconst environment_options_1 = require(\"../utilities/environment-options\");\nconst error_1 = require(\"../utilities/error\");\nconst tty_1 = require(\"../utilities/tty\");\nconst version_1 = require(\"../utilities/version\");\nconst analytics_collector_1 = require(\"./analytics-collector\");\n/* eslint-disable no-console */\nconst analyticsDebug = (0, debug_1.default)('ng:analytics'); // Generate analytics, including settings and users.\nlet _defaultAngularCliPropertyCache;\nexports.AnalyticsProperties = {\n    AngularCliProd: 'UA-8594346-29',\n    AngularCliStaging: 'UA-8594346-32',\n    get AngularCliDefault() {\n        if (_defaultAngularCliPropertyCache) {\n            return _defaultAngularCliPropertyCache;\n        }\n        const v = version_1.VERSION.full;\n        // The logic is if it's a full version then we should use the prod GA property.\n        _defaultAngularCliPropertyCache =\n            /^\\d+\\.\\d+\\.\\d+$/.test(v) && v !== '0.0.0'\n                ? exports.AnalyticsProperties.AngularCliProd\n                : exports.AnalyticsProperties.AngularCliStaging;\n        return _defaultAngularCliPropertyCache;\n    },\n};\n/**\n * This is the ultimate safelist for checking if a package name is safe to report to analytics.\n */\nexports.analyticsPackageSafelist = [\n    /^@angular\\//,\n    /^@angular-devkit\\//,\n    /^@ngtools\\//,\n    '@schematics/angular',\n];\nfunction isPackageNameSafeForAnalytics(name) {\n    return exports.analyticsPackageSafelist.some((pattern) => {\n        if (typeof pattern == 'string') {\n            return pattern === name;\n        }\n        else {\n            return pattern.test(name);\n        }\n    });\n}\nexports.isPackageNameSafeForAnalytics = isPackageNameSafeForAnalytics;\n/**\n * Set analytics settings. This does not work if the user is not inside a project.\n * @param global Which config to use. \"global\" for user-level, and \"local\" for project-level.\n * @param value Either a user ID, true to generate a new User ID, or false to disable analytics.\n */\nasync function setAnalyticsConfig(global, value) {\n    var _a;\n    var _b;\n    const level = global ? 'global' : 'local';\n    analyticsDebug('setting %s level analytics to: %s', level, value);\n    const workspace = await (0, config_1.getWorkspace)(level);\n    if (!workspace) {\n        throw new Error(`Could not find ${level} workspace.`);\n    }\n    const cli = ((_a = (_b = workspace.extensions)['cli']) !== null && _a !== void 0 ? _a : (_b['cli'] = {}));\n    if (!workspace || !core_1.json.isJsonObject(cli)) {\n        throw new Error(`Invalid config found at ${workspace.filePath}. CLI should be an object.`);\n    }\n    cli.analytics = value === true ? (0, uuid_1.v4)() : value;\n    await workspace.save();\n    analyticsDebug('done');\n}\nexports.setAnalyticsConfig = setAnalyticsConfig;\n/**\n * Prompt the user for usage gathering permission.\n * @param force Whether to ask regardless of whether or not the user is using an interactive shell.\n * @return Whether or not the user was shown a prompt.\n */\nasync function promptAnalytics(global, force = false) {\n    analyticsDebug('prompting user');\n    const level = global ? 'global' : 'local';\n    const workspace = await (0, config_1.getWorkspace)(level);\n    if (!workspace) {\n        throw new Error(`Could not find a ${level} workspace. Are you in a project?`);\n    }\n    if (force || (0, tty_1.isTTY)()) {\n        const { prompt } = await Promise.resolve().then(() => __importStar(require('inquirer')));\n        const answers = await prompt([\n            {\n                type: 'confirm',\n                name: 'analytics',\n                message: core_1.tags.stripIndents `\n          Would you like to share pseudonymous usage data about this project with the Angular Team\n          at Google under Google's Privacy Policy at https://policies.google.com/privacy. For more\n          details and how to change this setting, see https://angular.io/analytics.\n\n        `,\n                default: false,\n            },\n        ]);\n        await setAnalyticsConfig(global, answers.analytics);\n        if (answers.analytics) {\n            console.log('');\n            console.log(core_1.tags.stripIndent `\n        Thank you for sharing pseudonymous usage data. Should you change your mind, the following\n        command will disable this feature entirely:\n\n            ${color_1.colors.yellow(`ng analytics disable${global ? ' --global' : ''}`)}\n      `);\n            console.log('');\n            // Send back a ping with the user `optin`.\n            const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optin');\n            ua.pageview('/telemetry/project/optin');\n            await ua.flush();\n        }\n        else {\n            // Send back a ping with the user `optout`. This is the only thing we send.\n            const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optout');\n            ua.pageview('/telemetry/project/optout');\n            await ua.flush();\n        }\n        process.stderr.write(await getAnalyticsInfoString());\n        return true;\n    }\n    return false;\n}\nexports.promptAnalytics = promptAnalytics;\n/**\n * Get the analytics object for the user.\n *\n * @returns\n * - `AnalyticsCollector` when enabled.\n * - `analytics.NoopAnalytics` when disabled.\n * - `undefined` when not configured.\n */\nasync function getAnalytics(level) {\n    var _a;\n    analyticsDebug('getAnalytics');\n    if (environment_options_1.analyticsDisabled) {\n        analyticsDebug('NG_CLI_ANALYTICS is false');\n        return new core_1.analytics.NoopAnalytics();\n    }\n    try {\n        const workspace = await (0, config_1.getWorkspace)(level);\n        const analyticsConfig = (_a = workspace === null || workspace === void 0 ? void 0 : workspace.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n        analyticsDebug('Workspace Analytics config found: %j', analyticsConfig);\n        if (analyticsConfig === false) {\n            return new core_1.analytics.NoopAnalytics();\n        }\n        else if (analyticsConfig === undefined || analyticsConfig === null) {\n            return undefined;\n        }\n        else {\n            let uid = undefined;\n            if (typeof analyticsConfig == 'string') {\n                uid = analyticsConfig;\n            }\n            else if (typeof analyticsConfig == 'object' && typeof analyticsConfig['uid'] == 'string') {\n                uid = analyticsConfig['uid'];\n            }\n            analyticsDebug('client id: %j', uid);\n            if (uid == undefined) {\n                return undefined;\n            }\n            return new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, uid);\n        }\n    }\n    catch (err) {\n        (0, error_1.assertIsError)(err);\n        analyticsDebug('Error happened during reading of analytics config: %s', err.message);\n        return undefined;\n    }\n}\nexports.getAnalytics = getAnalytics;\n/**\n * Return the usage analytics sharing setting, which is either a property string (GA-XXXXXXX-XX),\n * or undefined if no sharing.\n */\nasync function getSharedAnalytics() {\n    var _a;\n    analyticsDebug('getSharedAnalytics');\n    if (environment_options_1.analyticsShareDisabled) {\n        analyticsDebug('NG_CLI_ANALYTICS is false');\n        return undefined;\n    }\n    // If anything happens we just keep the NOOP analytics.\n    try {\n        const globalWorkspace = await (0, config_1.getWorkspace)('global');\n        const analyticsConfig = (_a = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()) === null || _a === void 0 ? void 0 : _a['analyticsSharing'];\n        if (!analyticsConfig || !analyticsConfig.tracking || !analyticsConfig.uuid) {\n            return undefined;\n        }\n        else {\n            analyticsDebug('Analytics sharing info: %j', analyticsConfig);\n            return new analytics_collector_1.AnalyticsCollector(analyticsConfig.tracking, analyticsConfig.uuid);\n        }\n    }\n    catch (err) {\n        (0, error_1.assertIsError)(err);\n        analyticsDebug('Error happened during reading of analytics sharing config: %s', err.message);\n        return undefined;\n    }\n}\nexports.getSharedAnalytics = getSharedAnalytics;\nasync function createAnalytics(workspace, skipPrompt = false) {\n    // Global config takes precedence over local config only for the disabled check.\n    // IE:\n    // global: disabled & local: enabled = disabled\n    // global: id: 123 & local: id: 456 = 456\n    var _a;\n    // check global\n    const globalConfig = await getAnalytics('global');\n    if (globalConfig instanceof core_1.analytics.NoopAnalytics) {\n        return globalConfig;\n    }\n    let config = globalConfig;\n    // Not disabled globally, check locally or not set globally and command is run outside of workspace example: `ng new`\n    if (workspace || globalConfig === undefined) {\n        const level = workspace ? 'local' : 'global';\n        let localOrGlobalConfig = await getAnalytics(level);\n        if (localOrGlobalConfig === undefined) {\n            if (!skipPrompt) {\n                // config is unset, prompt user.\n                // TODO: This should honor the `no-interactive` option.\n                // It is currently not an `ng` option but rather only an option for specific commands.\n                // The concept of `ng`-wide options are needed to cleanly handle this.\n                await promptAnalytics(!workspace /** global */);\n                localOrGlobalConfig = await getAnalytics(level);\n            }\n        }\n        if (localOrGlobalConfig instanceof core_1.analytics.NoopAnalytics) {\n            return localOrGlobalConfig;\n        }\n        else if (localOrGlobalConfig) {\n            // Favor local settings over global when defined.\n            config = localOrGlobalConfig;\n        }\n    }\n    // Get shared analytics\n    // TODO: evalute if this should be completly removed.\n    const maybeSharedAnalytics = await getSharedAnalytics();\n    if (config && maybeSharedAnalytics) {\n        return new core_1.analytics.MultiAnalytics([config, maybeSharedAnalytics]);\n    }\n    return (_a = config !== null && config !== void 0 ? config : maybeSharedAnalytics) !== null && _a !== void 0 ? _a : new core_1.analytics.NoopAnalytics();\n}\nexports.createAnalytics = createAnalytics;\nfunction analyticsConfigValueToHumanFormat(value) {\n    if (value === false) {\n        return 'disabled';\n    }\n    else if (typeof value === 'string' || value === true) {\n        return 'enabled';\n    }\n    else {\n        return 'not set';\n    }\n}\nasync function getAnalyticsInfoString() {\n    var _a, _b;\n    const globalWorkspace = await (0, config_1.getWorkspace)('global');\n    const localWorkspace = await (0, config_1.getWorkspace)('local');\n    const globalSetting = (_a = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n    const localSetting = (_b = localWorkspace === null || localWorkspace === void 0 ? void 0 : localWorkspace.getCli()) === null || _b === void 0 ? void 0 : _b['analytics'];\n    const analyticsInstance = await createAnalytics(!!localWorkspace /** workspace */, true /** skipPrompt */);\n    return (core_1.tags.stripIndents `\n    Global setting: ${analyticsConfigValueToHumanFormat(globalSetting)}\n    Local setting: ${localWorkspace\n        ? analyticsConfigValueToHumanFormat(localSetting)\n        : 'No local workspace configuration file.'}\n    Effective status: ${analyticsInstance instanceof core_1.analytics.NoopAnalytics ? 'disabled' : 'enabled'}\n  ` + '\\n');\n}\nexports.getAnalyticsInfoString = getAnalyticsInfoString;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}