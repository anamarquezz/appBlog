{"ast":null,"code":"var _asyncToGenerator = require(\"C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst {\n  dirname,\n  resolve\n} = require('path');\n\nconst url = require('url');\n\nconst fs = require('../fs.js'); // given a path, find the owner of the nearest parent\n\n\nconst find = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (path) {\n    // if we have no getuid, permissions are irrelevant on this platform\n    if (!process.getuid) {\n      return {};\n    } // fs methods accept URL objects with a scheme of file: so we need to unwrap\n    // those into an actual path string before we can resolve it\n\n\n    const resolved = path != null && path.href && path.origin ? resolve(url.fileURLToPath(path)) : resolve(path);\n    let stat;\n\n    try {\n      stat = yield fs.lstat(resolved);\n    } finally {\n      // if we got a stat, return its contents\n      if (stat) {\n        return {\n          uid: stat.uid,\n          gid: stat.gid\n        };\n      } // try the parent directory\n\n\n      if (resolved !== dirname(resolved)) {\n        return find(dirname(resolved));\n      } // no more parents, never got a stat, just return an empty object\n\n\n      return {};\n    }\n  });\n\n  return function find(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // given a path, uid, and gid update the ownership of the path if necessary\n\n\nconst update = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (path, uid, gid) {\n    // nothing to update, just exit\n    if (uid === undefined && gid === undefined) {\n      return;\n    }\n\n    try {\n      // see if the permissions are already the same, if they are we don't\n      // need to do anything, so return early\n      const stat = yield fs.stat(path);\n\n      if (uid === stat.uid && gid === stat.gid) {\n        return;\n      }\n    } catch {// ignore errors\n    }\n\n    try {\n      yield fs.chown(path, uid, gid);\n    } catch {// ignore errors\n    }\n  });\n\n  return function update(_x2, _x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // accepts a `path` and the `owner` property of an options object and normalizes\n// it into an object with numerical `uid` and `gid`\n\n\nconst validate = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (path, input) {\n    let uid;\n    let gid;\n\n    if (typeof input === 'string' || typeof input === 'number') {\n      uid = input;\n      gid = input;\n    } else if (input && typeof input === 'object') {\n      uid = input.uid;\n      gid = input.gid;\n    }\n\n    if (uid === 'inherit' || gid === 'inherit') {\n      const owner = yield find(path);\n\n      if (uid === 'inherit') {\n        uid = owner.uid;\n      }\n\n      if (gid === 'inherit') {\n        gid = owner.gid;\n      }\n    }\n\n    return {\n      uid,\n      gid\n    };\n  });\n\n  return function validate(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  find,\n  update,\n  validate\n};","map":{"version":3,"names":["dirname","resolve","require","url","fs","find","path","process","getuid","resolved","href","origin","fileURLToPath","stat","lstat","uid","gid","update","undefined","chown","validate","input","owner","module","exports"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@npmcli/fs/lib/common/owner.js"],"sourcesContent":["const { dirname, resolve } = require('path')\nconst url = require('url')\n\nconst fs = require('../fs.js')\n\n// given a path, find the owner of the nearest parent\nconst find = async (path) => {\n  // if we have no getuid, permissions are irrelevant on this platform\n  if (!process.getuid) {\n    return {}\n  }\n\n  // fs methods accept URL objects with a scheme of file: so we need to unwrap\n  // those into an actual path string before we can resolve it\n  const resolved = path != null && path.href && path.origin\n    ? resolve(url.fileURLToPath(path))\n    : resolve(path)\n\n  let stat\n\n  try {\n    stat = await fs.lstat(resolved)\n  } finally {\n    // if we got a stat, return its contents\n    if (stat) {\n      return { uid: stat.uid, gid: stat.gid }\n    }\n\n    // try the parent directory\n    if (resolved !== dirname(resolved)) {\n      return find(dirname(resolved))\n    }\n\n    // no more parents, never got a stat, just return an empty object\n    return {}\n  }\n}\n\n// given a path, uid, and gid update the ownership of the path if necessary\nconst update = async (path, uid, gid) => {\n  // nothing to update, just exit\n  if (uid === undefined && gid === undefined) {\n    return\n  }\n\n  try {\n    // see if the permissions are already the same, if they are we don't\n    // need to do anything, so return early\n    const stat = await fs.stat(path)\n    if (uid === stat.uid && gid === stat.gid) {\n      return\n    }\n  } catch {\n    // ignore errors\n  }\n\n  try {\n    await fs.chown(path, uid, gid)\n  } catch {\n    // ignore errors\n  }\n}\n\n// accepts a `path` and the `owner` property of an options object and normalizes\n// it into an object with numerical `uid` and `gid`\nconst validate = async (path, input) => {\n  let uid\n  let gid\n\n  if (typeof input === 'string' || typeof input === 'number') {\n    uid = input\n    gid = input\n  } else if (input && typeof input === 'object') {\n    uid = input.uid\n    gid = input.gid\n  }\n\n  if (uid === 'inherit' || gid === 'inherit') {\n    const owner = await find(path)\n    if (uid === 'inherit') {\n      uid = owner.uid\n    }\n\n    if (gid === 'inherit') {\n      gid = owner.gid\n    }\n  }\n\n  return { uid, gid }\n}\n\nmodule.exports = {\n  find,\n  update,\n  validate,\n}\n"],"mappings":";;AAAA,MAAM;EAAEA,OAAF;EAAWC;AAAX,IAAuBC,OAAO,CAAC,MAAD,CAApC;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAnB;;AAEA,MAAME,EAAE,GAAGF,OAAO,CAAC,UAAD,CAAlB,C,CAEA;;;AACA,MAAMG,IAAI;EAAA,6BAAG,WAAOC,IAAP,EAAgB;IAC3B;IACA,IAAI,CAACC,OAAO,CAACC,MAAb,EAAqB;MACnB,OAAO,EAAP;IACD,CAJ0B,CAM3B;IACA;;;IACA,MAAMC,QAAQ,GAAGH,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACI,IAArB,IAA6BJ,IAAI,CAACK,MAAlC,GACbV,OAAO,CAACE,GAAG,CAACS,aAAJ,CAAkBN,IAAlB,CAAD,CADM,GAEbL,OAAO,CAACK,IAAD,CAFX;IAIA,IAAIO,IAAJ;;IAEA,IAAI;MACFA,IAAI,SAAST,EAAE,CAACU,KAAH,CAASL,QAAT,CAAb;IACD,CAFD,SAEU;MACR;MACA,IAAII,IAAJ,EAAU;QACR,OAAO;UAAEE,GAAG,EAAEF,IAAI,CAACE,GAAZ;UAAiBC,GAAG,EAAEH,IAAI,CAACG;QAA3B,CAAP;MACD,CAJO,CAMR;;;MACA,IAAIP,QAAQ,KAAKT,OAAO,CAACS,QAAD,CAAxB,EAAoC;QAClC,OAAOJ,IAAI,CAACL,OAAO,CAACS,QAAD,CAAR,CAAX;MACD,CATO,CAWR;;;MACA,OAAO,EAAP;IACD;EACF,CA9BS;;EAAA,gBAAJJ,IAAI;IAAA;EAAA;AAAA,GAAV,C,CAgCA;;;AACA,MAAMY,MAAM;EAAA,8BAAG,WAAOX,IAAP,EAAaS,GAAb,EAAkBC,GAAlB,EAA0B;IACvC;IACA,IAAID,GAAG,KAAKG,SAAR,IAAqBF,GAAG,KAAKE,SAAjC,EAA4C;MAC1C;IACD;;IAED,IAAI;MACF;MACA;MACA,MAAML,IAAI,SAAST,EAAE,CAACS,IAAH,CAAQP,IAAR,CAAnB;;MACA,IAAIS,GAAG,KAAKF,IAAI,CAACE,GAAb,IAAoBC,GAAG,KAAKH,IAAI,CAACG,GAArC,EAA0C;QACxC;MACD;IACF,CAPD,CAOE,MAAM,CACN;IACD;;IAED,IAAI;MACF,MAAMZ,EAAE,CAACe,KAAH,CAASb,IAAT,EAAeS,GAAf,EAAoBC,GAApB,CAAN;IACD,CAFD,CAEE,MAAM,CACN;IACD;EACF,CAtBW;;EAAA,gBAANC,MAAM;IAAA;EAAA;AAAA,GAAZ,C,CAwBA;AACA;;;AACA,MAAMG,QAAQ;EAAA,8BAAG,WAAOd,IAAP,EAAae,KAAb,EAAuB;IACtC,IAAIN,GAAJ;IACA,IAAIC,GAAJ;;IAEA,IAAI,OAAOK,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;MAC1DN,GAAG,GAAGM,KAAN;MACAL,GAAG,GAAGK,KAAN;IACD,CAHD,MAGO,IAAIA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;MAC7CN,GAAG,GAAGM,KAAK,CAACN,GAAZ;MACAC,GAAG,GAAGK,KAAK,CAACL,GAAZ;IACD;;IAED,IAAID,GAAG,KAAK,SAAR,IAAqBC,GAAG,KAAK,SAAjC,EAA4C;MAC1C,MAAMM,KAAK,SAASjB,IAAI,CAACC,IAAD,CAAxB;;MACA,IAAIS,GAAG,KAAK,SAAZ,EAAuB;QACrBA,GAAG,GAAGO,KAAK,CAACP,GAAZ;MACD;;MAED,IAAIC,GAAG,KAAK,SAAZ,EAAuB;QACrBA,GAAG,GAAGM,KAAK,CAACN,GAAZ;MACD;IACF;;IAED,OAAO;MAAED,GAAF;MAAOC;IAAP,CAAP;EACD,CAxBa;;EAAA,gBAARI,QAAQ;IAAA;EAAA;AAAA,GAAd;;AA0BAG,MAAM,CAACC,OAAP,GAAiB;EACfnB,IADe;EAEfY,MAFe;EAGfG;AAHe,CAAjB"},"metadata":{},"sourceType":"script"}