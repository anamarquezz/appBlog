{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AliasHost = void 0;\n\nconst path_1 = require(\"../path\");\n\nconst resolver_1 = require(\"./resolver\");\n/**\n * A Virtual Host that allow to alias some paths to other paths.\n *\n * This does not verify, when setting an alias, that the target or source exist. Neither does it\n * check whether it's a file or a directory. Please not that directories are also renamed/replaced.\n *\n * No recursion is done on the resolution, which means the following is perfectly valid then:\n *\n * ```\n *     host.aliases.set(normalize('/file/a'), normalize('/file/b'));\n *     host.aliases.set(normalize('/file/b'), normalize('/file/a'));\n * ```\n *\n * This will result in a proper swap of two files for each others.\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some/file'), normalize('/other/path');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/folder/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some'), normalize('/other');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n *   // Create the file with new content and verify that this has the new content.\n *   aHost.write(normalize('/other/folder/file'), content2).subscribe();\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content2));\n */\n\n\nclass AliasHost extends resolver_1.ResolverHost {\n  constructor() {\n    super(...arguments);\n    this._aliases = new Map();\n  }\n\n  _resolve(path) {\n    let maybeAlias = this._aliases.get(path);\n\n    const sp = (0, path_1.split)(path);\n    const remaining = []; // Also resolve all parents of the requested files, only picking the first one that matches.\n    // This can have surprising behaviour when aliases are inside another alias. It will always\n    // use the closest one to the file.\n\n    while (!maybeAlias && sp.length > 0) {\n      const p = (0, path_1.join)(path_1.NormalizedRoot, ...sp);\n      maybeAlias = this._aliases.get(p);\n\n      if (maybeAlias) {\n        maybeAlias = (0, path_1.join)(maybeAlias, ...remaining);\n      } // Allow non-null-operator because we know sp.length > 0 (condition on while).\n\n\n      remaining.unshift(sp.pop()); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    }\n\n    return maybeAlias || path;\n  }\n\n  get aliases() {\n    return this._aliases;\n  }\n\n}\n\nexports.AliasHost = AliasHost;","map":{"version":3,"names":["Object","defineProperty","exports","value","AliasHost","path_1","require","resolver_1","ResolverHost","constructor","arguments","_aliases","Map","_resolve","path","maybeAlias","get","sp","split","remaining","length","p","join","NormalizedRoot","unshift","pop","aliases"],"sources":["C:/sources/GitHub/appBlog/BlogLab/BlogLab-UI/node_modules/@angular-devkit/core/src/virtual-fs/host/alias.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AliasHost = void 0;\nconst path_1 = require(\"../path\");\nconst resolver_1 = require(\"./resolver\");\n/**\n * A Virtual Host that allow to alias some paths to other paths.\n *\n * This does not verify, when setting an alias, that the target or source exist. Neither does it\n * check whether it's a file or a directory. Please not that directories are also renamed/replaced.\n *\n * No recursion is done on the resolution, which means the following is perfectly valid then:\n *\n * ```\n *     host.aliases.set(normalize('/file/a'), normalize('/file/b'));\n *     host.aliases.set(normalize('/file/b'), normalize('/file/a'));\n * ```\n *\n * This will result in a proper swap of two files for each others.\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some/file'), normalize('/other/path');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/folder/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some'), normalize('/other');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n *   // Create the file with new content and verify that this has the new content.\n *   aHost.write(normalize('/other/folder/file'), content2).subscribe();\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content2));\n */\nclass AliasHost extends resolver_1.ResolverHost {\n    constructor() {\n        super(...arguments);\n        this._aliases = new Map();\n    }\n    _resolve(path) {\n        let maybeAlias = this._aliases.get(path);\n        const sp = (0, path_1.split)(path);\n        const remaining = [];\n        // Also resolve all parents of the requested files, only picking the first one that matches.\n        // This can have surprising behaviour when aliases are inside another alias. It will always\n        // use the closest one to the file.\n        while (!maybeAlias && sp.length > 0) {\n            const p = (0, path_1.join)(path_1.NormalizedRoot, ...sp);\n            maybeAlias = this._aliases.get(p);\n            if (maybeAlias) {\n                maybeAlias = (0, path_1.join)(maybeAlias, ...remaining);\n            }\n            // Allow non-null-operator because we know sp.length > 0 (condition on while).\n            remaining.unshift(sp.pop()); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        }\n        return maybeAlias || path;\n    }\n    get aliases() {\n        return this._aliases;\n    }\n}\nexports.AliasHost = AliasHost;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,SAAN,SAAwBG,UAAU,CAACC,YAAnC,CAAgD;EAC5CC,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;EACH;;EACDC,QAAQ,CAACC,IAAD,EAAO;IACX,IAAIC,UAAU,GAAG,KAAKJ,QAAL,CAAcK,GAAd,CAAkBF,IAAlB,CAAjB;;IACA,MAAMG,EAAE,GAAG,CAAC,GAAGZ,MAAM,CAACa,KAAX,EAAkBJ,IAAlB,CAAX;IACA,MAAMK,SAAS,GAAG,EAAlB,CAHW,CAIX;IACA;IACA;;IACA,OAAO,CAACJ,UAAD,IAAeE,EAAE,CAACG,MAAH,GAAY,CAAlC,EAAqC;MACjC,MAAMC,CAAC,GAAG,CAAC,GAAGhB,MAAM,CAACiB,IAAX,EAAiBjB,MAAM,CAACkB,cAAxB,EAAwC,GAAGN,EAA3C,CAAV;MACAF,UAAU,GAAG,KAAKJ,QAAL,CAAcK,GAAd,CAAkBK,CAAlB,CAAb;;MACA,IAAIN,UAAJ,EAAgB;QACZA,UAAU,GAAG,CAAC,GAAGV,MAAM,CAACiB,IAAX,EAAiBP,UAAjB,EAA6B,GAAGI,SAAhC,CAAb;MACH,CALgC,CAMjC;;;MACAA,SAAS,CAACK,OAAV,CAAkBP,EAAE,CAACQ,GAAH,EAAlB,EAPiC,CAOJ;IAChC;;IACD,OAAOV,UAAU,IAAID,IAArB;EACH;;EACU,IAAPY,OAAO,GAAG;IACV,OAAO,KAAKf,QAAZ;EACH;;AAzB2C;;AA2BhDT,OAAO,CAACE,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}